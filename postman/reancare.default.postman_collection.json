{
	"info": {
		"_postman_id": "6c85daee-81c6-4afe-9153-759c64e695ed",
		"name": "reancare.default",
		"description": "This documentation details the default version of the REANCare api.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "service health-check",
			"item": [
				{
					"name": "Health-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}",
							"host": [
								"{{BASE_URL}}"
							]
						},
						"description": "This request will be used by API monitor to check the health of the service."
					},
					"response": []
				}
			],
			"description": "API to check the health of the service."
		},
		{
			"name": "system admin",
			"item": [
				{
					"name": "Admin log-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\",\r\n    \"LoginRoleId\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			],
			"description": "User login with username/phone/email and password.\nIn this example, system admin logs in.\n\nSystem admin can perform multiple admin tasks such as - \n1. Add/remove/update api clients.\n2. Renew the API keys for the api clients.\n3. Perform monitoring and admin tasks through selected set of APIs only accessible to system-admin role."
		},
		{
			"name": "Api clients",
			"item": [
				{
					"name": "Create an API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"My health app\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"+91 9876543219\",\r\n    \"Email\": \"dev@excell-medicos.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "Register an API client.\n\nThis API will register a new API client and returns the generated 'client code' and 'api-key'. The API key has finite lifetime. By default, it is 1 year from the date of the registration."
					},
					"response": []
				},
				{
					"name": "Create an API client - with validity period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Excellent Medicos\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"+91 9876543219\",\r\n    \"Email\": \"dev@excell-medicos.com\",\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "Register an API client. This example shows how you can set custom validity period for the API key. This API will register a new API client and returns generated 'client code' and 'api-key'."
					},
					"response": []
				},
				{
					"name": "Get API client by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "Retrieve an API client info by client id."
					},
					"response": []
				},
				{
					"name": "Update API client by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated api client is returned\", function () {\r",
									"\r",
									"    var expectedClientName = pm.environment.get(\"API_CLIENT_NEW_NAME\");\r",
									"    var expectedClientPhone = pm.environment.get(\"API_CLIENT_NEW_PHONE\");\r",
									"    var expectedClientEmail = pm.environment.get(\"API_CLIENT_NEW_EMAIL\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonRes.Data.Client.ClientName).equals(expectedClientName);\r",
									"    pm.expect(jsonRes.Data.Client.Phone).equals(expectedClientPhone);\r",
									"    pm.expect(jsonRes.Data.Client.Email).equals(expectedClientEmail);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"New-Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									"\r",
									"pm.environment.set(\"API_CLIENT_NEW_NAME\", \"My health app - New name\");\r",
									"pm.environment.set(\"API_CLIENT_NEW_PHONE\", \"+91 4444455555\");\r",
									"pm.environment.set(\"API_CLIENT_NEW_EMAIL\", \"new.client.email@client.com\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"{{API_CLIENT_NEW_NAME}}\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"{{API_CLIENT_NEW_PHONE}}\",\r\n    \"Email\": \"{{API_CLIENT_NEW_EMAIL}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "Update an API client info by client id."
					},
					"response": []
				},
				{
					"name": "Get current API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api key is returned\", function () {\r",
									"\r",
									"    var expectedClientCode = pm.environment.get(\"API_CLIENT_CODE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ClientCode).equals(expectedClientCode);\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/current-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"current-api-key"
							]
						},
						"description": "Get the current valid API key for a given client. \n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				},
				{
					"name": "Renew API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New api key is returned\", function () {\r",
									"\r",
									"    var currentApiKey = pm.environment.get(\"API_KEY\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).not.equals(currentApiKey);\r",
									"    \r",
									"    //set the new key to env\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/renew-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"renew-api-key"
							]
						},
						"description": "Renew API key with a given validity period. If not added, the key will be valid for 1 year.\n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				}
			],
			"description": "Management of API clients. \n\nAPI clients may include mobile/web apps, other customized API services such as chat-bot service."
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "Get person-roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
									"    for(var i = 0; i < personRoles.length; i++) {\r",
									"        var r = personRoles[i];\r",
									"        var name = r.RoleName;\r",
									"        var id = r.id;\r",
									"        var str = \"ROLE_\" + name.toUpperCase();\r",
									"        console.log(str);\r",
									"        console.log(id);\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Person roles are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('PersonRoleTypes');\r",
									"    pm.expect(jsonRes.Data.PersonRoleTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.PersonRoleTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/person-roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"person-roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organization types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var organizationTypes = jsonRes.Data.OrganizationTypes;\r",
									"    for(var i = 0; i < organizationTypes.length; i++) {\r",
									"        var r = organizationTypes[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = \"ORGANIZATION_TYPE_\" + name.toUpperCase();\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Organization types are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('OrganizationTypes');\r",
									"    pm.expect(jsonRes.Data.OrganizationTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.OrganizationTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/organization-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"organization-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get gender types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var genderTypes = jsonRes.Data.GenderTypes;\r",
									"    for(var i = 0; i < genderTypes.length; i++) {\r",
									"        var r = genderTypes[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = \"GENDER_TYPE_\" + name.toUpperCase();\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Gender types are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('GenderTypes');\r",
									"    pm.expect(jsonRes.Data.GenderTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.GenderTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/genders",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"genders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Add an organization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"ORGANIZATION_TYPE\", 'Clinic');\r",
									"pm.environment.set(\"ORGANIZATION_NAME\", 'Shree Clinic');\r",
									"pm.environment.set(\"CONTACT_ORGANIZATION_PHONE\", '+91-1234567890');\r",
									"pm.environment.set(\"CONTACT_ORGANIZATION_EMAIL\", 'xyz@gmail.com');\r",
									"pm.environment.set(\"ABOUT_ORGANIZATION\", 'Shree Gastroenterology & Endoscopy Clinic');\r",
									"pm.environment.set(\"ORGANIZATION_OPERATIONAL_SINCE\", '2017-05-08');\r",
									"pm.environment.set(\"ORGANIZATION_IMAGE_RESOURCE_ID\", '80eb4c8b-f302-4612-9fe9-f832c6eb401f');\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ORGANIZATION_ID\", jsonRes.Data.Organization.id);\r",
									"    pm.environment.set(\"PARENT_ORGANIZATION_ID\", jsonRes.Data.Organization.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New organization is created\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ORGANIZATION_TYPE\");\r",
									"    var expectedName = pm.environment.get(\"ORGANIZATION_NAME\");\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"    var expectedIsHealthFacility = true;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals(expectedName);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(expectedIsHealthFacility);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{ORGANIZATION_TYPE}}\",\r\n    \"Name\": \"{{ORGANIZATION_NAME}}\",\r\n    \"ContactPhone\": \"{{CONTACT_ORGANIZATION_PHONE}}\",\r\n    \"ContactEmail\": \"{{CONTACT_ORGANIZATION_EMAIL}}\",\r\n    \"About\": \"{{ABOUT_ORGANIZATION}}\",\r\n    \"OperationalSince\": \"{{ORGANIZATION_OPERATIONAL_SINCE}}\",\r\n    \"AddressId\": \"{{ADDRESS_ID}}\",\r\n    \"ImageResourceId\": \"80eb4c8b-f302-4612-9fe9-f832c6eb401f\",\r\n    \"IsHealthFacility\": true\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Get organization by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New organization is created\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ORGANIZATION_TYPE\");\r",
									"    var expectedName = pm.environment.get(\"ORGANIZATION_NAME\");\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"    var expectedIsHealthFacility = true;\r",
									"\r",
									"    // var expectedContactUserId = pm.environment.get(\"CONTACT_USER_ID\");\r",
									"    // var expectedNationalRegistryId = null;\r",
									"    // var expectedParentOrganizationId = pm.environment.get(\"PARENT_ORGANIZATION_ID\");\r",
									"    // var expectedAbout = pm.environment.get(\"ABOUT_ORGANIZATION\");\r",
									"    // var expectedImageResourceId = pm.environment.get(\"ORGANIZATION_IMAGE_RESOURCE_ID\");\r",
									"\r",
									"    // console.log(expectedType + '\\n');\r",
									"    // console.log(expectedName + '\\n');\r",
									"    // console.log(expectedContactUserId + '\\n');\r",
									"    // console.log(expectedContactOrganizationPhone + '\\n');\r",
									"    // console.log(expectedContactOrganizationEmail + '\\n');\r",
									"    // console.log(expectedParentOrganizationId + '\\n');\r",
									"    // console.log(expectedAbout + '\\n');\r",
									"    // console.log(expectedOperationalSince + '\\n');\r",
									"    // console.log(expectedImageResourceId + '\\n');\r",
									"    // console.log(expectedIsHealthFacility + '\\n');\r",
									"    // console.log(expectedNationalRegistryId + '\\n');\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals(expectedName);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(expectedIsHealthFacility);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"{{ORGANIZATION_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Update an organization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"ORGANIZATION_NAME\", 'Shree Hospital');\r",
									"pm.environment.get(\"ORGANIZATION_TYPE\", \"Hospital\");\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Organization is updated\", function () {\r",
									"\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals('Hospital');\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals('Shree Hospital');\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(true);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Hospital\",\r\n    \"Name\": \"Shree Hospital\",\r\n    \"About\": \"Shree Hospital is a speciality hospital located on western part of the Pune city specializing in post-trauma care\",\r\n    \"ContactPhone\": \"{{CONTACT_ORGANIZATION_PHONE}}\",\r\n    \"ContactEmail\": \"{{CONTACT_ORGANIZATION_EMAIL}}\",\r\n    \"OperationalSince\": \"{{ORGANIZATION_OPERATIONAL_SINCE}}\",\r\n    \"ImageResourceId\": \"{{ORGANIZATION_IMAGE_RESOURCE_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"{{ORGANIZATION_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Search organizations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of organizations is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organizations');\r",
									"    pm.expect(jsonRes.Data.Organizations.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/search?type=Hospital&name=shr&operationalSinceFrom=1975-01-01&operationalSinceTo=2021-12-12&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=Name&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "Hospital",
									"description": "Search by type of organization"
								},
								{
									"key": "name",
									"value": "shr",
									"description": "Search by organization name"
								},
								{
									"key": "contactPhone",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by contact phone",
									"disabled": true
								},
								{
									"key": "contactEmail",
									"value": "123",
									"description": "Search by contact email",
									"disabled": true
								},
								{
									"key": "operationalSinceFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for operational since date based search"
								},
								{
									"key": "operationalSinceTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for operational since date based search"
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
								},
								{
									"key": "orderBy",
									"value": "Name",
									"description": "The name of the parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Patients",
					"item": [
						{
							"name": "Mobile patient registration and login",
							"item": [
								{
									"name": "Get user roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
													"    for(var i = 0; i < personRoles.length; i++) {\r",
													"        var r = personRoles[i];\r",
													"        var name = r.RoleName;\r",
													"        var id = r.id;\r",
													"        var str = \"ROLE_\" + name.toUpperCase();\r",
													"        console.log(str);\r",
													"        console.log(id);\r",
													"        pm.environment.set(str, id);\r",
													"    }\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client app authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/types/person-roles",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"types",
												"person-roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user with phone and role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"PHONE_NUMBER\", \"1599511599\");\r",
													"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client app authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/users/by-phone/{{PHONE}}/role/{{ROLE_PATIENT}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"users",
												"by-phone",
												"{{PHONE}}",
												"role",
												"{{ROLE_PATIENT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register patient- with only a phone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
													"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
													"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
													"    pm.environment.set(\"PERSON_ID_1\", jsonRes.Data.Patient.User.Person.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
													"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
													"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text",
												"description": "API key for client app authentication"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/patients",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients"
											]
										},
										"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
									},
									"response": []
								},
								{
									"name": "Patient log-in with otp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client app authentication",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Otp\": \"180291\",\r\n    \"LoginRoleId\": {{ROLE_PATIENT}}\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/users/login-with-otp",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"users",
												"login-with-otp"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate otp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"// pm.test(\"Request is successfull\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"//     var jsonRes = pm.response.json();\r",
													"//     pm.expect(jsonRes.Status).to.eql('success');\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client app authentication",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"+91-9970155165\",\r\n    \"Purpose\": \"Login\",\r\n    \"RoleId\": 2\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/users/generate-otp",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"users",
												"generate-otp"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Register patient- with only a phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_1\", jsonRes.Data.Patient.User.Person.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text",
										"description": "API key for client app authentication"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								},
								"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
							},
							"response": []
						},
						{
							"name": "Register patient- with same phone number - should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Response should be failure\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('failure');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register patient- with phone and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_2\", jsonRes.Data.Patient.User.Person.id);\r",
											"\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PASSWORD\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patient log-in with password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user with phone and role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
											"    for(var i = 0; i < personRoles.length; i++) {\r",
											"        var r = personRoles[i];\r",
											"        var name = r.RoleName;\r",
											"        var id = r.id;\r",
											"        var str = \"ROLE_\" + name.toUpperCase();\r",
											"        console.log(str);\r",
											"        console.log(id);\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person roles are retrieved\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.User).to.not.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/users/by-phone/{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}/role/{{ROLE_PATIENT}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"by-phone",
										"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}",
										"role",
										"{{ROLE_PATIENT}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get patient by user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var password = \"Client-Test@123\";\r",
											"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update patient details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
											"    pm.environment.set(\"PATIENT_PHONE\", jsonRes.Data.Patient.User.Person.Phone);\r",
											"    pm.environment.set(\"PATIENT_GENDER\", jsonRes.Data.Patient.User.Person.Gender);\r",
											"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
											"\r",
											"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update patient details - only email and first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
											"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
											"\r",
											"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FirstName\": \"Anand\",\r\n    \"Email\": \"Anand.doe@gmail.com\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search patients",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of patients is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
											"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/search?phone={{PATIENT_PHONE_NUMBER}}&email={{PATIENT_EMAIL}}&name={{PATIENT_FIRST_NAME}}&gender={{PATIENT_GENDER}}&birthdateFrom=1975-01-01&birthdateTo=2021-12-12&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"search"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{PATIENT_PHONE_NUMBER}}",
											"description": "Search by patient phone"
										},
										{
											"key": "email",
											"value": "{{PATIENT_EMAIL}}",
											"description": "Search by patient email"
										},
										{
											"key": "name",
											"value": "{{PATIENT_FIRST_NAME}}",
											"description": "Search by name"
										},
										{
											"key": "gender",
											"value": "{{PATIENT_GENDER}}",
											"description": "Search by patient gender"
										},
										{
											"key": "birthdateFrom",
											"value": "1975-01-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search"
										},
										{
											"key": "birthdateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search"
										},
										{
											"key": "createdDateFrom",
											"value": "2021-05-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
										},
										{
											"key": "createdDateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
										},
										{
											"key": "orderBy",
											"value": "Email",
											"description": "The name of the parameter to order by"
										},
										{
											"key": "order",
											"value": "ascending",
											"description": "'ascending' or 'descending'"
										},
										{
											"key": "pageIndex",
											"value": "0",
											"description": "Page index for pagination"
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"description": "Items per page"
										}
									]
								},
								"description": "Search addresses using query parameters."
							},
							"response": []
						}
					]
				},
				{
					"name": "Doctors",
					"item": [
						{
							"name": "Register doctor- with only a phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    pm.environment.set(\"DOCTOR_PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"DOCTOR_PERSON_ID_1\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_3\", jsonRes.Data.Doctor.User.Person.id);\r",
											"\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											"pm.environment.set(\"PASSWORD\", password);\r",
											"\r",
											"//Profile images\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text",
										"description": "API key for client app authentication"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors"
									]
								},
								"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
							},
							"response": []
						},
						{
							"name": "Register doctor- with same phone number - should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is failure\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var password = \"Client-Test@123\";\r",
											"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register doctor- with phone and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    pm.environment.set(\"CONTACT_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    pm.environment.set(\"DOCTOR_PERSON_ID_2\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_4\", jsonRes.Data.Doctor.User.Person.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											"pm.environment.set(\"PASSWORD\", password);\r",
											"\r",
											"//Profile images\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Doctor log-in with password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{ROLE_DOCTOR}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get doctor by user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var password = \"Client-Test@123\";\r",
											"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update doctor details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_FIRST_NAME\", jsonRes.Data.Doctor.User.Person.FirstName);\r",
											"    pm.environment.set(\"DOCTOR_PHONE\", jsonRes.Data.Doctor.User.Person.Phone);\r",
											"    pm.environment.set(\"DOCTOR_GENDER\", jsonRes.Data.Doctor.User.Person.Gender);\r",
											"    pm.environment.set(\"DOCTOR_EMAIL\", jsonRes.Data.Doctor.User.Person.Email);\r",
											"\r",
											"    var phone = jsonRes.Data.Doctor.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"DOCTOR_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor details are updated\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update doctor details - only email and first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_FIRST_NAME\", jsonRes.Data.Doctor.User.Person.FirstName);\r",
											"    pm.environment.set(\"DOCTOR_EMAIL\", jsonRes.Data.Doctor.User.Person.Email);\r",
											"    pm.environment.set(\"CONTACT_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    \r",
											"    var phone = jsonRes.Data.Doctor.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"DOCTOR_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FirstName\": \"Anand\",\r\n    \"Email\": \"Anand.doe@gmail.com\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search doctors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of doctors is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctors');\r",
											"    pm.expect(jsonRes.Data.Doctors.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/search?phone={{DOCTOR_PHONE_NUMBER}}&email={{DOCTOR_EMAIL}}&name={{DOCTOR_FIRST_NAME}}&gender={{DOCTOR_GENDER}}&birthdateFrom=1975-01-01&birthdateTo=2021-12-12&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"search"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{DOCTOR_PHONE_NUMBER}}",
											"description": "Search by patient phone"
										},
										{
											"key": "email",
											"value": "{{DOCTOR_EMAIL}}",
											"description": "Search by patient email"
										},
										{
											"key": "name",
											"value": "{{DOCTOR_FIRST_NAME}}",
											"description": "Search by name"
										},
										{
											"key": "gender",
											"value": "{{DOCTOR_GENDER}}",
											"description": "Search by patient gender"
										},
										{
											"key": "birthdateFrom",
											"value": "1975-01-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search"
										},
										{
											"key": "birthdateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search"
										},
										{
											"key": "createdDateFrom",
											"value": "2021-05-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
										},
										{
											"key": "createdDateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
										},
										{
											"key": "orderBy",
											"value": "Email",
											"description": "The name of the parameter to order by"
										},
										{
											"key": "order",
											"value": "ascending",
											"description": "'ascending' or 'descending'"
										},
										{
											"key": "pageIndex",
											"value": "0",
											"description": "Page index for pagination"
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"description": "Items per page"
										}
									]
								},
								"description": "Search addresses using query parameters."
							},
							"response": []
						}
					]
				},
				{
					"name": "User device details",
					"item": [
						{
							"name": "Add user device details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"try {",
											"    pm.environment.set(\"USER_DEVICE_DETAILS_ID\", jsonRes.Data.UserDeviceDetails.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New user device details is created\", function () {",
											"",
											"    var expectedDeviceName = \"Iphone13\";",
											"    var expectedUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedAppVersion = \"1.2.0\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetails');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('id');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('DeviceName');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('UserId');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('AppVersion');",
											"",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.DeviceName).equals(expectedDeviceName);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.UserId).equals(expectedUserId);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.AppVersion).equals(expectedAppVersion);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Token\": \"abcds\",\n    \"UserId\": \"{{PATIENT_USER_ID}}\",\n    \"DeviceName\": \"Iphone13\",\n    \"OSType\": \"aaa\",\n    \"OSVersion\": \"14.2\",\n    \"AppName\": \"Reancare\",\n    \"AppVersion\": \"1.2.0\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-device-details",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user device details by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User device details is returned\", function () {",
											"    var expectedDeviceName = \"Iphone13\";",
											"    var expectedUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedAppVersion = \"1.2.0\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetails');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('id');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('DeviceName');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('UserId');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('AppVersion');",
											"",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.DeviceName).equals(expectedDeviceName);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.UserId).equals(expectedUserId);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.AppVersion).equals(expectedAppVersion);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/{{USER_DEVICE_DETAILS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"{{USER_DEVICE_DETAILS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user device details by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"pm.test(\"Updated user device details is returned\", function () {",
											"    var expectedDeviceName = \"Iphone13\";",
											"    var expectedAppVersion = \"1.3.0\";",
											"",
											"     var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetails');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('id');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('DeviceName');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('AppVersion');",
											"",
											"",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.DeviceName).equals(expectedDeviceName);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.AppVersion).equals(expectedAppVersion);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Token\": \"abcds\",\n    \"UserId\": \"237d4b82-d682-43cb-8688-3ec19ee9f2ea\",\n    \"DeviceName\": \"Iphone13\",\n    \"OSType\": \"aaa\",\n    \"OSVersion\": \"14.2\",\n    \"AppName\": \"Rean Health\",\n    \"AppVersion\": \"1.3.0\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/{{USER_DEVICE_DETAILS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"{{USER_DEVICE_DETAILS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search user device details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of user device details is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetailsRecords');",
											"    pm.expect(jsonRes.Data.UserDeviceDetailsRecords.Items.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/search?deviceName=Iphone13&oSType=aaa&oSVersion=14.2&orderBy=DeviceName&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"search"
									],
									"query": [
										{
											"key": "deviceName",
											"value": "Iphone13"
										},
										{
											"key": "oSType",
											"value": "aaa"
										},
										{
											"key": "oSVersion",
											"value": "14.2"
										},
										{
											"key": "orderBy",
											"value": "DeviceName"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "appName",
											"value": "Rean Health",
											"disabled": true
										},
										{
											"key": "appVersion",
											"value": "1.3.0",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "{{PATIENT_USER_ID}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user device details by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User device details is deleted\", function () {",
											"    var expectedValue = true;",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/{{USER_DEVICE_DETAILS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"{{USER_DEVICE_DETAILS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "## APIs to manage users\n\nThese set of APIs are meant to add/retrieve/update/delete/search users for different types, such as patients' doctors, lab-users and pharmacists."
		},
		{
			"name": "Addresses",
			"item": [
				{
					"name": "Create first address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ADDRESS_TYPE\", 'Home');\r",
									"pm.environment.set(\"ADDRESS_LINE\", '89/88, Sembudoss St, Parrys');\r",
									"pm.environment.set(\"ADDRESS_CITY\", 'Pune');\r",
									"pm.environment.set(\"ADDRESS_DISTRICT\", 'Greater Pune');\r",
									"pm.environment.set(\"ADDRESS_STATE\", 'Maharashtra');\r",
									"pm.environment.set(\"ADDRESS_COUNTRY\", 'India');\r",
									"pm.environment.set(\"ADDRESS_POSTAL_CODE\", '411001');\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE\", 36.732324);\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE\", 6.611966);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ADDRESS_ID\", jsonRes.Data.Address.id);\r",
									"    pm.environment.set(\"ADDRESS_ID_1\", jsonRes.Data.Address.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{ADDRESS_TYPE}}\",\r\n    \"AddressLine\": \"{{ADDRESS_LINE}}\",\r\n    \"City\": \"{{ADDRESS_CITY}}\",\r\n    \"District\": \"{{ADDRESS_DISTRICT}}\",\r\n    \"State\": \"{{ADDRESS_STATE}}\",\r\n    \"Country\": \"{{ADDRESS_COUNTRY}}\",\r\n    \"PostalCode\": \"{{ADDRESS_POSTAL_CODE}}\",\r\n    \"Longitude\": {{ADDRESS_LONGITUDE}},\r\n    \"Lattitude\": {{ADDRESS_LATTITUDE}}\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Get address by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Address is returned\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ADDRESS_TYPE\");\r",
									"    var expectedAddressLine = pm.environment.get(\"ADDRESS_LINE\");\r",
									"    var expectedCity = pm.environment.get(\"ADDRESS_CITY\");\r",
									"    var expectedDistrict = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"    var expectedState = pm.environment.get(\"ADDRESS_STATE\");\r",
									"    var expectedCountry = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"    var expectedPostalCode = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"    var expectedLongitude = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"    var expectedLattitude = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/{{ADDRESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"{{ADDRESS_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Update an address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated address is returned\", function () {\r",
									"\r",
									"    var expectedType = \"Official\";\r",
									"    var expectedAddressLine = \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\";\r",
									"    var expectedCity = \"Mumbai\";\r",
									"    var expectedDistrict = \"Greater Mumbai\";\r",
									"    var expectedState = \"Maharashtra\";\r",
									"    var expectedCountry = \"India\";\r",
									"    var expectedPostalCode = \"412407\";\r",
									"    var expectedLongitude = 23.45545;\r",
									"    var expectedLattitude = 54.65466;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Official\",\r\n    \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n    \"City\": \"Mumbai\",\r\n    \"District\": \"Greater Mumbai\",\r\n    \"State\": \"Maharashtra\",\r\n    \"Country\": \"India\",\r\n    \"PostalCode\": \"412407\",\r\n    \"Longitude\": 23.45545,\r\n    \"Lattitude\": 54.65466\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/{{ADDRESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"{{ADDRESS_ID}}"
							]
						},
						"description": "Update the details for an address."
					},
					"response": []
				},
				{
					"name": "Search addresses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var str = '';\r",
									"var search = '';\r",
									"var num = 0.0;\r",
									"\r",
									"var expectedType = pm.environment.get(\"ADDRESS_TYPE\");\r",
									"var expectedAddressLine = pm.environment.get(\"ADDRESS_LINE\");\r",
									"var expectedCity = pm.environment.get(\"ADDRESS_CITY\");\r",
									"var expectedDistrict = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"var expectedState = pm.environment.get(\"ADDRESS_STATE\");\r",
									"var expectedCountry = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"var expectedPostalCode = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"var expectedLongitude = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"var expectedLattitude = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_LINE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_LINE_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_CITY\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_CITY_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_DISTRICT_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_STATE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_STATE_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_COUNTRY_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_POSTAL_CODE_SEARCH_STRING\", search);\r",
									"\r",
									"num = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_FROM\", num - 1);\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_TO\", num + 1);\r",
									"\r",
									"num = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_FROM\", num - 1);\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_TO\", num + 1);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of addresses is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
									"    pm.expect(jsonRes.Data.Addresses.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "Session token (JWT) for the user",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API client secret key",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/search?type=Official&city=Mum&district={{ADDRESS_DISTRICT_SEARCH_STRING}}&state={{ADDRESS_STATE_SEARCH_STRING}}&country={{ADDRESS_COUNTRY_SEARCH_STRING}}&postalCode=412&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=City&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "Official",
									"description": "Type of the address"
								},
								{
									"key": "addressLine",
									"value": "{{ADDRESS_LINE_SEARCH_STRING}}",
									"description": "Search string to match address line",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Mum",
									"description": "Search string for city"
								},
								{
									"key": "district",
									"value": "{{ADDRESS_DISTRICT_SEARCH_STRING}}",
									"description": "Search string for district"
								},
								{
									"key": "state",
									"value": "{{ADDRESS_STATE_SEARCH_STRING}}",
									"description": "Search string for state"
								},
								{
									"key": "country",
									"value": "{{ADDRESS_COUNTRY_SEARCH_STRING}}",
									"description": "Search string for country"
								},
								{
									"key": "postalCode",
									"value": "412",
									"description": "Search string for "
								},
								{
									"key": "longitudeFrom",
									"value": "{{ADDRESS_LONGITUDE_SEARCH_FROM}}",
									"description": "Format: float value. \nStart of the range for longitude based search",
									"disabled": true
								},
								{
									"key": "longitudeTo",
									"value": "{{ADDRESS_LONGITUDE_SEARCH_TO}}",
									"description": "Format: float value. \nEnd of the range for longitude based search",
									"disabled": true
								},
								{
									"key": "lattitudeFrom",
									"value": "{{ADDRESS_LATTITUDE_SEARCH_FROM}}",
									"description": "Format: float value.\nStart of the range for lattitude based search",
									"disabled": true
								},
								{
									"key": "lattitudeTo",
									"value": "{{ADDRESS_LATTITUDE_SEARCH_TO}}",
									"description": "Format: float value.\nEnd of the range for lattitude based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
								},
								{
									"key": "orderBy",
									"value": "City",
									"description": "The name of the Parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Create second address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ADDRESS_ID\", jsonRes.Data.Address.id);\r",
									"    pm.environment.set(\"ADDRESS_ID_2\", jsonRes.Data.Address.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A new address is returned\", function () {\r",
									"\r",
									"    var expectedType = \"Official\";\r",
									"    var expectedAddressLine = \"120, XYZ Lane\";\r",
									"    var expectedCity = \"Pune\";\r",
									"    var expectedDistrict = \"Pune\";\r",
									"    var expectedState = \"Maharashtra\";\r",
									"    var expectedCountry = \"India\";\r",
									"    var expectedPostalCode = \"411001\";\r",
									"    var expectedLongitude = 23.43243;\r",
									"    var expectedLattitude = 80.24354;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Official\",\r\n    \"AddressLine\": \"120, XYZ Lane\",\r\n    \"City\": \"Pune\",\r\n    \"District\": \"Pune\",\r\n    \"State\": \"Maharashtra\",\r\n    \"Country\": \"India\",\r\n    \"PostalCode\": \"411001\",\r\n    \"Longitude\": 23.43243,\r\n    \"Lattitude\": 80.24354\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Add an address."
					},
					"response": []
				}
			],
			"description": "## APIs to manage addresses\n\nThese set of APIs are used to manage addresses belonging to persons or organizations."
		},
		{
			"name": "Relationships",
			"item": [
				{
					"name": "organization-organization",
					"item": [
						{
							"name": "Set parent organization to organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Parent organization is set\", function () {\r",
											"\r",
											"    var expectedParentOrganizationId = pm.environment.get(\"PARENT_ORGANIZATION_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
											"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('ParentOrganization');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Organization.ParentOrganization.id).equals(expectedParentOrganizationId);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentOrganizationId\": \"{{PARENT_ORGANIZATION_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Person-organization",
					"item": [
						{
							"name": "Add person to organization (Doctor-to-Clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-person/{{DOCTOR_PERSON_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-person",
										"{{DOCTOR_PERSON_ID_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add another person to organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-person/{{DOCTOR_PERSON_ID_2}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-person",
										"{{DOCTOR_PERSON_ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get organizations by person id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Organizations for person are returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organizations');\r",
											"    pm.expect(jsonRes.Data.Organizations).to.not.be.empty;\r",
											"\r",
											"    var count = jsonRes.Data.Organizations.length;\r",
											"    pm.expect(count).to.be.greaterThan(0);\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('Type');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('ContactEmail');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('ContactPhone');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('OperationalSince');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('IsHealthFacility');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Organizations.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{DOCTOR_PERSON_ID_1}}/organizations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{DOCTOR_PERSON_ID_1}}",
										"organizations"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Get persons for organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personCount = jsonRes.Data.Persons.length;\r",
											"    pm.environment.set(\"ORGANIZATION_PERSON_COUNT\", personCount);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Persons for organization are returned - Person count is increased\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Persons');\r",
											"    pm.expect(jsonRes.Data.Persons.length).to.be.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/persons",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove person from organization (Doctor-from-Clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person removed from organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/remove-person/{{DOCTOR_PERSON_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"remove-person",
										"{{DOCTOR_PERSON_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get persons for organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Persons for organization are returned - Person count is increased\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Persons');\r",
											"    var previousPersonCount = pm.environment.get(\"ORGANIZATION_PERSON_COUNT\");\r",
											"    var personCount = jsonRes.Data.Persons.length;\r",
											"    pm.expect(personCount).to.be.lessThan(previousPersonCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/persons",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set contact user to organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Contact user id for the organization is updated\", function () {\r",
											"\r",
											"    var expectedContactUserId = pm.environment.get(\"CONTACT_USER_ID\");\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactUser');\r",
											"    pm.expect(jsonRes.Data.Organization.ContactUser.id).equals(expectedContactUserId);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ContactUserId\": \"{{CONTACT_USER_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization-address",
					"item": [
						{
							"name": "Add an address to an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-address/{{ADDRESS_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-address",
										"{{ADDRESS_ID_1}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses by organization id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.environment.set(\"ORGANIZATION_ADDRESS_COUNT\", addressCount);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Add another address to an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-address/{{ADDRESS_ID_2}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-address",
										"{{ADDRESS_ID_2}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses by organization id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"\r",
											"    var previousAddressCount = pm.environment.get(\"ORGANIZATION_ADDRESS_COUNT\");\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.expect(addressCount).to.be.greaterThan(previousAddressCount);\r",
											"\r",
											"    pm.environment.set(\"ORGANIZATION_ADDRESS_COUNT\", addressCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Remove an address from an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address removed from organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/remove-address/{{ADDRESS_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"remove-address",
										"{{ADDRESS_ID_1}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization is one less than previous count\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    var previousAddressCount = pm.environment.get(\"ORGANIZATION_ADDRESS_COUNT\");\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.expect(addressCount).to.be.lessThan(previousAddressCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Person-address",
					"item": [
						{
							"name": "Add an address to a person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to person\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonId\": \"{{PERSON_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/add-address/{{ADDRESS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"add-address",
										"{{ADDRESS_ID}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for person after addition",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for person are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Remove an address from person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address removed from person\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonId\": \"{{PERSON_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/remove-address/{{ADDRESS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"remove-address",
										"{{ADDRESS_ID}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for person after removal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is failure\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('failure');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Patient specific routes",
			"item": [
				{
					"name": "Patient health profile",
					"item": [
						{
							"name": "Get health profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Default patient health profile is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('HealthProfile');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('BloodGroup');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDiabetic');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('HasHeartAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MaritalStatus');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SedentaryLifestyle');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsSmoker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDrinker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SubstanceAbuse');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-health-profiles/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-health-profiles",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Add an address."
							},
							"response": []
						},
						{
							"name": "Update health profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated patient health profile is returned\", function () {\r",
											"\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('HealthProfile');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MajorAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('OtherConditions');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('BloodGroup');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDiabetic');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('HasHeartAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MaritalStatus');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Ethnicity');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Nationality');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Occupation');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SedentaryLifestyle');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsSmoker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDrinker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSeverity');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSince');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('ProcedureHistory');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SubstanceAbuse');\r",
											"\r",
											"    pm.expect(jsonRes.Data.HealthProfile.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.BloodGroup).equals(\"O+\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.MajorAilment).equals(\"Heart failure\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.OtherConditions).equals(\"None\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsDiabetic).equals(false);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.HasHeartAilment).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.MaritalStatus).equals(\"Married\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Ethnicity).equals(\"South-Asian\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Nationality).equals(\"Indian\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Occupation).equals(\"Software engineer\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.SedentaryLifestyle).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsSmoker).equals(false);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsDrinker).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.DrinkingSeverity).equals(\"Medium\");\r",
											"\r",
											"    var drinkingSince = jsonRes.Data.HealthProfile.DrinkingSince;\r",
											"    if(drinkingSince){\r",
											"        drinkingSince = drinkingSince.split('T')[0];\r",
											"    }\r",
											"    pm.expect(drinkingSince).equals(\"2010-01-01\");\r",
											"\r",
											"    pm.expect(jsonRes.Data.HealthProfile.SubstanceAbuse).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.ProcedureHistory).equals(\"Had a toncil operation\");\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BloodGroup\": \"O+\",\r\n    \"MajorAilment\": \"Heart failure\",\r\n    \"OtherConditions\": \"None\",\r\n    \"IsDiabetic\": false,\r\n    \"HasHeartAilment\": true,\r\n    \"MaritalStatus\": \"Married\",\r\n    \"Ethnicity\": \"South-Asian\",\r\n    \"Nationality\": \"Indian\",\r\n    \"Occupation\": \"Software engineer\",\r\n    \"SedentaryLifestyle\": true,\r\n    \"IsSmoker\": false,\r\n    \"IsDrinker\": true,\r\n    \"DrinkingSeverity\": \"Medium\",\r\n    \"DrinkingSince\": \"2010-01-01\",\r\n    \"SubstanceAbuse\": true,\r\n    \"ProcedureHistory\": \"Had a toncil operation\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-health-profiles/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-health-profiles",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Add an address."
							},
							"response": []
						}
					],
					"description": "## APIs to manage addresses\n\nThese set of APIs are used to manage addresses belonging to persons or organizations."
				},
				{
					"name": "Patient Emergency Contact",
					"item": [
						{
							"name": "Get contact person roles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact roles are returned.\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContactRoles');\r",
											"    pm.expect(jsonRes.Data.EmergencyContactRoles).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContactRoles.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/roles",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"roles"
									]
								},
								"description": "Get an emergency contact by emergency contact id."
							},
							"response": []
						},
						{
							"name": "Create emergency contact with existing person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"let doctorId = pm.environment.get('DOCTOR_PERSON_ID');\r",
											"let addressId = pm.environment.get('ADDRESS_ID');\r",
											"let orgId = pm.environment.get('ORGANIZATION_ID');\r",
											"pm.environment.set(\"PATIENT_USER_ID\", patientUserId);\r",
											"pm.environment.set(\"CONTACT_PERSON_ID\", doctorId);\r",
											"pm.environment.set(\"CONTACT_RELATION\", 'Doctor');\r",
											"pm.environment.set(\"ADDRESS_ID\", addressId);\r",
											"pm.environment.set(\"ORGANIZATION_ID\", orgId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_EMERGENCY_CONTACT_ID\", jsonRes.Data.EmergencyContact.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact is created\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = pm.environment.get(\"CONTACT_RELATION\");\r",
											"    let expectedIsAvailableForEmergency = true;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM - 5:00 PM\";\r",
											"    let expectedDescription = \"Some description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-3243243334\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"ContactPersonId\":\"{{PERSON_ID}}\",\r\n    \"ContactRelation\":\"{{CONTACT_RELATION}}\",\r\n    \"AddressId\":\"{{ADDRESS_ID}}\",\r\n    \"OrganizationId\":\"{{ORGANIZATION_ID}}\",\r\n    \"IsAvailableForEmergency\":true,\r\n    \"TimeOfAvailability\":\"10:00 AM - 5:00 PM\",\r\n    \"Description\":\"Some description here\",\r\n    \"AdditionalPhoneNumbers\":\"+91-3243243334\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts"
									]
								},
								"description": "Add an emergency contact."
							},
							"response": []
						},
						{
							"name": "Create emergency contact with new person name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"let addressId = pm.environment.get('ADDRESS_ID');\r",
											"let orgId = pm.environment.get('ORGANIZATION_ID');\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_EMERGENCY_CONTACT_ID\", jsonRes.Data.EmergencyContact.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact is created\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = \"Patient family member\";\r",
											"    let expectedIsAvailableForEmergency = true;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM - 5:00 PM\";\r",
											"    let expectedDescription = \"Some description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-3243243334\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"ContactPerson\": {\r\n        \"Prefix\": \"Mrs.\",\r\n        \"FirstName\": \"Abc\",\r\n        \"LastName\": \"Xyz\",\r\n        \"Phone\": \"+91-3243243334\"\r\n    },\r\n    \"ContactRelation\": \"Patient family member\",\r\n    \"Address\": {\r\n        \"AddressLine\": \"GSG Schlesische Straße, Gebäude 3, Schlesische Straße 27\",\r\n        \"City\": \"Berlin\",\r\n        \"Country\": \"Germany\",\r\n        \"PostalCode\": \"10997\"\r\n    },\r\n    \"IsAvailableForEmergency\": true,\r\n    \"TimeOfAvailability\": \"10:00 AM - 5:00 PM\",\r\n    \"Description\": \"Some description here\",\r\n    \"AdditionalPhoneNumbers\": \"+91-3243243334\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts"
									]
								},
								"description": "Add an emergency contact."
							},
							"response": []
						},
						{
							"name": "Get patient emergency contact by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact is returned\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = \"Patient family member\";\r",
											"    let expectedIsAvailableForEmergency = true;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM - 5:00 PM\";\r",
											"    let expectedDescription = \"Some description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-3243243334\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/{{PATIENT_EMERGENCY_CONTACT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"{{PATIENT_EMERGENCY_CONTACT_ID}}"
									]
								},
								"description": "Get an emergency contact by emergency contact id."
							},
							"response": []
						},
						{
							"name": "Update an patient emergency contact",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_EMERGENCY_CONTACT_DESCRIPTION\", 'Speech issues');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = \"Patient family member\";\r",
											"    let expectedIsAvailableForEmergency = false;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM to 7:00 PM\";\r",
											"    let expectedDescription = \"Some another description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-1231231233\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"IsAvailableForEmergency\": false,\r\n    \"TimeOfAvailability\": \"10:00 AM to 7:00 PM\",\r\n    \"Description\": \"Some another description here\",\r\n    \"AdditionalPhoneNumbers\": \"+91-1231231233\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/{{PATIENT_EMERGENCY_CONTACT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"{{PATIENT_EMERGENCY_CONTACT_ID}}"
									]
								},
								"description": "Update the details for an emergency contact."
							},
							"response": []
						},
						{
							"name": "Search patient emergency contact",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of Calorie Record is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContacts');\r",
											"    pm.expect(jsonRes.Data.EmergencyContacts.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/search?createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=IsAvailableForEmergency&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"search"
									],
									"query": [
										{
											"key": "createdDateFrom",
											"value": "2021-05-01"
										},
										{
											"key": "createdDateTo",
											"value": "2021-12-12"
										},
										{
											"key": "orderBy",
											"value": "IsAvailableForEmergency"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "PatientUserId",
											"value": "",
											"disabled": true
										},
										{
											"key": "ContactPersonId",
											"value": "",
											"disabled": true
										},
										{
											"key": "IsAvailableForEmergency",
											"value": "",
											"disabled": true
										},
										{
											"key": "ContactRelation",
											"value": "Doctor",
											"disabled": true
										}
									]
								},
								"description": "Search emergency contact using query parameters."
							},
							"response": []
						},
						{
							"name": "Delete patient emergency contact record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/{{PATIENT_EMERGENCY_CONTACT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"{{PATIENT_EMERGENCY_CONTACT_ID}}"
									]
								},
								"description": "Deletes emergency contact using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Goal",
					"item": [
						{
							"name": "Add Goal record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"GOAL_ID\", jsonRes.Data.Goal.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New Goal record is created\", function () {",
											"",
											"    var expectedPatientUserId = pm.environment.get(\"GOAL_PATIENTUSERID\");",
											"    var expectedCarePlanId = pm.environment.get(\"GOAL_CAREPLANID\");",
											"    var expectedTypeCode = pm.environment.get(\"GOAL_TYPECODE\");",
											"    var expectedTypeName = pm.environment.get(\"GOAL_TYPENAME\");",
											"    var expectedGoalAchieved = pm.environment.get(\"GOAL_GOALACHIEVED\");",
											"    var expectedGoalAbandoned = pm.environment.get(\"GOAL_GOALABANDONED\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Goal');",
											"    pm.expect(jsonRes.Data.Goal).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('CarePlanId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('TypeCode');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('TypeName');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAchieved');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAbandoned');",
											"",
											"    pm.expect(jsonRes.Data.Goal.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Goal.CarePlanId).equals('' + expectedCarePlanId);",
											"    pm.expect(jsonRes.Data.Goal.TypeCode).equals('' + expectedTypeCode);",
											"    pm.expect(jsonRes.Data.Goal.TypeName).equals(expectedTypeName);",
											"    pm.expect(jsonRes.Data.Goal.GoalAchieved).equals(expectedGoalAchieved);",
											"    pm.expect(jsonRes.Data.Goal.GoalAbandoned).equals(expectedGoalAbandoned);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"pm.environment.set(\"GOAL_PATIENTUSERID\", userId);\r",
											"pm.environment.set(\"GOAL_CAREPLANID\", 1);\r",
											"pm.environment.set(\"GOAL_TYPECODE\", 1);\r",
											"pm.environment.set(\"GOAL_TYPENAME\", \"Name\");\r",
											"pm.environment.set(\"GOAL_GOALACHIEVED\", true);\r",
											"pm.environment.set(\"GOAL_GOALABANDONED\",false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{GOAL_PATIENTUSERID}}\",\n    \"CarePlanId\": {{GOAL_CAREPLANID}},\n    \"TypeCode\": {{GOAL_TYPECODE}},\n    \"TypeName\": \"{{GOAL_TYPENAME}}\",\n    \"GoalAchieved\": {{GOAL_GOALACHIEVED}},\n    \"GoalAbandoned\": {{GOAL_GOALABANDONED}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals"
									]
								},
								"description": "Create new Goal record"
							},
							"response": []
						},
						{
							"name": "Get Goal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Goal record is returned\", function () {",
											"",
											"    var expectedPatientUserId = pm.environment.get(\"GOAL_PATIENTUSERID\");",
											"    var expectedCarePlanId = pm.environment.get(\"GOAL_CAREPLANID\");",
											"    var expectedTypeCode = pm.environment.get(\"GOAL_TYPECODE\");",
											"    var expectedTypeName = pm.environment.get(\"GOAL_TYPENAME\");",
											"    var expectedGoalAchieved = pm.environment.get(\"GOAL_GOALACHIEVED\");",
											"    var expectedGoalAbandoned = pm.environment.get(\"GOAL_GOALABANDONED\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Goal');",
											"    pm.expect(jsonRes.Data.Goal).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('CarePlanId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('TypeCode');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('TypeName');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAchieved');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAbandoned');",
											"",
											"    pm.expect(jsonRes.Data.Goal.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Goal.CarePlanId).equals(expectedCarePlanId);",
											"    pm.expect(jsonRes.Data.Goal.TypeCode).equals(expectedTypeCode);",
											"    pm.expect(jsonRes.Data.Goal.TypeName).equals(expectedTypeName);",
											"    pm.expect(jsonRes.Data.Goal.GoalAchieved).equals(expectedGoalAchieved);",
											"    pm.expect(jsonRes.Data.Goal.GoalAbandoned).equals(expectedGoalAbandoned);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"{{GOAL_ID}}"
									]
								},
								"description": "Gets list of Goal records"
							},
							"response": []
						},
						{
							"name": "Update Goal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated Goal record is returned\", function () {",
											"",
											"    var expectedPatientUserId = pm.environment.get(\"GOAL_PATIENTUSERID\");",
											"    var expectedCarePlanId = pm.environment.get(\"GOAL_CAREPLANID\");",
											"    var expectedTypeCode = pm.environment.get(\"GOAL_TYPECODE\");",
											"    var expectedTypeName = pm.environment.get(\"GOAL_TYPENAME\");",
											"    var expectedGoalAchieved = pm.environment.get(\"GOAL_GOALACHIEVED\");",
											"    var expectedGoalAbandoned = pm.environment.get(\"GOAL_GOALABANDONED\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Goal');",
											"    pm.expect(jsonRes.Data.Goal).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('CarePlanId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('TypeCode');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('TypeName');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAchieved');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAbandoned');",
											"",
											"    pm.expect(jsonRes.Data.Goal.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Goal.CarePlanId).equals('' + expectedCarePlanId);",
											"    pm.expect(jsonRes.Data.Goal.TypeCode).equals('' + expectedTypeCode);",
											"    pm.expect(jsonRes.Data.Goal.TypeName).equals(expectedTypeName);",
											"    pm.expect(jsonRes.Data.Goal.GoalAchieved).equals(expectedGoalAchieved);",
											"    pm.expect(jsonRes.Data.Goal.GoalAbandoned).equals(expectedGoalAbandoned);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"GOAL_TYPENAME\", \"Better\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{GOAL_PATIENTUSERID}}\",\n    \"CarePlanId\": {{GOAL_CAREPLANID}},\n    \"TypeCode\": {{GOAL_TYPECODE}},\n    \"TypeName\": \"{{GOAL_TYPENAME}}\",\n    \"GoalAchieved\": {{GOAL_GOALACHIEVED}},\n    \"GoalAbandoned\": {{GOAL_GOALABANDONED}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"{{GOAL_ID}}"
									]
								},
								"description": "Update Goal record with id"
							},
							"response": []
						},
						{
							"name": "Search Goal record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of Goal records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Goals');",
											"    pm.expect(jsonRes.Data.Goals.Items.length).greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/search?createdDateFrom=2021-09-01&createdDateTo=2021-10-14&orderBy=&order=ascending&pageIndex=0&itemsPerPage=25&goalAbandoned=false&goalAchieved=true",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"search"
									],
									"query": [
										{
											"key": "createdDateFrom",
											"value": "2021-09-01"
										},
										{
											"key": "createdDateTo",
											"value": "2021-10-14"
										},
										{
											"key": "orderBy",
											"value": ""
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "goalAbandoned",
											"value": "false"
										},
										{
											"key": "goalAchieved",
											"value": "true"
										},
										{
											"key": "PatientUserId",
											"value": "",
											"disabled": true
										},
										{
											"key": "CarePlanId",
											"value": "",
											"disabled": true
										},
										{
											"key": "TypeCode",
											"value": "",
											"disabled": true
										},
										{
											"key": "TypeName",
											"value": "",
											"disabled": true
										},
										{
											"key": "GoalId",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Search Goal records with filters"
							},
							"response": []
						},
						{
							"name": "Delete Goal record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Goal record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"{{GOAL_ID}}"
									]
								},
								"description": "Delete Goal record with id"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient document",
					"item": [
						{
							"name": "Add patient document details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"PATIENT_DOCUMENT_ID\", jsonRes.Data.Document.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New Document record is created\", function () {",
											"",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedResourceId = \"4cd74e12-cae1-4314-9a69-f45b18cc1cf9\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Document');",
											"    pm.expect(jsonRes.Data.Document).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Document).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('MedicalPractitionerUserId');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('ResourceId');",
											"",
											"    ",
											"    pm.expect(jsonRes.Data.Document.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.Document.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Document.ResourceId).equals(expectedResourceId);    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"DocumentType\": \"OPD paper\",\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"MedicalPractitionerUserId\": \"{{DOCTOR_USER_ID}}\",\n    \"MedicalPractionerRole\": \"Doctor\",\n    \"UploadedByUserId\":\"{{PATIENT_USER_ID}}\",\n    \"AssociatedVisitId\": null,\n    \"AssociatedVisitType\": null,\n    \"AssociatedOrderId\": null,\n    \"AssociatedOrderType\": null,\n    \"FileName\": \"Scan.jpg\",\n    \"ResourceId\": \"4cd74e12-cae1-4314-9a69-f45b18cc1cf9\",\n    \"RecordDate\": \"2021-09-24\"\n}\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-documents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get patient document by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Document record is returned\", function () {",
											"",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedResourceId = \"4cd74e12-cae1-4314-9a69-f45b18cc1cf9\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Document');",
											"    pm.expect(jsonRes.Data.Document).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Document).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('MedicalPractitionerUserId');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('ResourceId');",
											"",
											"    pm.expect(jsonRes.Data.Document.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.Document.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Document.ResourceId).equals(expectedResourceId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update patient document by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated document record is returned\", function () {",
											"",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedRecordDate = \"2021-09-24T00:00:00.000Z\";",
											"    ",
											"    var expectedResourceId = \"4cd74e12-cae1-4314-9a69-f45b18cc1cf9\";",
											"",
											"     var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Document');",
											"    pm.expect(jsonRes.Data.Document).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Document).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('MedicalPractitionerUserId');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('RecordDate');",
											"    pm.expect(jsonRes.Data.Document).to.have.property('ResourceId');",
											"",
											"    pm.expect(jsonRes.Data.Document.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.Document.RecordDate).equals(expectedRecordDate);",
											"    ",
											"    pm.expect(jsonRes.Data.Document.ResourceId).equals(expectedResourceId);    ",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"DocumentType\": \"Lab report\",\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"MedicalPractitionerUserId\": \"{{DOCTOR_USER_ID}}\",\n    \"MedicalPractionerRole\": \"Doctor\",\n    \"UploadedByUserId\":\"{{PATIENT_USER_ID}}\",\n    \"AssociatedVisitId\": null,\n    \"AssociatedVisitType\": null,\n    \"AssociatedOrderId\": null,\n    \"AssociatedOrderType\": null,\n    \"FileName\": \"Scan.jpg\",\n    \"ResourceId\": \"4cd74e12-cae1-4314-9a69-f45b18cc1cf9\",\n    \"RecordDate\": \"2021-09-24\"\n}\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete patient document by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Document record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Wellness",
			"item": [
				{
					"name": "Nutrition",
					"item": [
						{
							"name": "Water consumption",
							"item": [
								{
									"name": "Add water consumption record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"try {",
													"    pm.environment.set(\"NUTRITION_WATER_CONSUMPTION_ID\", jsonRes.Data.WaterConsumption.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"New water consumption record is created\", function () {",
													"    var expectedValue = 7;",
													"    var expectedTime = \"2021-09-21T00:00:00.000Z\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumption');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Volume');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('PatientUserId');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Time');",
													"",
													"",
													"    pm.expect(jsonRes.Data.WaterConsumption.Volume).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.WaterConsumption.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(jsonRes.Data.WaterConsumption.Time).equals(expectedTime);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Volume\": 7,\n    \"Time\": \"2021-09-21\"\n\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get water consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"Water consumption record is returned\", function () {",
													"    var expectedValue = 7;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumption');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Volume');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.WaterConsumption.Volume).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.WaterConsumption.PatientUserId).equals(expectedPatientUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/{{NUTRITION_WATER_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"{{NUTRITION_WATER_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update water consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"Updated water consumption record is returned\", function () {",
													"    var expectedValue = 10;",
													"    var expectedTime= \"2021-09-21T00:00:00.000Z\";",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumption');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Volume');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Time');",
													"",
													"    pm.expect(jsonRes.Data.WaterConsumption.Volume).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.WaterConsumption.Time).equals(expectedTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Volume\": 10,\n    \"Time\": \"2021-09-21\"\n\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/{{NUTRITION_WATER_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"{{NUTRITION_WATER_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search water consumption records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"List of water consumption records is returned\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumptionRecords');",
													"    pm.expect(jsonRes.Data.WaterConsumptionRecords.Items.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/search?dailyVolumeFrom=5&dailyVolumeTo=12&order=ascending&pageIndex=0&itemsPerPage=25&orderBy=volume&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"search"
											],
											"query": [
												{
													"key": "dailyVolumeFrom",
													"value": "5"
												},
												{
													"key": "dailyVolumeTo",
													"value": "12"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "orderBy",
													"value": "volume"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete water consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"Water consumption record is deleted\", function () {",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/{{NUTRITION_WATER_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"{{NUTRITION_WATER_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Food Consumption",
							"item": [
								{
									"name": "Add food consumption record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"NUTRITION_FOOD_CONSUMPTION_ID\", jsonRes.Data.FoodConsumption.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is created\", function () {",
													"",
													"    var expectedValue = \"roti\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumption');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.FoodConsumption.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Food\": \"roti\",\n    \"Description\": \"mins\",\n    \"ConsumedAs\": \"Lunch\",\n    \"Calories\": 100,\n    \"StartTime\": \"2021-09-16T09:45:00.000Z\",\n    \"EndTime\": \"2021-09-16T09:50:00.000Z\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get food consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is returned\", function () {",
													"",
													"    var expectedValue = \"roti\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumption');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.FoodConsumption.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get food consumption records by event name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is returned\", function () {",
													"",
													"    var expectedValue = \"Lunch\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumptionEvent');",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.have.property('Foods');",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent.Foods.length).greaterThan(0);",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{PATIENT_USER_ID}}/by-event/lunch",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{PATIENT_USER_ID}}",
												"by-event",
												"lunch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update food consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated food consumption record is returned\", function () {",
													"",
													"    var expectedFood = \"Rice\";",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumption');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('StartTime');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('EndTime');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedFood);",
													"    pm.expect(jsonRes.Data.FoodConsumption.ConsumedAs).equals(\"Dinner\");",
													"   ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Food\": \"Rice\",\n    \"Description\": \"mins\",\n    \"ConsumedAs\": \"Dinner\",\n    \"Calories\": 200,\n    \"StartTime\": \"2021-09-16T09:45:00.000Z\",\n    \"EndTime\": \"2021-09-16T09:50:00.000Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search food consumption records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of food consumption records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumptionRecords');",
													"    pm.expect(jsonRes.Data.FoodConsumptionRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/search?pageIndex=0&itemsPerPage=25&forDay=2021-09-16&orderBy=Food&order=ascending",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"search"
											],
											"query": [
												{
													"key": "food",
													"value": "Basundi",
													"disabled": true
												},
												{
													"key": "consumedAs",
													"value": "Lunch",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "timeFrom",
													"value": "60",
													"disabled": true
												},
												{
													"key": "timeTo",
													"value": "95",
													"disabled": true
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}",
													"disabled": true
												},
												{
													"key": "forDay",
													"value": "2021-09-16"
												},
												{
													"key": "orderBy",
													"value": "Food"
												},
												{
													"key": "order",
													"value": "ascending"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get food consumption records for day",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption records are returned\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumptionForDay');",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('Events');",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('PatientUserId');",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('Date');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay.Events.length).greaterThan(0);",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{PATIENT_USER_ID}}/for-day/2021-09-16",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{PATIENT_USER_ID}}",
												"for-day",
												"2021-09-16"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete food consumption by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Exercise",
					"item": [
						{
							"name": "Meditation",
							"item": [
								{
									"name": "Add meditation record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"EXERCISE_MEDITATION_ID\", jsonRes.Data.Meditation.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New meditation record is created\", function () {",
													"",
													"    var expectedValue = \"Breathing\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.Meditation.Meditation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Meditation.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Meditation\": \"Breathing\",\n    \"Description\": \"\",\n    \"Category\": \"\",\n    \"StartTime\": \"2021-09-21T05:30:00.000Z\",\n    \"EndTime\": \"2021-09-21T05:45:00.000Z\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get meditation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Meditation record is returned\", function () {",
													"",
													"    var expectedValue = \"Breathing\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.Meditation.Meditation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Meditation.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/{{EXERCISE_MEDITATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"{{EXERCISE_MEDITATION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update meditation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated meditation record is returned\", function () {",
													"",
													"    var expectedValue = \"Breathing\";",
													"    var expectedStartTime = \"2021-09-22T06:30:00.000Z\";",
													"    var expectedEndTime = \"2021-09-22T06:45:00.000Z\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('StartTime');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('EndTime');",
													"",
													"    pm.expect(jsonRes.Data.Meditation.Meditation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Meditation.StartTime).equals(expectedStartTime);",
													"    pm.expect(jsonRes.Data.Meditation.EndTime).equals(expectedEndTime);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Meditation\": \"Breathing\",\n    \"Description\": \"\",\n    \"Category\": \"Mindfulness\",\n    \"StartTime\": \"2021-09-22T06:30:00.000Z\",\n    \"EndTime\": \"2021-09-22T06:45:00.000Z\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/{{EXERCISE_MEDITATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"{{EXERCISE_MEDITATION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search meditation records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of meditation records are returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MeditationRecords');",
													"    pm.expect(jsonRes.Data.MeditationRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/search?meditation=Breathing&orderBy=meditation&order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"search"
											],
											"query": [
												{
													"key": "meditation",
													"value": "Breathing"
												},
												{
													"key": "orderBy",
													"value": "meditation"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete meditation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Meditation record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/{{EXERCISE_MEDITATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"{{EXERCISE_MEDITATION_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Physical activity",
							"item": [
								{
									"name": "Add physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"EXERCISE_PHYSICAL_ACTIVITY_ID\", jsonRes.Data.PhysicalActivity.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New physical activity record is created\", function () {\r",
													"\r",
													"    var expectedExercise = \"Dead lift\";\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivity');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Exercise');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Category');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Exercise).equals(expectedExercise);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Exercise\": \"Dead lift\",\r\n    \"Description\": \"30 kg\",\r\n    \"Category\": \"Strength training\",\r\n    \"CaloriesBurned\": 120,\r\n    \"Intensity\": \"Moderate\",\r\n    \"StartTime\": \"2021-09-20T00:00:00.000Z\",\r\n    \"EndTime\": \"2021-09-20T00:15:00.000Z\",\r\n    \"DurationInMin\": 15\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get physical activity by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Physical activity record is returned\", function () {\r",
													"\r",
													"    var expectedExercise = \"Dead lift\";\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivity');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Exercise');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Category');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Exercise).equals(expectedExercise);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/{{EXERCISE_PHYSICAL_ACTIVITY_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"{{EXERCISE_PHYSICAL_ACTIVITY_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated physical activity record is returned\", function () {\r",
													"\r",
													"    var expectedExercise = \"Push up\";\r",
													"    var expectedIntensity = \"Vigorous\";\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivity');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Exercise');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Category');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Exercise).equals(expectedExercise);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Intensity).equals(expectedIntensity);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Exercise\": \"Push up\",\r\n    \"Description\": \"Straight\",\r\n    \"Category\": \"Strength training\",\r\n    \"CaloriesBurned\": 40,\r\n    \"Intensity\": \"Vigorous\",\r\n    \"StartTime\": \"2021-09-20T00:00:00.000Z\",\r\n    \"EndTime\": \"2021-09-20T00:00:05.000Z\",\r\n    \"DurationInMin\": 5\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/{{EXERCISE_PHYSICAL_ACTIVITY_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"{{EXERCISE_PHYSICAL_ACTIVITY_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of physical activity is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivities');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivities.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/search?orderBy=Category&order=ascending&pageIndex=0&itemsPerPage=25",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"search"
											],
											"query": [
												{
													"key": "exercise",
													"value": "Dead lift",
													"disabled": true
												},
												{
													"key": "category",
													"value": "Strength training",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "Category"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Physical activity record is deleted\", function () {\r",
													"\r",
													"    var expectedValue = true;\r",
													"    var jsonRes = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/{{EXERCISE_PHYSICAL_ACTIVITY_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"{{EXERCISE_PHYSICAL_ACTIVITY_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Daily records",
					"item": [
						{
							"name": "Heart points records",
							"item": [
								{
									"name": "Create heart points record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let personId = pm.environment.get('PERSON_ID');\r",
													"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
													"pm.environment.set(\"HEART_POINT_PERSONID\", personId);\r",
													"pm.environment.set(\"HEART_POINT_PATIENTUSERID\", patientUserId);\r",
													"pm.environment.set(\"HEART_POINT_VALUE\", '120');\r",
													"pm.environment.set(\"HEART_POINT_UNIT\", 'bpm');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"HEART_POINT_ID\", jsonRes.Data.HeartPoints.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New Heart point record is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"HEART_POINT_PATIENTUSERID\");\r",
													"    var expectedPersonId = pm.environment.get(\"HEART_POINT_PERSONID\");\r",
													"    var expectedHeartPoints = pm.environment.get(\"HEART_POINT_VALUE\");\r",
													"    var expectedHeartPointUnit = pm.environment.get(\"HEART_POINT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PersonId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PersonId).equals(expectedPersonId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.HeartPoints).equals(\"\" + expectedHeartPoints);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.Unit).equals(expectedHeartPointUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{HEART_POINT_PERSONID}}\",\r\n    \"PatientUserId\": \"{{HEART_POINT_PATIENTUSERID}}\",\r\n    \"HeartPoints\": {{HEART_POINT_VALUE}},\r\n    \"Unit\": \"{{HEART_POINT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points"
											]
										},
										"description": "Add A HeartPoint."
									},
									"response": []
								},
								{
									"name": "Get a heart points record by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Calorie record should have correct data\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"HEART_POINT_PATIENTUSERID\");\r",
													"    var expectedPersonId = pm.environment.get(\"HEART_POINT_PERSONID\");\r",
													"    var expectedHeartPoints = pm.environment.get(\"HEART_POINT_VALUE\");\r",
													"    var expectedHeartPointUnit = pm.environment.get(\"HEART_POINT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PersonId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PersonId).equals(expectedPersonId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(\"\" + jsonRes.Data.HeartPoints.HeartPoints).equals(expectedHeartPoints);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.Unit).equals(expectedHeartPointUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/{{HEART_POINT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"{{HEART_POINT_ID}}"
											]
										},
										"description": "Get an HeartPoint by HeartPoint id."
									},
									"response": []
								},
								{
									"name": "Update a heart points record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let heartPoints = pm.environment.get(\"HEART_POINT_VALUE\");",
													"pm.environment.set(\"HEART_POINT_Value\", Number(heartPoints) + 10);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Correct updates should be reflected\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"HEART_POINT_PATIENTUSERID\");\r",
													"    var expectedPersonId = pm.environment.get(\"HEART_POINT_PERSONID\");\r",
													"    var expectedHeartPoints = pm.environment.get(\"HEART_POINT_VALUE\");\r",
													"    var expectedHeartPointUnit = pm.environment.get(\"HEART_POINT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PersonId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PersonId).equals(expectedPersonId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.HeartPoints).equals(expectedHeartPoints);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.Unit).equals(expectedHeartPointUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{HEART_POINT_PERSONID}}\",\r\n    \"PatientUserId\": \"{{HEART_POINT_PATIENTUSERID}}\",\r\n    \"HeartPoints\": {{HEART_POINT_VALUE}},\r\n    \"Unit\": \"{{HEART_POINT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/{{HEART_POINT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"{{HEART_POINT_ID}}"
											]
										},
										"description": "Update the details for an HeartPoint."
									},
									"response": []
								},
								{
									"name": "Search heart points records",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of Calorie Record is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/search?pageIndex=0&itemsPerPage=25&minValue=10",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "CaloriesBurned",
													"description": "The name of the Parameter to order by",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "personId",
													"value": "",
													"description": "Person ID to filter",
													"disabled": true
												},
												{
													"key": "patientUserId",
													"value": "",
													"description": "Patient User ID to filter",
													"disabled": true
												},
												{
													"key": "minValue",
													"value": "10",
													"description": "filter using heartpoint minimum value"
												},
												{
													"key": "maxValue",
													"value": "100",
													"description": "filter using heartpoint maximum value",
													"disabled": true
												}
											]
										},
										"description": "Search HeartPoints using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete a heart points record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/{{HEART_POINT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"{{HEART_POINT_ID}}"
											]
										},
										"description": "Deletes Heart points using ID"
									},
									"response": []
								}
							]
						},
						{
							"name": "Calorie balance records",
							"item": [
								{
									"name": "Create calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let personId = pm.environment.get('PERSON_ID');\r",
													"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
													"pm.environment.set(\"CALORIE_BALANCE_PERSONID\", personId);\r",
													"pm.environment.set(\"CALORIE_BALANCE_PATIENTUSERID\", patientUserId);\r",
													"pm.environment.set(\"CALORIE_BALANCE_CALORIESCONSUMED\", '120');\r",
													"pm.environment.set(\"CALORIE_BALANCE_CALORIESBURNED\", '100');\r",
													"pm.environment.set(\"CALORIE_BALANCE_UNIT\", 'kcal');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"CALORIE_BALANCE_ID\", jsonRes.Data.CalorieBalance.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New Calorie Balance record is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"CALORIE_BALANCE_PATIENTUSERID\");\r",
													"    var expectedPersonId = pm.environment.get(\"CALORIE_BALANCE_PERSONID\");\r",
													"    var expectedCalorieConsumed = pm.environment.get(\"CALORIE_BALANCE_CALORIESCONSUMED\");\r",
													"    var expectedCalorieBurned = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");\r",
													"    var expectedCalorieUnit = pm.environment.get(\"CALORIE_BALANCE_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalance');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PersonId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesConsumed');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PersonId).equals(expectedPersonId);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesConsumed).equals(expectedCalorieConsumed);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesBurned).equals(expectedCalorieBurned);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.Unit).equals(expectedCalorieUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{CALORIE_BALANCE_PERSONID}}\",\r\n    \"PatientUserId\": \"{{CALORIE_BALANCE_PATIENTUSERID}}\",\r\n    \"CaloriesConsumed\": {{CALORIE_BALANCE_CALORIESCONSUMED}},\r\n    \"CaloriesBurned\": {{CALORIE_BALANCE_CALORIESBURNED}},\r\n    \"Unit\": \"{{CALORIE_BALANCE_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances"
											]
										},
										"description": "Add an address."
									},
									"response": []
								},
								{
									"name": "Get calorie balance record by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Calorie record should have correct data\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"CALORIE_BALANCE_PATIENTUSERID\");\r",
													"    var expectedPersonId = pm.environment.get(\"CALORIE_BALANCE_PERSONID\");\r",
													"    var expectedCalorieConsumed = pm.environment.get(\"CALORIE_BALANCE_CALORIESCONSUMED\");\r",
													"    var expectedCalorieBurned = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");\r",
													"    var expectedCalorieUnit = pm.environment.get(\"CALORIE_BALANCE_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalance');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PersonId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesConsumed');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PersonId).equals(expectedPersonId);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesConsumed).equals(Number(expectedCalorieConsumed));\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesBurned).equals(Number(expectedCalorieBurned));\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.Unit).equals(expectedCalorieUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/{{CALORIE_BALANCE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"{{CALORIE_BALANCE_ID}}"
											]
										},
										"description": "Get an address by address id."
									},
									"response": []
								},
								{
									"name": "Update an calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let height = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");",
													"pm.environment.set(\"CALORIE_BALANCE_CALORIESBURNED\", Number(height) + 10);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Correct updates should be reflected\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"CALORIE_BALANCE_PATIENTUSERID\");\r",
													"    var expectedPersonId = pm.environment.get(\"CALORIE_BALANCE_PERSONID\");\r",
													"    var expectedCalorieConsumed = pm.environment.get(\"CALORIE_BALANCE_CALORIESCONSUMED\");\r",
													"    var expectedCalorieBurned = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");\r",
													"    var expectedCalorieUnit = pm.environment.get(\"CALORIE_BALANCE_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalance');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PersonId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesConsumed');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PersonId).equals(expectedPersonId);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.CalorieBalance.CaloriesConsumed)).equals(Number(expectedCalorieConsumed));\r",
													"    pm.expect(Number(jsonRes.Data.CalorieBalance.CaloriesBurned)).equals(Number(expectedCalorieBurned));\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.Unit).equals(expectedCalorieUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{CALORIE_BALANCE_PERSONID}}\",\r\n    \"PatientUserId\": \"{{CALORIE_BALANCE_PATIENTUSERID}}\",\r\n    \"CaloriesConsumed\": {{CALORIE_BALANCE_CALORIESCONSUMED}},\r\n    \"CaloriesBurned\": {{CALORIE_BALANCE_CALORIESBURNED}},\r\n    \"Unit\": \"{{CALORIE_BALANCE_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/{{CALORIE_BALANCE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"{{CALORIE_BALANCE_ID}}"
											]
										},
										"description": "Update the details for an address."
									},
									"response": []
								},
								{
									"name": "Search calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of Calorie Record is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalances');\r",
													"    pm.expect(jsonRes.Data.CalorieBalances.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/search?pageIndex=0&itemsPerPage=25",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "CaloriesBurned",
													"description": "The name of the Parameter to order by",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "personId",
													"value": "",
													"description": "Person ID to filter",
													"disabled": true
												},
												{
													"key": "patientUserId",
													"value": "",
													"description": "Patient User ID to filter",
													"disabled": true
												},
												{
													"key": "minCaloriesConsumedValue",
													"value": "",
													"description": "Min calories consumed",
													"disabled": true
												},
												{
													"key": "maxCaloriesConsumedValue",
													"value": "",
													"description": "Max calories consumed",
													"disabled": true
												},
												{
													"key": "minCaloriesBurnedValue",
													"value": "",
													"description": "Min calories burned",
													"disabled": true
												},
												{
													"key": "maxCaloriesBurnedValue",
													"value": "",
													"description": "Max calories burned",
													"disabled": true
												},
												{
													"key": "minCalorieBalanceValue",
													"value": "",
													"description": "Min calories balance value",
													"disabled": true
												},
												{
													"key": "maxCalorieBalanceValue",
													"value": "",
													"description": "Max calories balance value",
													"disabled": true
												}
											]
										},
										"description": "Search addresses using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var str = '';\r",
													"var search = '';\r",
													"var num = 0.0;\r",
													"\r",
													"var expectedType = pm.environment.get(\"ADDRESS_TYPE\");\r",
													"var expectedAddressLine = pm.environment.get(\"ADDRESS_LINE\");\r",
													"var expectedCity = pm.environment.get(\"ADDRESS_CITY\");\r",
													"var expectedDistrict = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
													"var expectedState = pm.environment.get(\"ADDRESS_STATE\");\r",
													"var expectedCountry = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
													"var expectedPostalCode = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
													"var expectedLongitude = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
													"var expectedLattitude = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
													"\r",
													"str = pm.environment.get(\"ADDRESS_LINE\");\r",
													"search = str.substring(0, 3).toLowerCase();\r",
													"pm.environment.set(\"ADDRESS_LINE_SEARCH_STRING\", search);\r",
													"\r",
													"str = pm.environment.get(\"ADDRESS_CITY\");\r",
													"search = str.substring(0, 3).toLowerCase();\r",
													"pm.environment.set(\"ADDRESS_CITY_SEARCH_STRING\", search);\r",
													"\r",
													"str = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
													"search = str.substring(0, 3).toLowerCase();\r",
													"pm.environment.set(\"ADDRESS_DISTRICT_SEARCH_STRING\", search);\r",
													"\r",
													"str = pm.environment.get(\"ADDRESS_STATE\");\r",
													"search = str.substring(0, 3).toLowerCase();\r",
													"pm.environment.set(\"ADDRESS_STATE_SEARCH_STRING\", search);\r",
													"\r",
													"str = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
													"search = str.substring(0, 3).toLowerCase();\r",
													"pm.environment.set(\"ADDRESS_COUNTRY_SEARCH_STRING\", search);\r",
													"\r",
													"str = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
													"search = str.substring(0, 3).toLowerCase();\r",
													"pm.environment.set(\"ADDRESS_POSTAL_CODE_SEARCH_STRING\", search);\r",
													"\r",
													"num = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
													"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_FROM\", num - 1);\r",
													"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_TO\", num + 1);\r",
													"\r",
													"num = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
													"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_FROM\", num - 1);\r",
													"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_TO\", num + 1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/{{CALORIE_BALANCE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"{{CALORIE_BALANCE_ID}}"
											],
											"query": [
												{
													"key": "addressLine",
													"value": "{{ADDRESS_LINE_SEARCH_STRING}}",
													"description": "Search string to match address line",
													"disabled": true
												},
												{
													"key": "longitudeFrom",
													"value": "{{ADDRESS_LONGITUDE_SEARCH_FROM}}",
													"description": "Format: float value. \nStart of the range for longitude based search",
													"disabled": true
												},
												{
													"key": "longitudeTo",
													"value": "{{ADDRESS_LONGITUDE_SEARCH_TO}}",
													"description": "Format: float value. \nEnd of the range for longitude based search",
													"disabled": true
												},
												{
													"key": "lattitudeFrom",
													"value": "{{ADDRESS_LATTITUDE_SEARCH_FROM}}",
													"description": "Format: float value.\nStart of the range for lattitude based search",
													"disabled": true
												},
												{
													"key": "lattitudeTo",
													"value": "{{ADDRESS_LATTITUDE_SEARCH_TO}}",
													"description": "Format: float value.\nEnd of the range for lattitude based search",
													"disabled": true
												}
											]
										},
										"description": "Search addresses using query parameters."
									},
									"response": []
								}
							]
						},
						{
							"name": "Move minutes",
							"item": [
								{
									"name": "Add move minutes record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"DAILY_MOVE_MINUTES_ID\", jsonRes.Data.MoveMinutes.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New move minutes record is created\", function () {",
													"",
													"    var expectedValue = 50;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('id');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.MoveMinutes.MoveMinutes).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.MoveMinutes.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"MoveMinutes\": 50,\n    \"Unit\": \"mins\",\n    \"RecordDate\": \"2021-09-15\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get move minutes record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Move minutes record is returned\", function () {",
													"",
													"    var expectedValue = 50;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('id');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.MoveMinutes.MoveMinutes).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.MoveMinutes.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/{{DAILY_MOVE_MINUTES_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"{{DAILY_MOVE_MINUTES_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update move minutes record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated move minutes record is returned\", function () {",
													"",
													"    var expectedMoveMinutes = 85;",
													"    var expectedRecordDate = \"2021-09-14T00:00:00.000Z\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.MoveMinutes.MoveMinutes).equals(expectedMoveMinutes);",
													"    pm.expect(jsonRes.Data.MoveMinutes.RecordDate).equals(expectedRecordDate);    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"MoveMinutes\": 85,\n    \"Unit\": \"mins\",\n    \"RecordDate\": \"2021-09-14\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/{{DAILY_MOVE_MINUTES_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"{{DAILY_MOVE_MINUTES_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search move minutes records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of move minutes records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutesRecords');",
													"    pm.expect(jsonRes.Data.MoveMinutesRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/search?createdDateFrom=2021-09-14&createdDateTo=2021-10-15&orderBy=MoveMinutes&order=ascending&pageIndex=0&itemsPerPage=25&minValue=60&maxValue=90&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-09-14"
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-15"
												},
												{
													"key": "orderBy",
													"value": "MoveMinutes"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "60"
												},
												{
													"key": "maxValue",
													"value": "90"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete move minutes record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Move minutes record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/{{DAILY_MOVE_MINUTES_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"{{DAILY_MOVE_MINUTES_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step count",
							"item": [
								{
									"name": "Add step count record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"DAILY_STEP_COUNT_ID\", jsonRes.Data.StepCount.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New step count record is created\", function () {",
													"",
													"    var expectedValue = 1590;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('id');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.StepCount.StepCount).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.StepCount.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"StepCount\": 1590,\n    \"RecordDate\": \"2021-09-15\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get step count record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Step count record is returned\", function () {",
													"",
													"    var expectedValue = 1590;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('id');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.StepCount.StepCount).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.StepCount.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/{{DAILY_STEP_COUNT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"{{DAILY_STEP_COUNT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update step count record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated step count record is returned\", function () {",
													"",
													"    var expectedStepCount = 10000;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.StepCount.StepCount).equals(expectedStepCount);",
													"    var recordDate = jsonRes.Data.StepCount.RecordDate;",
													"    if (recordDate) {",
													"        recordDate = recordDate.split('T')[0];",
													"    } ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"StepCount\": 10000,\n    \"RecordDate\": \"2021-09-14\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/{{DAILY_STEP_COUNT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"{{DAILY_STEP_COUNT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search step count records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of move minutes records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCountRecords');",
													"    pm.expect(jsonRes.Data.StepCountRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/search?createdDateFrom=2021-09-14&createdDateTo=2021-10-15&orderBy=StepCount&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=25000&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-09-14"
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-15"
												},
												{
													"key": "orderBy",
													"value": "StepCount"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "25000"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete step count record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Step count record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/{{DAILY_STEP_COUNT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"{{DAILY_STEP_COUNT_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Sleep",
							"item": [
								{
									"name": "Add Sleep record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"SLEEP_RECORD_ID\", jsonRes.Data.SleepRecord.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Sleep record is created\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedSleepDuration = pm.environment.get(\"SLEEP_DURATION\");",
													"    var expectedUnit = pm.environment.get(\"SLEEP_UNIT\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecord');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('id');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('Unit');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);",
													"    pm.expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"SLEEP_DURATION\", 8);",
													"pm.environment.set(\"SLEEP_UNIT\", 'hrs');",
													"pm.environment.set(\"SLEEP_RECORDDATE\", '2021-09-20');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"SleepDuration\": \"{{SLEEP_DURATION}}\",\n    \"Unit\": \"{{SLEEP_UNIT}}\",\n    \"RecordDate\": \"{{SLEEP_RECORDDATE}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Sleep record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Sleep record is returned\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedSleepDuration = pm.environment.get(\"SLEEP_DURATION\");",
													"    var expectedUnit = pm.environment.get(\"SLEEP_UNIT\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecord');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('id');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('Unit');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);",
													"    pm.expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/{{SLEEP_RECORD_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"{{SLEEP_RECORD_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Sleep record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated sleep record is returned\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedSleepDuration = 10;",
													"    var expectedUnit = pm.environment.get(\"SLEEP_UNIT\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecord');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('id');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('Unit');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);",
													"    pm.expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"SleepDuration\": \"10\",\n    \"Unit\": \"{{SLEEP_UNIT}}\",\n    \"RecordDate\": \"{{SLEEP_RECORDDATE}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/{{SLEEP_RECORD_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"{{SLEEP_RECORD_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Sleep records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of daily sleep records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecords');",
													"    pm.expect(jsonRes.Data.SleepRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/search?createdDateFrom=2021-09-14&createdDateTo=2021-10-15&orderBy=RecordDate&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=15&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-09-14"
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-15"
												},
												{
													"key": "orderBy",
													"value": "RecordDate"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "15"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Sleep record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Sleep record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/{{SLEEP_RECORD_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"{{SLEEP_RECORD_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Clinical",
			"item": [
				{
					"name": "Emergency event",
					"item": [
						{
							"name": "Create patient emergency event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"pm.environment.set(\"EMERGENCY_EHRID\", undefined);\r",
											"pm.environment.set(\"EMERGENCY_PATIENTUSERID\", patientUserId);\r",
											"pm.environment.set(\"EMERGENCY_DETAILS\", 'Allergy reaction and Difficulty breathing');\r",
											"pm.environment.set(\"EMERGENCY_EMERGENCYDATE\", new Date());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"EMERGENCY_EVENT_ID\", jsonRes.Data.EmergencyEvent.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New PATIENT EMERGENCY Event record is created\", function () {\r",
											"\r",
											"    let expectedEhrId = pm.environment.get(\"EMERGENCY_EHRID\");\r",
											"    let expectedPatientUserId = pm.environment.get(\"EMERGENCY_PATIENTUSERID\");\r",
											"    let expectedDetails = pm.environment.get(\"EMERGENCY_DETAILS\");\r",
											"    let expectedEmergencyDate = pm.environment.get(\"EMERGENCY_EMERGENCYDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvent');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.EmergencyDate).equals(expectedEmergencyDate);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"EhrId\":\"{{EMERGENCY_EHRID}}\",\r\n    \"PatientUserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Details\":\"{{EMERGENCY_DETAILS}}\",\r\n    \"EmergencyDate\":\"{{EMERGENCY_EMERGENCYDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events"
									]
								},
								"description": "Add an emergency event."
							},
							"response": []
						},
						{
							"name": "Get patient emergency event by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient Allergy should have correct data\", function () {\r",
											"\r",
											"    let expectedEhrId = pm.environment.get(\"EMERGENCY_EHRID\");\r",
											"    let expectedPatientUserId = pm.environment.get(\"EMERGENCY_PATIENTUSERID\");\r",
											"    let expectedDetails = pm.environment.get(\"EMERGENCY_DETAILS\");\r",
											"    let expectedEmergencyDate = pm.environment.get(\"EMERGENCY_EMERGENCYDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvent');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/{{EMERGENCY_EVENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"{{EMERGENCY_EVENT_ID}}"
									]
								},
								"description": "Get an emergency event by emergency event id."
							},
							"response": []
						},
						{
							"name": "Update an patient emergency event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"EMERGENCY_DETAILS\", 'Insomnia');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedEhrId = pm.environment.get(\"EMERGENCY_EHRID\");\r",
											"    let expectedPatientUserId = pm.environment.get(\"EMERGENCY_PATIENTUSERID\");\r",
											"    let expectedDetails = pm.environment.get(\"EMERGENCY_DETAILS\");\r",
											"    let expectedEmergencyDate = pm.environment.get(\"EMERGENCY_EMERGENCYDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvent');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.EmergencyDate).equals(expectedEmergencyDate);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"EhrId\":\"{{EMERGENCY_EHRID}}\",\r\n    \"PatientUserId\":\"{{EMERGENCY_PATIENTUSERID}}\",\r\n    \"Details\":\"{{EMERGENCY_DETAILS}}\",\r\n    \"EmergencyDate\":\"{{EMERGENCY_EMERGENCYDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/{{EMERGENCY_EVENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"{{EMERGENCY_EVENT_ID}}"
									]
								},
								"description": "Update the details for an emergency event."
							},
							"response": []
						},
						{
							"name": "Search patient emergency event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of Calorie Record is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvents');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvents.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/search?EmergencyDateFrom=2021-05-01&EmergencyDateTo=2021-12-12&orderBy=EmergencyDate&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"search"
									],
									"query": [
										{
											"key": "EmergencyDateFrom",
											"value": "2021-05-01"
										},
										{
											"key": "EmergencyDateTo",
											"value": "2021-12-12"
										},
										{
											"key": "orderBy",
											"value": "EmergencyDate"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "PatientUserId",
											"value": "",
											"disabled": true
										},
										{
											"key": "MedicalPractitionerUserId",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Search emergency event using query parameters."
							},
							"response": []
						},
						{
							"name": "Delete patient emergency event record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/{{EMERGENCY_EVENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"{{EMERGENCY_EVENT_ID}}"
									]
								},
								"description": "Deletes emergency event using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Medication",
					"item": [
						{
							"name": "Drugs",
							"item": [
								{
									"name": "Add drug",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"DRUG_ID\", jsonRes.Data.Drug.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New drug record is created\", function () {",
													"",
													"    var expectedDrugName = \"aciloc\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drug');",
													"    pm.expect(jsonRes.Data.Drug).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('DrugName');",
													"    ",
													"    pm.expect(jsonRes.Data.Drug.DrugName).equals(expectedDrugName);    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"DrugName\": \"aciloc\",\n    \"GenericName\": \"Paracetamol\",\n    \"Ingredients\": \"levocetrizine\",\n    \"Strength\": \"high\",\n    \"OtherCommercialNames\":\"LP\",\n    \"Manufacturer\": \"abc lab\",\n    \"OtherInformation\": \"aaaa\"  \n}\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get drug details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Drug record is returned\", function () {",
													"",
													"    var expectedDrugName = \"aciloc\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drug');",
													"    pm.expect(jsonRes.Data.Drug).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('DrugName');",
													"    ",
													"    pm.expect(jsonRes.Data.Drug.DrugName).equals(expectedDrugName);    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/{{DRUG_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"{{DRUG_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update drug details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated drug record is returned\", function () {",
													"",
													"    var expectedDrugName = \"sinarest\";",
													"    var expectedGenericName = \"crocin\";",
													"    var expectedStrength = \"high\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drug');",
													"    pm.expect(jsonRes.Data.Drug).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('DrugName');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('GenericName');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('Strength');",
													"",
													"    pm.expect(jsonRes.Data.Drug.DrugName).equals(expectedDrugName);",
													"    pm.expect(jsonRes.Data.Drug.GenericName).equals(expectedGenericName);",
													"    pm.expect(jsonRes.Data.Drug.Strength).equals(expectedStrength);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"DrugName\": \"sinarest\",\n    \"GenericName\": \"crocin\",\n    \"Ingredients\": \"parac\",\n    \"Strength\": \"high\",\n    \"OtherCommercialNames\":\"LP\",\n    \"Manufacturer\": \"abc lab\",\n    \"OtherInformation\": \"llll\"  \n}\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/{{DRUG_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"{{DRUG_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search drug details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of drug records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drugs');",
													"    pm.expect(jsonRes.Data.Drugs.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/search?order=ascending&pageIndex=0&itemsPerPage=25",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"search"
											],
											"query": [
												{
													"key": "name",
													"value": "sinarest",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete drug details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Drug record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/{{DRUG_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"{{DRUG_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Medication",
							"item": [
								{
									"name": "Get a list of drugs from database",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"DRUG_ID\", jsonRes.Data.Drugs.Items[0].id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Drugs are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Drugs');\r",
													"    pm.expect(jsonRes.Data.Drugs).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Drugs).to.have.property('TotalCount');\r",
													"    pm.expect(jsonRes.Data.Drugs).to.have.property('Items');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Drugs.TotalCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Drugs.Items.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/search?name=cres",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"search"
											],
											"query": [
												{
													"key": "name",
													"value": "cres"
												}
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of drug-dose-units",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication dosage units are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationDosageUnits');\r",
													"    pm.expect(jsonRes.Data.MedicationDosageUnits).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationDosageUnits.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/dosage-units",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"dosage-units"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of medication-routes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication administration routes are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationAdministrationRoutes');\r",
													"    pm.expect(jsonRes.Data.MedicationAdministrationRoutes).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationAdministrationRoutes.length).greaterThan(0);    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/administration-routes/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"administration-routes",
												""
											]
										},
										"description": "Returns the list of medication routes for administration stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of medication-duration-units",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication duration units are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationDurationUnits');\r",
													"    pm.expect(jsonRes.Data.MedicationDurationUnits).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationDurationUnits.length).greaterThan(0);    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/duration-units",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"duration-units"
											],
											"query": [
												{
													"key": "name",
													"value": "da",
													"disabled": true
												}
											]
										},
										"description": "Returns the list of medication duration units stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of medication-frequency units",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication frequency units are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationFrequencyUnits');\r",
													"    pm.expect(jsonRes.Data.MedicationFrequencyUnits).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationFrequencyUnits.length).greaterThan(0);    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/frequency-units/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"frequency-units",
												""
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get medication stock images",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.MedicationStockImages[5].id;\r",
													"    var resourceId = jsonData.Data.MedicationStockImages[5].ResourceId;\r",
													"    pm.environment.set(\"STOCK_MEDICATION_IMAGE_ID\", id);\r",
													"    pm.environment.set(\"STOCK_MEDICATION_IMAGE_RESOURCE_ID\", resourceId);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication medication stock image list is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationStockImages');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImages).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationStockImages.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/stock-images",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"stock-images"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get medication stock image by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication stock image details are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationStockImage');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('Code');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('FileName');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('ResourceId');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('PublicUrl');\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/stock-images/{{STOCK_MEDICATION_IMAGE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"stock-images",
												"{{STOCK_MEDICATION_IMAGE_ID}}"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Download medication stock image by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/stock-images/{{STOCK_MEDICATION_IMAGE_ID}}/download",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"stock-images",
												"{{STOCK_MEDICATION_IMAGE_ID}}",
												"download"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Add new medication by drug name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Medication.id;\r",
													"    pm.environment.set(\"MEDICATION_ID\", id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"A newly created medication is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugName = \"Tylenol 8 HR Arthritis Pain: 650 mg\";\r",
													"    pm.expect(jsonRes.Data.Medication.DrugName).equals(expectedDrugName);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var start_date = formatDate((new Date()).addDays(1));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_START_DATE\", start_date);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"DrugName\": \"Tylenol 8 HR Arthritis Pain: 650 mg\",\n    \"Dose\": 1,\n    \"DosageUnit\": \"Tablet\",\n    \"TimeSchedules\": [\n        \"Morning\", \n        \"Afternoon\", \n        \"Evening\", \n        \"Night\"\n    ],\n    \"Frequency\": 4,\n    \"FrequencyUnit\": \"Daily\",\n    \"Route\": \"Oral\",\n    \"Duration\": 25,\n    \"DurationUnit\": \"Days\",\n    \"StartDate\": \"2021-04-25\",\n    \"RefillNeeded\": false,\n    \"Instructions\": \"If there is reaction or allergy, please contact immediately.\",\n    \"MedicationImageResourceId\": \"{{STOCK_MEDICATION_IMAGE_RESOURCE_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												""
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Add new medication by drug id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Medication.id;\r",
													"    pm.environment.set(\"MEDICATION_ID\", id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"A newly created medication is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugId = pm.environment.get(\"DRUG_ID\");\r",
													"    pm.expect(jsonRes.Data.Medication.DrugId).equals(expectedDrugId);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var start_date = formatDate((new Date()).addDays(-2));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_START_DATE\", start_date);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"DrugId\": \"{{DRUG_ID}}\",\n    \"Dose\": 1.5,\n    \"DosageUnit\": \"Tablet\",\n    \"TimeSchedules\": [\n        \"Morning\", \n        \"Afternoon\"\n    ],\n    \"FrequencyUnit\": \"Daily\",\n    \"Route\": \"Oral\",\n    \"Duration\": 2,\n    \"DurationUnit\": \"Weeks\",\n    \"StartDate\": \"{{MEDICATION_START_DATE}}\",\n    \"RefillNeeded\": true,\n    \"RefillCount\": 2,\n    \"Instructions\": \"If there is reaction or allergy, please contact immediately.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												""
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Search patient medications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"DRUG_ID\", jsonRes.Data.DrugRecords.Items[3].id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Searched medications are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medications');\r",
													"    pm.expect(jsonRes.Data.Medications).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medications).to.have.property('TotalCount');\r",
													"    pm.expect(jsonRes.Data.Medications).to.have.property('Items');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medications.TotalCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medications.Items.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/search?patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"search"
											],
											"query": [
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get current patient medications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Current medications for the patient are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CurrentMedications');\r",
													"    pm.expect(jsonRes.Data.CurrentMedications).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.CurrentMedications.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/current/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"current",
												"{{PATIENT_USER_ID}}"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get medication by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication with given id is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugId = pm.environment.get(\"DRUG_ID\");\r",
													"    pm.expect(jsonRes.Data.Medication.DrugId).equals(expectedDrugId);    \r",
													"  \r",
													"    var expectedDuration = 2;\r",
													"    pm.expect(jsonRes.Data.Medication.Duration).equals(expectedDuration);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"{{MEDICATION_ID}}"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Update medication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated medication is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugId = pm.environment.get(\"DRUG_ID\");\r",
													"    pm.expect(jsonRes.Data.Medication.DrugId).equals(expectedDrugId);    \r",
													"  \r",
													"    var expectedDuration = 10;\r",
													"    pm.expect(jsonRes.Data.Medication.Duration).equals(expectedDuration);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Duration\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"{{MEDICATION_ID}}"
											]
										},
										"description": "Update the already existing drug order."
									},
									"response": []
								}
							]
						},
						{
							"name": "Medication consumption",
							"item": [
								{
									"name": "Get medication consumption list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var d = new Date();\r",
													"\r",
													"var fromDate = formatDate(d.addDays(2));\r",
													"var toDate = formatDate((new Date()).addDays(7));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_FROM\", fromDate);\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_TO\", toDate);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var medication_consumption_id = jsonData.Data.MedicationConsumptions.Items[0].id;\r",
													"    pm.environment.set(\"MEDICATION_CONSUMPTION_ID\", medication_consumption_id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumptions for patient are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.have.property('TotalCount');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.have.property('Items');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.TotalCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.Items.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/search-for-patient/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"search-for-patient",
												"{{PATIENT_USER_ID}}"
											],
											"query": [
												{
													"key": "drugOrderId",
													"value": "{{DRUG_ORDER_ID}}",
													"disabled": true
												},
												{
													"key": "medicationId",
													"value": "{{MEDICATION_ID}}",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "{{MEDICATION_CONSUMPTION_SCHEDULE_FROM}}",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "{{MEDICATION_CONSUMPTION_SCHEDULE_TO}}",
													"disabled": true
												},
												{
													"key": "fromDate",
													"value": "2021-10-21",
													"disabled": true
												},
												{
													"key": "toDate",
													"value": "2021-06-21",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get medication consumption by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumption');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('MedicationId');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('Details');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('Status');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.MedicationConsumption.Dose).greaterThan(0);    \r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/{{MEDICATION_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"{{MEDICATION_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med schedule for duration in future",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var d = new Date();\r",
													"\r",
													"var fromDate = formatDate(d);\r",
													"var toDate = formatDate((new Date()).addDays(10));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_FROM\", fromDate);\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_TO\", toDate);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption for duration is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).greaterThan(0);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"\r",
													"    pm.expect(firstMed).to.have.property('id');\r",
													"    pm.expect(firstMed).to.have.property('DrugName');\r",
													"    pm.expect(firstMed).to.have.property('Details');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(firstMed).to.have.property('Status');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/schedule-for-duration/{{PATIENT_USER_ID}}?duration=1w&when=past",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"schedule-for-duration",
												"{{PATIENT_USER_ID}}"
											],
											"query": [
												{
													"key": "duration",
													"value": "1w"
												},
												{
													"key": "when",
													"value": "past"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med schedule for duration in past",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var d = new Date();\r",
													"\r",
													"var fromDate = formatDate(d);\r",
													"var toDate = formatDate((new Date()).addDays(10));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_FROM\", fromDate);\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_TO\", toDate);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var consumptions = jsonData.Data.MedicationConsumptions;\r",
													"\r",
													"    var count = 1;\r",
													"    for(var c of consumptions) {\r",
													"        var name = \"MEDICATION_CONSUMPTION_ID_\" + String(count).padStart(2, '0');\r",
													"        pm.environment.set(name, c.id);\r",
													"        if(count > 5) {\r",
													"            break;\r",
													"        }\r",
													"        count++;\r",
													"    }\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption for duration is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).greaterThan(0);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"\r",
													"    pm.expect(firstMed).to.have.property('id');\r",
													"    pm.expect(firstMed).to.have.property('DrugName');\r",
													"    pm.expect(firstMed).to.have.property('Details');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(firstMed).to.have.property('Status');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/schedule-for-duration/{{PATIENT_USER_ID}}?duration=1w&when=past",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"schedule-for-duration",
												"{{PATIENT_USER_ID}}"
											],
											"query": [
												{
													"key": "duration",
													"value": "1w"
												},
												{
													"key": "when",
													"value": "past"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med schedule for day",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var date = formatDate((new Date()).addDays(4));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_FOR_DATE\", date);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedule for day is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationSchedulesForDay');\r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay).to.have.property('Schedules');    \r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay.Schedules.length).greaterThan(0);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationSchedulesForDay.Schedules[0];\r",
													"\r",
													"    pm.expect(firstMed).to.have.property('id');\r",
													"    pm.expect(firstMed).to.have.property('DrugName');\r",
													"    pm.expect(firstMed).to.have.property('Details');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(firstMed).to.have.property('Status');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/schedule-for-day/{{PATIENT_USER_ID}}/{{MEDICATION_CONSUMPTION_FOR_DATE}}?groupByDrug=true&date={{MEDICATION_CONSUMPTION_FOR_DATE}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"schedule-for-day",
												"{{PATIENT_USER_ID}}",
												"{{MEDICATION_CONSUMPTION_FOR_DATE}}"
											],
											"query": [
												{
													"key": "groupByDrug",
													"value": "true"
												},
												{
													"key": "date",
													"value": "{{MEDICATION_CONSUMPTION_FOR_DATE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med consumption summary for calendar months",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var date = formatDate((new Date()).addDays(4));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_FOR_DATE\", date);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption summary for calendar months is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary.length).greaterThan(0);\r",
													"\r",
													"    var monthSummary = jsonRes.Data.MedicationConsumptionSummary[0];\r",
													"\r",
													"    pm.expect(monthSummary).to.have.property('Month');\r",
													"    pm.expect(monthSummary).to.have.property('DaysInMonth');\r",
													"    pm.expect(monthSummary).to.have.property('SummaryForMonth');\r",
													"\r",
													"    var monthSummaryForDrug = monthSummary.SummaryForMonth[0];\r",
													"\r",
													"    pm.expect(monthSummaryForDrug).to.have.property('Drug');\r",
													"    pm.expect(monthSummaryForDrug).to.have.property('SummaryForDrug');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Missed');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Taken');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Unknown');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Upcoming');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Overdue');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/summary-for-calendar-months/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"summary-for-calendar-months",
												"{{PATIENT_USER_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark as taken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedule marked as taken\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumption');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption.Status).eqls('Taken');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-as-taken/{{MEDICATION_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-as-taken",
												"{{MEDICATION_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark list of med consumptions as taken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedules in list are marked as taken\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).equals(2);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"    var secondMed = jsonRes.Data.MedicationConsumptions[1];\r",
													"\r",
													"    pm.expect(firstMed.Status).equals(\"Taken\");\r",
													"    pm.expect(secondMed.Status).equals(\"Taken\");\r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"MedicationConsumptionIds\": [\r\n        \"{{MEDICATION_CONSUMPTION_ID_03}}\",\r\n        \"{{MEDICATION_CONSUMPTION_ID_05}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-list-as-taken",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-list-as-taken"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark as missed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedule marked as missed\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumption');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption.Status).eqls('Missed');\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-as-missed/{{MEDICATION_CONSUMPTION_ID_02}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-as-missed",
												"{{MEDICATION_CONSUMPTION_ID_02}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark list of med consumptions as missed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedules in list are marked as missed\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).equals(2);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"    var secondMed = jsonRes.Data.MedicationConsumptions[1];\r",
													"\r",
													"    pm.expect(firstMed.Status).equals(\"Missed\");\r",
													"    pm.expect(secondMed.Status).equals(\"Missed\");\r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"MedicationConsumptionIds\": [\r\n        \"{{MEDICATION_CONSUMPTION_ID_04}}\",\r\n        \"{{MEDICATION_CONSUMPTION_ID_06}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-list-as-missed",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-list-as-missed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add another medication by drug id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Medication.id;\r",
													"    pm.environment.set(\"MEDICATION_ID\", id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var start_date = formatDate((new Date()).addDays(-2));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_START_DATE\", start_date);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"DrugId\": \"{{DRUG_ID}}\",\n    \"Dose\": 1.5,\n    \"DosageUnit\": \"Tablet\",\n    \"TimeSchedules\": [\n        \"Morning\", \n        \"Afternoon\"\n    ],\n    \"FrequencyUnit\": \"Daily\",\n    \"Route\": \"Oral\",\n    \"Duration\": 2,\n    \"DurationUnit\": \"Weeks\",\n    \"StartDate\": \"{{MEDICATION_START_DATE}}\",\n    \"RefillNeeded\": true,\n    \"RefillCount\": 2,\n    \"Instructions\": \"If there is reaction or allergy, please contact immediately.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												""
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Delete future medication consumptions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Future medication consumption schedules are deleted\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data).to.have.property('DeletedCount');\r",
													"    pm.expect(jsonRes.Data.DeletedCount).greaterThan(0);\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/delete-future-schedules/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"delete-future-schedules",
												"{{MEDICATION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete medication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication is deleted\", function () {\r",
													"\r",
													"    var expectedValue = true;\r",
													"    \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"{{MEDICATION_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Drug prescriptions: Active and past",
							"item": [
								{
									"name": "Get active drug prescriptions for patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/drug-order/active-for-patient/{{PATIENT_ROLE_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"drug-order",
												"active-for-patient",
												"{{PATIENT_ROLE_USER_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get past drug prescriptions for patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/drug-order/past-for-patient/{{PATIENT_ROLE_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"drug-order",
												"past-for-patient",
												"{{PATIENT_ROLE_USER_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Diagnosis",
					"item": [
						{
							"name": "Add diagnosis details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"DIAGNOSIS_ID\", jsonRes.Data.Diagnosis.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New diagnosis record is created\", function () {\r",
											"\r",
											"    var expectedValue = false;\r",
											"    var expectedDiagnosisId = pm.environment.get(\"DIAGNOSIS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('IsClinicallyActive');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('Interpretation');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Diagnosis.IsClinicallyActive).equals(expectedValue);\r",
											"    pm.expect(jsonRes.Data.Diagnosis.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"MedicalPractitionerUserId\": \"0652a79e-c549-478d-bc99-42187dd91d30\",\r\n    \"MedicalConditionId\": \"06fbc6fd-b819-416e-8dc9-e20bb59c11c9\",\r\n    \"Comments\": \"better than earlier\",\r\n    \"IsClinicallyActive\": false,\r\n    \"ValidationStatus\": \"Confirmed\",\r\n    \"Interpretation\": \"Significant change up\",\r\n    \"OnsetDate\": \"2021-09-15\",\r\n    \"EndDate\": \"2021-09-25\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get diagnosis by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Diagnosis record is returned\", function () {\r",
											"\r",
											"    var expectedValue = false;\r",
											"    var expectedDiagnosisId = pm.environment.get(\"DIAGNOSIS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('IsClinicallyActive');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('Interpretation');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Diagnosis.IsClinicallyActive).equals(expectedValue);\r",
											"    pm.expect(jsonRes.Data.Diagnosis.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/{{DIAGNOSIS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"{{DIAGNOSIS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update diagnosis record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated Diagnosis record is returned\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    var expectedDiagnosisId = pm.environment.get(\"DIAGNOSIS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('IsClinicallyActive');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('Interpretation');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Diagnosis.IsClinicallyActive).equals(expectedValue);\r",
											"    pm.expect(jsonRes.Data.Diagnosis.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"MedicalPractitionerUserId\": \"0652a79e-c549-478d-bc99-42187dd91d30\",\r\n    \"MedicalConditionId\": \"06fbc6fd-b819-416e-8dc9-e20bb59c11c9\",\r\n    \"Comments\": \"Condition becomes worse day by day\",\r\n    \"IsClinicallyActive\": true,\r\n    \"ValidationStatus\": \"Negated\",\r\n    \"Interpretation\": \"Critically abnormal\",\r\n    \"OnsetDate\": \"2021-09-05\",\r\n    \"EndDate\": \"2021-09-12\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/{{DIAGNOSIS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"{{DIAGNOSIS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search diagnosis records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of diagnosis records is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/search?onSetDateFrom=2021-09-14&onSetDateTo=2021-10-15&orderBy=IsClinicallyActive&order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"search"
									],
									"query": [
										{
											"key": "onSetDateFrom",
											"value": "2021-09-14"
										},
										{
											"key": "onSetDateTo",
											"value": "2021-10-15"
										},
										{
											"key": "orderBy",
											"value": "IsClinicallyActive"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete diagnosis records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Diagnosis record is deleted\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/{{DIAGNOSIS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"{{DIAGNOSIS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "Add order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"ORDER_ID\", jsonRes.Data.Order.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New order record is created\", function () {",
											"",
											"    var expectedType = \"Drug order\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedCurrentState = \"Raised query\";",
											"",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Order');",
											"    pm.expect(jsonRes.Data.Order).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Order).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('Type');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('MedicalPractitionerUserId');",
											"",
											"    ",
											"    pm.expect(jsonRes.Data.Order.Type).equals(expectedType);",
											"    pm.expect(jsonRes.Data.Order.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Order.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.Order.CurrentState).equals(expectedCurrentState);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Type\": \"DrugOrder\",\n    \"DisplayId\": \"1234\",\n    \"MedicalPractitionerUserId\": \"{{DOCTOR_USER_ID}}\",\n    \"CurrentState\": \"RaisedQuery\",\n    \"OrderDate\": \"2021-09-23\",\n    \"AdditionalInformation\": \"Nothing\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"order record is returned\", function () {",
											"",
											"    var expectedType = \"Drug order\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedCurrentState = \"Raised query\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Order');",
											"    pm.expect(jsonRes.Data.Order).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Order).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('Type');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('MedicalPractitionerUserId');",
											"",
											"    ",
											"    pm.expect(jsonRes.Data.Order.Type).equals(expectedType);",
											"    pm.expect(jsonRes.Data.Order.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Order.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.Order.CurrentState).equals(expectedCurrentState);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/{{ORDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"{{ORDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated order record is returned\", function () {",
											"",
											"    var expectedType = \"Drug order\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedCurrentState = \"Initiated\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Order');",
											"    pm.expect(jsonRes.Data.Order).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Order).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('Type');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('MedicalPractitionerUserId');",
											" ",
											"    pm.expect(jsonRes.Data.Order.Type).equals(expectedType);",
											"    pm.expect(jsonRes.Data.Order.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Order.CurrentState).equals(expectedCurrentState);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"CurrentState\": \"Initiated\",\n    \"OrderDate\": \"2021-09-23\",\n    \"AdditionalInformation\": \"Some additional information\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/{{ORDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"{{ORDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search order records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of order records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('OrderRecords');",
											"    pm.expect(jsonRes.Data.OrderRecords.Items.length).to.be.greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/search?type=DrugOrder&orderDateFrom=2021-09-22&orderDateFrom=2021-10-23&orderBy=Type&order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"search"
									],
									"query": [
										{
											"key": "type",
											"value": "DrugOrder"
										},
										{
											"key": "orderDateFrom",
											"value": "2021-09-22"
										},
										{
											"key": "orderDateFrom",
											"value": "2021-10-23"
										},
										{
											"key": "orderBy",
											"value": "Type"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "currentState",
											"value": "RaisedQuery",
											"disabled": true
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Order record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/{{ORDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"{{ORDER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dooctor Note",
					"item": [
						{
							"name": "Add doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"DOCTOR_NOTE_ID\", jsonRes.Data.DoctorNote.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"A New doctor note record is created\", function () {\r",
											"\r",
											"    var expectedValidationStatus = \"Confirmed\";\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNote');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('Notes');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('RecordDate');\r",
											"    \r",
											"\r",
											"    pm.expect(jsonRes.Data.DoctorNote.ValidationStatus).equals(expectedValidationStatus);\r",
											"    pm.expect(jsonRes.Data.DoctorNote.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"pm.environment.set(\"DOCTOR_NOTE_VISIT_ID\", userId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"VisitId\": \"{{DOCTOR_NOTE_VISIT_ID}}\",\r\n    \"ValidationStatus\": \"Confirmed\",\r\n    \"Notes\": \"Prescribing two days bed rest and more liquid no fried food\",\r\n    \"RecordDate\": \"2021-09-22\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get doctor note by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor note record is returned\", function () {\r",
											"\r",
											"    var expectedValidationStatus = \"Confirmed\";\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNote');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('Notes');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('RecordDate');\r",
											"    \r",
											"\r",
											"    pm.expect(jsonRes.Data.DoctorNote.ValidationStatus).equals(expectedValidationStatus);\r",
											"    pm.expect(jsonRes.Data.DoctorNote.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/{{DOCTOR_NOTE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"{{DOCTOR_NOTE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated doctor note record is returned\", function () {\r",
											"\r",
											"    var expectedValidationStatus = \"Preliminary\";\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNote');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('Notes');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('RecordDate');\r",
											"    \r",
											"\r",
											"    pm.expect(jsonRes.Data.DoctorNote.ValidationStatus).equals(expectedValidationStatus);\r",
											"    pm.expect(jsonRes.Data.DoctorNote.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"VisitId\": \"{{DOCTOR_NOTE_VISIT_ID}}\",\r\n    \"ValidationStatus\": \"Preliminary\",\r\n    \"Notes\": \"Prescribing rest at home and light food\",\r\n    \"RecordDate\": \"2021-09-16\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/{{DOCTOR_NOTE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"{{DOCTOR_NOTE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of doctor note is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNotes');\r",
											"    pm.expect(jsonRes.Data.DoctorNotes.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/search/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"search",
										"{{PATIENT_USER_ID}}"
									],
									"query": [
										{
											"key": "recordDateFrom",
											"value": "2021-09-01",
											"disabled": true
										},
										{
											"key": "recordDateTo",
											"value": "2021-10-14",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "RecordDate",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor note record is deleted\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    var jsonRes = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/{{DOCTOR_NOTE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"{{DOCTOR_NOTE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Symptom",
					"item": [
						{
							"name": "Symptom types",
							"item": [
								{
									"name": "Add new symptom again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    var id = jsonRes.Data.SymptomType.id;\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_ID\", id);\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_HEADACHE_ID\", id);\r",
													"    console.log(id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New symptom type is created\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('ImageResourceId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Symptom).equals(\"Headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Severe to moderate headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{DOCTOR_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Symptom\": \"Headache\",\n    \"Description\": \"Severe to moderate headache\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Migrain\"\n    ],\n    \"Language\": \"en-US\",\n    \"ImageResourceId\": \"92313a9e-0eb0-46fa-ac24-c137f28c33d4\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types"
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Symptom types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom type by id is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('ImageResourceId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Symptom).equals(\"Headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Severe to moderate headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/{{SYMPTOM_TYPE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"{{SYMPTOM_TYPE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a list of symptoms from database",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    var symptomTypes = jsonRes.Data.SymptomTypes.Items;\r",
													"    \r",
													"    if (symptomTypes.length > 0) {\r",
													"        var symptomTypeIds = symptomTypes.map((x) => { return x.id; });\r",
													"        console.log(symptomTypeIds);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_1\", symptomTypeIds[0]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_2\", symptomTypeIds[1]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_3\", symptomTypeIds[2]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_4\", symptomTypeIds[3]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_5\", symptomTypeIds[4]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_6\", symptomTypeIds[5]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_7\", symptomTypeIds[6]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_8\", symptomTypeIds[7]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_9\", symptomTypeIds[8]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_10\", symptomTypeIds[9]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_11\", symptomTypeIds[10]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_12\", symptomTypeIds[11]);\r",
													"        \r",
													"        var count = symptomTypes.length;\r",
													"        var lastSymptomType = symptomTypes[count -1];\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_A\", lastSymptomType.id);\r",
													"    }\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of symptom types is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomTypes');\r",
													"    pm.expect(jsonRes.Data.SymptomTypes).to.have.property('RetrievedCount');\r",
													"    pm.expect(jsonRes.Data.SymptomTypes).to.have.property('Items');\r",
													"    pm.expect(jsonRes.Data.SymptomTypes.Items.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{DOCTOR_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/search?tag=Heart failure",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"search"
											],
											"query": [
												{
													"key": "tag",
													"value": "Heart failure"
												}
											]
										},
										"description": "Returns the list of ailments stored in the system."
									},
									"response": []
								},
								{
									"name": "Update symptom type record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom type is updated\", function () {\r",
													"\r",
													"    var previousTagsCount = 2;\r",
													"    var jsonRes = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Migrains or severe headache occasinally with mild dizziness\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(previousTagsCount);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Tags\": [\n        \"Blurry vision\",\n        \"Diabetes\",\n        \"Cataract\"\n    ],\n    \"Description\": \"Migrains or severe headache occasinally with mild dizziness\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/{{SYMPTOM_TYPE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"{{SYMPTOM_TYPE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete symptom type record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom type is deleted\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/{{SYMPTOM_TYPE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"{{SYMPTOM_TYPE_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								},
								{
									"name": "Add new symptom again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    var id = jsonRes.Data.SymptomType.id;\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_ID\", id);\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_HEADACHE_ID\", id);\r",
													"    console.log(id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New body height biometrice is created\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('ImageResourceId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Symptom).equals(\"Headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Severe to moderate headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{DOCTOR_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Symptom\": \"Headache\",\n    \"Description\": \"Severe to moderate headache\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Migrain\"\n    ],\n    \"Language\": \"en-US\",\n    \"ImageResourceId\": \"92313a9e-0eb0-46fa-ac24-c137f28c33d4\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types"
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								}
							]
						},
						{
							"name": "Assessment template",
							"item": [
								{
									"name": "Symptoms for stroke",
									"item": [
										{
											"name": "Add symptom type - facial dropping",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Facial dropping\",\n    \"Description\": \"Face distortion and numbness\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - difficulty with speech",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_DIFFICULLTY_WITH_SPEECH_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Difficulty with speech\",\n    \"Description\": \"Difficulty while talking, lack of clarity in speech\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - Rapidly developing dizziness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_DIZZINESS_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Rapidly developing dizziness\",\n    \"Description\": \"Dizziness which is progressively getting worse.\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - Confusion",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_CONFUSION_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Confusion\",\n    \"Description\": \"Confusion and lack of cohenrence in actions.\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - weakness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_WEAKNESS_IN_ARMS_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Weakness in arms\",\n    \"Description\": \"Weakness in arms/limbs\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										}
									]
								},
								{
									"name": "Create template - Stroke Assessment Template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessmentTemplate.id;\r",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New assessment template is created\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Title).equals(\"Stroke\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Description).equals(\"This is an assessment to identify the onset of stroke.\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Title\": \"Stroke\",\n    \"Description\": \"This is an assessment to identify the onset of stroke.\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Paralysis\"\n    ]\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search by template title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of assessment templates are returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplates');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplates.Items.length).greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/search",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"search"
											],
											"query": [
												{
													"key": "title",
													"value": "Heart",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add symptoms to template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom types are added to the template\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"SymptomTypeIds\": [\r\n        \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\r\n        \"{{SYMPTOM_TYPE_HEADACHE_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIFFICULLTY_WITH_SPEECH_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIZZINESS_ID}}\",\r\n        \"{{SYMPTOM_TYPE_CONFUSION_ID}}\",\r\n        \"{{SYMPTOM_TYPE_ID_12}}\",\r\n        \"{{SYMPTOM_TYPE_WEAKNESS_IN_ARMS_ID}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/add-symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}",
												"add-symptom-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get assessment template  by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment template is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove symptoms from template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom types are removed from the template\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    var previousSymptomTypesCount = 7;\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).lessThan(previousSymptomTypesCount);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"SymptomTypeIds\": [\r\n        \"{{SYMPTOM_TYPE_ID_12}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/remove-symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}",
												"remove-symptom-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get after removing symptom type",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment template is updated\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Description).equals(\"This is updated description of the template.\");\r",
													"    var previousTagCount = 2;\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).greaterThan(previousTagCount);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"This is updated description of the template.\",\n    \"Tags\": [\n        \"One more tag\"\n    ]\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment template is deleted\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								},
								{
									"name": "Create template again",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessmentTemplate.id;\r",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Title\": \"Stroke\",\n    \"Description\": \"This is an assessment to identify the onset of stroke.\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Paralysis\"\n    ]\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add symptom types to template - Again!",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"SymptomTypeIds\": [\r\n        \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\r\n        \"{{SYMPTOM_TYPE_HEADACHE_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIFFICULLTY_WITH_SPEECH_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIZZINESS_ID}}\",\r\n        \"{{SYMPTOM_TYPE_CONFUSION_ID}}\",\r\n        \"{{SYMPTOM_TYPE_ID_12}}\",\r\n        \"{{SYMPTOM_TYPE_WEAKNESS_IN_ARMS_ID}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/add-symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}",
												"add-symptom-types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assessment",
							"item": [
								{
									"name": "Add new assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessment.id;\r",
													"    pm.environment.set(\"SYMPTOM_ASSESSMENT_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New assessment is created\", function () {\r",
													"\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessment');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('OverallStatus');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentDate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('SymptomsRecorded');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.Title).equals(\"AHA Cardiac Rehab Assessment\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"\r",
													"    var assessmentDate = (jsonRes.Data.SymptomAssessment.AssessmentDate).split('T')[0];\r",
													"    pm.expect(assessmentDate).equals(\"2021-09-30\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"Title\": \"AHA Cardiac Rehab Assessment\",\n    \"AssessmentDate\": \"2021-09-30\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get assessment by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom assessment is returned\", function () {\r",
													"\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessment');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('OverallStatus');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentDate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('SymptomsRecorded');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.Title).equals(\"AHA Cardiac Rehab Assessment\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"\r",
													"    var assessmentDate = (jsonRes.Data.SymptomAssessment.AssessmentDate).split('T')[0];\r",
													"    pm.expect(assessmentDate).equals(\"2021-09-30\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments/{{SYMPTOM_ASSESSMENT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments",
												"{{SYMPTOM_ASSESSMENT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of assessments are returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessments');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessments.Items.length).greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments/search?templateId={{ASSESSMENT_TEMPLATE_ID}}&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments",
												"search"
											],
											"query": [
												{
													"key": "templateId",
													"value": "{{ASSESSMENT_TEMPLATE_ID}}"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete symptom based assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment is deleted\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments/{{SYMPTOM_ASSESSMENT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments",
												"{{SYMPTOM_ASSESSMENT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add assessment again",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessment.id;\r",
													"    pm.environment.set(\"SYMPTOM_ASSESSMENT_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"Title\": \"AHA Cardiac Rehab Assessment\",\n    \"AssessmentDate\": \"2021-09-30\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Record/Update symptoms in an assessment",
							"item": [
								{
									"name": "Add patient symptom in the assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Symptom.id;\r",
													"    pm.environment.set(\"PATIENT_SYMPTOM_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New symptom is created\", function () {\r",
													"\r",
													"    var assessmentId = pm.environment.get(\"SYMPTOM_ASSESSMENT_ID\");\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"    var symptomTypeId = pm.environment.get(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\");\r",
													"    var symptomName = \"Facial dropping\";\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Severity');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('ValidationStatus');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Interpretation');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('RecordDate');\r",
													"\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentId).equals(assessmentId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Symptom).equals(symptomName);\r",
													"    pm.expect(jsonRes.Data.Symptom.SymptomTypeId).equals(symptomTypeId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentId\": \"{{SYMPTOM_ASSESSMENT_ID}}\",\n\t\"SymptomTypeId\": \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\n    \"IsPresent\": true,\n    \"Severity\": 1,\n\t\"Status\": 1,\n\t\"Interpretation\": 1,\n\t\"Comments\": \"The chronic hypertension for the patient with critically high levels.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom is returned\", function () {\r",
													"\r",
													"    var assessmentId = pm.environment.get(\"SYMPTOM_ASSESSMENT_ID\");\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"    var symptomTypeId = pm.environment.get(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\");\r",
													"    var symptomName = \"Facial dropping\";\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Severity');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('ValidationStatus');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Interpretation');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('RecordDate');\r",
													"\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentId).equals(assessmentId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Symptom).equals(symptomName);\r",
													"    pm.expect(jsonRes.Data.Symptom.SymptomTypeId).equals(symptomTypeId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/{{PATIENT_SYMPTOM_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"{{PATIENT_SYMPTOM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom is updated\", function () {\r",
													"\r",
													"    var assessmentId = pm.environment.get(\"SYMPTOM_ASSESSMENT_ID\");\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"    var symptomTypeId = pm.environment.get(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\");\r",
													"    var symptomName = \"Facial dropping\";\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Severity');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('ValidationStatus');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Interpretation');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('RecordDate');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Comments');\r",
													"\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentId).equals(assessmentId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Symptom).equals(symptomName);\r",
													"    pm.expect(jsonRes.Data.Symptom.SymptomTypeId).equals(symptomTypeId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Comments).equals(\"The chronic hypertension\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Comments\": \"The chronic hypertension\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/{{PATIENT_SYMPTOM_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"{{PATIENT_SYMPTOM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search symptoms",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of assessments are returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptoms');\r",
													"    pm.expect(jsonRes.Data.Symptoms.Items.length).greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/search?patientUserId={{PATIENT_USER_ID}}&fromDate=2021-05-30&toDate=2022-09-30",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"search"
											],
											"query": [
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												},
												{
													"key": "symptomTypeId",
													"value": "{{SYMPTOM_TYPE_ID}}",
													"disabled": true
												},
												{
													"key": "fromDate",
													"value": "2021-05-30"
												},
												{
													"key": "toDate",
													"value": "2022-09-30"
												},
												{
													"key": "assessmentId",
													"value": "{{ASSESSMENT_ID}}",
													"disabled": true
												},
												{
													"key": "visitId",
													"value": "{{DOCTOR_VISIT_ID}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom is deleted\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/{{PATIENT_SYMPTOM_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"{{PATIENT_SYMPTOM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add patient symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Symptom.id;\r",
													"    pm.environment.set(\"PATIENT_SYMPTOM_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentId\": \"{{SYMPTOM_ASSESSMENT_ID}}\",\n\t\"SymptomTypeId\": \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\n    \"IsPresent\": true,\n    \"Severity\": 1,\n\t\"Status\": 1,\n\t\"Interpretation\": 1,\n\t\"Comments\": \"The chronic hypertension for the patient with critically high levels.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "How do you feel",
							"item": [
								{
									"name": "Add how do you feel details",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Feeling\": 1,\n    \"RecordDate\": \"2021-06-20\",\n    \"Comments\": \"abcd66\",\n    \"SymptomAssessmentId\": null\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do.you-feel",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do.you-feel"
											]
										}
									},
									"response": []
								},
								{
									"name": "How do you feel details by id",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do.you-feel/{{HOW_DO_YOU_FEEL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do.you-feel",
												"{{HOW_DO_YOU_FEEL_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search how do you feel details by patient user id",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do.you-feel/{{PATIENT_USER_ID}}/search?startDate=2021-06-15&endDate=2021-06-21",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do.you-feel",
												"{{PATIENT_USER_ID}}",
												"search"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2021-06-15"
												},
												{
													"key": "endDate",
													"value": "2021-06-21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update how do yo feel details",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Feeling\": 1,\n    \"RecordDate\": \"2021-06-21\",\n    \"Comments\": \"abcd22\",\n    \"SymptomAssessmentId\": null\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do.you-feel/{{HOW_DO_YOU_FEEL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do.you-feel",
												"{{HOW_DO_YOU_FEEL_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete how do you feel details",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do.you-feel/{{HOW_DO_YOU_FEEL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do.you-feel",
												"{{HOW_DO_YOU_FEEL_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Patient Complaint",
					"item": [
						{
							"name": "Create complaint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"let doctorUserId = pm.environment.get('DOCTOR_USER_ID');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_PATIENTUSERID\", patientUserId);\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\", doctorUserId);\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_VISITID\", patientUserId);\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_EHRID\", '');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_COMPLAINT\", 'Bad Service');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_SEVERITY\", 'Medium');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_RECORDDATE\", new Date());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_COMPLAINT_ID\", jsonRes.Data.Complaint.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New Patient Complaint record is created\", function () {\r",
											"\r",
											"    let expectedPatientUserID = pm.environment.get(\"PATIENT_COMPLAINT_PATIENTUSERID\");\r",
											"    let expectedMedicalPractitionerUserID = pm.environment.get(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\");\r",
											"    let expectedVisitID = pm.environment.get(\"PATIENT_COMPLAINT_VISITID\");\r",
											"    let expectedEHRID = pm.environment.get(\"PATIENT_COMPLAINT_EHRID\");\r",
											"    let expectedComplaint = pm.environment.get(\"PATIENT_COMPLAINT_COMPLAINT\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_COMPLAINT_SEVERITY\");\r",
											"    let expectedRecordDate = pm.environment.get(\"PATIENT_COMPLAINT_RECORDDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('MedicalPractitionerUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('RecordDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Complaint.PatientUserId).equals(expectedPatientUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.VisitId).equals(expectedVisitID);\r",
											"    pm.expect(jsonRes.Data.Complaint.EhrId).equals(expectedEHRID);\r",
											"    pm.expect(jsonRes.Data.Complaint.Complaint).equals(expectedComplaint);\r",
											"    pm.expect(jsonRes.Data.Complaint.Severity).equals(expectedSeverity);\r",
											"    pm.expect(jsonRes.Data.Complaint.RecordDate).equals(expectedRecordDate);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_COMPLAINT_PATIENTUSERID}}\",\r\n    \"MedicalPractitionerUserId\": \"{{PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID}}\",\r\n    \"VisitId\": \"{{PATIENT_COMPLAINT_VISITID}}\",\r\n    \"EhrId\": \"{{PATIENT_COMPLAINT_EHRID}}\",\r\n    \"Complaint\": \"{{PATIENT_COMPLAINT_COMPLAINT}}\",\r\n    \"Severity\": \"{{PATIENT_COMPLAINT_SEVERITY}}\",\r\n    \"RecordDate\": \"{{PATIENT_COMPLAINT_RECORDDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints"
									]
								},
								"description": "Add A Patient Complaint."
							},
							"response": []
						},
						{
							"name": "Get patient complaint by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_COMPLAINT_ID\", jsonRes.Data.Complaint.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient Complaint record should have correct values\", function () {\r",
											"\r",
											"    let expectedPatientUserID = pm.environment.get(\"PATIENT_COMPLAINT_PATIENTUSERID\");\r",
											"    let expectedMedicalPractitionerUserID = pm.environment.get(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\");\r",
											"    let expectedVisitID = pm.environment.get(\"PATIENT_COMPLAINT_VISITID\");\r",
											"    let expectedEHRID = pm.environment.get(\"PATIENT_COMPLAINT_EHRID\");\r",
											"    let expectedComplaint = pm.environment.get(\"PATIENT_COMPLAINT_COMPLAINT\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_COMPLAINT_SEVERITY\");\r",
											"    let expectedRecordDate = pm.environment.get(\"PATIENT_COMPLAINT_RECORDDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('MedicalPractitionerUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('RecordDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Complaint.PatientUserId).equals(expectedPatientUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.VisitId).equals(expectedVisitID);\r",
											"    pm.expect(jsonRes.Data.Complaint.EhrId).equals(expectedEHRID);\r",
											"    pm.expect(jsonRes.Data.Complaint.Complaint).equals(expectedComplaint);\r",
											"    pm.expect(jsonRes.Data.Complaint.Severity).equals(expectedSeverity);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/{{PATIENT_COMPLAINT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"{{PATIENT_COMPLAINT_ID}}"
									]
								},
								"description": "Get Patient Complaint by Patient Complaint id."
							},
							"response": []
						},
						{
							"name": "Update an Patient complaint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_COMPLAINT_SEVERITY\", 'Low');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedPatientUserID = pm.environment.get(\"PATIENT_COMPLAINT_PATIENTUSERID\");\r",
											"    let expectedMedicalPractitionerUserID = pm.environment.get(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\");\r",
											"    let expectedVisitID = pm.environment.get(\"PATIENT_COMPLAINT_VISITID\");\r",
											"    let expectedEHRID = pm.environment.get(\"PATIENT_COMPLAINT_EHRID\");\r",
											"    let expectedComplaint = pm.environment.get(\"PATIENT_COMPLAINT_COMPLAINT\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_COMPLAINT_SEVERITY\");\r",
											"    let expectedRecordDate = pm.environment.get(\"PATIENT_COMPLAINT_RECORDDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('MedicalPractitionerUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('RecordDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Complaint.PatientUserId).equals(expectedPatientUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.VisitId).equals(expectedVisitID);\r",
											"    pm.expect(jsonRes.Data.Complaint.EhrId).equals(expectedEHRID);\r",
											"    pm.expect(jsonRes.Data.Complaint.Complaint).equals(expectedComplaint);\r",
											"    pm.expect(jsonRes.Data.Complaint.Severity).equals(expectedSeverity);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_COMPLAINT_PATIENTUSERID}}\",\r\n    \"MedicalPractitionerUserId\": \"{{PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID}}\",\r\n    \"VisitId\": \"{{PATIENT_COMPLAINT_VISITID}}\",\r\n    \"EhrId\": \"{{PATIENT_COMPLAINT_EHRID}}\",\r\n    \"Complaint\": \"{{PATIENT_COMPLAINT_COMPLAINT}}\",\r\n    \"Severity\": \"{{PATIENT_COMPLAINT_SEVERITY}}\",\r\n    \"RecordDate\": \"{{PATIENT_COMPLAINT_RECORDDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/{{PATIENT_COMPLAINT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"{{PATIENT_COMPLAINT_ID}}"
									]
								},
								"description": "Update the details for a Patient Complaint."
							},
							"response": []
						},
						{
							"name": "Search Patient complaint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of Calorie Record is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaints');\r",
											"    pm.expect(jsonRes.Data.Complaints.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/search/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"search",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Search Patient Complaint using patient user id"
							},
							"response": []
						},
						{
							"name": "Delete Patient complaint record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/{{PATIENT_COMPLAINT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"{{PATIENT_COMPLAINT_ID}}"
									]
								},
								"description": "Deletes Patient Complaint using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Allergy",
					"item": [
						{
							"name": "Create patient allergy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_PATIENTUSERID\", patientUserId);\r",
											"pm.environment.set(\"PATIENT_ALLERGY_Allergy\", 'Peanut');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_AllergenCategory\", 'Food');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_AllergenExposureRoute\", 'Food');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_Severity\", 'Medium');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_Reaction\", 'Difficulty Breathing');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_OtherInformation\", 'Na');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_LastOccurrence\", '2021-01-01');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_ALLERGY_ID\", jsonRes.Data.Allergy.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New allergy record is created\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_ALLERGY_PATIENTUSERID\");\r",
											"    let expectedAllergy = pm.environment.get(\"PATIENT_ALLERGY_Allergy\");\r",
											"    let expectedAllergenCategory = pm.environment.get(\"PATIENT_ALLERGY_AllergenCategory\");\r",
											"    let expectedAllergenExposureRoute = pm.environment.get(\"PATIENT_ALLERGY_AllergenExposureRoute\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_ALLERGY_Severity\");\r",
											"    let expectedReaction = pm.environment.get(\"PATIENT_ALLERGY_Reaction\");\r",
											"    let expectedOtherInformation = pm.environment.get(\"PATIENT_ALLERGY_OtherInformation\");\r",
											"    let expectedLastOccurrence = pm.environment.get(\"PATIENT_ALLERGY_LastOccurrence\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenCategory');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenExposureRoute');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Reaction');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('OtherInformation');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('LastOccurrence');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Allergy.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.Allergy.Allergy).equals(expectedAllergy);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenCategory).equals(expectedAllergenCategory);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenExposureRoute).equals(expectedAllergenExposureRoute);\r",
											"    pm.expect(jsonRes.Data.Allergy.Severity).equals(expectedSeverity);\r",
											"    pm.expect(jsonRes.Data.Allergy.Reaction).equals(expectedReaction);\r",
											"    pm.expect(jsonRes.Data.Allergy.OtherInformation).equals(expectedOtherInformation);\r",
											"\r",
											"    var lastOccurrence = jsonRes.Data.Allergy.LastOccurrence.split('T')[0];\r",
											"    pm.expect(lastOccurrence).equals(expectedLastOccurrence);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_ALLERGY_PATIENTUSERID}}\",\r\n    \"Allergy\": \"{{PATIENT_ALLERGY_Allergy}}\",\r\n    \"AllergenCategory\": \"{{PATIENT_ALLERGY_AllergenCategory}}\",\r\n    \"AllergenExposureRoute\": \"{{PATIENT_ALLERGY_AllergenExposureRoute}}\",\r\n    \"Severity\": \"{{PATIENT_ALLERGY_Severity}}\",\r\n    \"Reaction\": \"{{PATIENT_ALLERGY_Reaction}}\",\r\n    \"OtherInformation\": \"{{PATIENT_ALLERGY_OtherInformation}}\",\r\n    \"LastOccurrence\": \"{{PATIENT_ALLERGY_LastOccurrence}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies"
									]
								},
								"description": "Add A PatientAllergy."
							},
							"response": []
						},
						{
							"name": "Get patient allergy by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient Allergy should have correct data\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_ALLERGY_PATIENTUSERID\");\r",
											"    let expectedAllergy = pm.environment.get(\"PATIENT_ALLERGY_Allergy\");\r",
											"    let expectedAllergenCategory = pm.environment.get(\"PATIENT_ALLERGY_AllergenCategory\");\r",
											"    let expectedAllergenExposureRoute = pm.environment.get(\"PATIENT_ALLERGY_AllergenExposureRoute\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_ALLERGY_Severity\");\r",
											"    let expectedReaction = pm.environment.get(\"PATIENT_ALLERGY_Reaction\");\r",
											"    let expectedOtherInformation = pm.environment.get(\"PATIENT_ALLERGY_OtherInformation\");\r",
											"    let expectedLastOccurrence = pm.environment.get(\"PATIENT_ALLERGY_LastOccurrence\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenCategory');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenExposureRoute');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Reaction');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('OtherInformation');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('LastOccurrence');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Allergy.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.Allergy.Allergy).equals(expectedAllergy);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenCategory).equals(expectedAllergenCategory);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenExposureRoute).equals(expectedAllergenExposureRoute);\r",
											"    pm.expect(jsonRes.Data.Allergy.Severity).equals(expectedSeverity);\r",
											"    pm.expect(jsonRes.Data.Allergy.Reaction).equals(expectedReaction);\r",
											"    pm.expect(jsonRes.Data.Allergy.OtherInformation).equals(expectedOtherInformation);\r",
											"\r",
											"    var lastOccurrence = jsonRes.Data.Allergy.LastOccurrence.split('T')[0];\r",
											"    pm.expect(lastOccurrence).equals(expectedLastOccurrence);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/{{PATIENT_ALLERGY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"{{PATIENT_ALLERGY_ID}}"
									]
								},
								"description": "Get an PatientAllergy by PatientAllergy id."
							},
							"response": []
						},
						{
							"name": "Update an patient allergy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_ALLERGY_Severity\", 'Low');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_ALLERGY_PATIENTUSERID\");\r",
											"    let expectedAllergenCategory = pm.environment.get(\"PATIENT_ALLERGY_AllergenCategory\");\r",
											"    let expectedAllergenExposureRoute = pm.environment.get(\"PATIENT_ALLERGY_AllergenExposureRoute\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_ALLERGY_Severity\");\r",
											"    let expectedReaction = pm.environment.get(\"PATIENT_ALLERGY_Reaction\");\r",
											"    let expectedOtherInformation = pm.environment.get(\"PATIENT_ALLERGY_OtherInformation\");\r",
											"    let expectedLastOccurrence = pm.environment.get(\"PATIENT_ALLERGY_LastOccurrence\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenCategory');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenExposureRoute');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Reaction');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('OtherInformation');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('LastOccurrence');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Allergy.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.Allergy.Allergy).equals(\"Nut allergy\");\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenCategory).equals(expectedAllergenCategory);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenExposureRoute).equals(expectedAllergenExposureRoute);\r",
											"    pm.expect(jsonRes.Data.Allergy.Severity).equals(\"Low\");\r",
											"    pm.expect(jsonRes.Data.Allergy.Reaction).equals(expectedReaction);\r",
											"    pm.expect(jsonRes.Data.Allergy.OtherInformation).equals(expectedOtherInformation);\r",
											"\r",
											"    var lastOccurrence = jsonRes.Data.Allergy.LastOccurrence.split('T')[0];\r",
											"    pm.expect(lastOccurrence).equals(expectedLastOccurrence);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Allergy\": \"Nut allergy\",\r\n    \"Severity\": \"{{PATIENT_ALLERGY_Severity}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/{{PATIENT_ALLERGY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"{{PATIENT_ALLERGY_ID}}"
									]
								},
								"description": "Update the details for an PatientAllergy."
							},
							"response": []
						},
						{
							"name": "Search allergies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient allergies are returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergies');\r",
											"    pm.expect(jsonRes.Data.Allergies.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/search?allergy=pea",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"search"
									],
									"query": [
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}",
											"disabled": true
										},
										{
											"key": "allergy",
											"value": "pea"
										}
									]
								},
								"description": "Search PatientAllergy using query parameters."
							},
							"response": []
						},
						{
							"name": "Get patient allergies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Current patient allergies are returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergies');\r",
											"    pm.expect(jsonRes.Data.Allergies.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/for-patient/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"for-patient",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Search PatientAllergy using query parameters."
							},
							"response": []
						},
						{
							"name": "Delete patient allergy record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/{{PATIENT_ALLERGY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"{{PATIENT_ALLERGY_ID}}"
									]
								},
								"description": "Deletes PatientAllergy using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Biometrics",
					"item": [
						{
							"name": "Blood oxygen saturation",
							"item": [
								{
									"name": "Add blood oxygen saturation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"BIOMETRICS_BLOOD_OXYGEN_ID\", jsonRes.Data.BloodOxygenSaturation.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New blood oxygen saturation record is created\", function () {",
													"",
													"    var expectedValue = 85;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"pm.environment.set(\"RECORDED_BY_USER_ID\", userId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"BloodOxygenSaturation\": 85,\n    \"Unit\": \"%\",\n    \"RecordDate\": \"2021-09-01\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get blood oxygen saturation by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Blood oxygen saturation record is returned\", function () {",
													"",
													"    var expectedValue = 85;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update blood oxygen saturation by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated blood oxygen saturation record is returned\", function () {",
													"",
													"    var expectedBloodOxygenSaturation = 90;",
													"    var expectedRecordDate = \"2021-09-07T00:00:00.000Z\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedBloodOxygenSaturation);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.RecordDate).equals(expectedRecordDate);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"BloodOxygenSaturation\": \"90\",\n    \"RecordDate\": \"2021-09-07\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search blood oxygen saturation record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of blood oxygen saturation records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturationRecords');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturationRecords.Items.length).greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/search?recordedByUserId={{RECORDED_BY_USER_ID}}&createdDateFrom=2021-09-01&createdDateTo=2021-10-14&orderBy=BloodOxygenSaturation&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=100&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-01"
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-14"
												},
												{
													"key": "orderBy",
													"value": "BloodOxygenSaturation"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "100"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete blood oxygen saturation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\" Blood oxygen saturation record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Body height",
							"item": [
								{
									"name": "Add body height",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"BODY_HEIGHT\", 175);\r",
													"pm.environment.set(\"HEIGHT_UNIT\", \"cms\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BODY_HEIGHT_ID\", jsonRes.Data.BodyHeight.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New body height biometrice is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyHeight = pm.environment.get(\"BODY_HEIGHT\");\r",
													"    var expectedHeightUnit = pm.environment.get(\"HEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyHeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyHeight.BodyHeight)).equals(Number(expectedBodyHeight));\r",
													"    pm.expect(jsonRes.Data.BodyHeight.Unit).equals(expectedHeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyHeight\": {{BODY_HEIGHT}},\r\n    \"Unit\": \"{{HEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights"
											]
										},
										"description": "Adds Biometrics information for Body height"
									},
									"response": []
								},
								{
									"name": "Get body height by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Body height biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyHeight = pm.environment.get(\"BODY_HEIGHT\");\r",
													"    var expectedHeightUnit = pm.environment.get(\"HEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyHeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyHeight.BodyHeight)).equals(Number(expectedBodyHeight));\r",
													"    pm.expect(jsonRes.Data.BodyHeight.Unit).equals(expectedHeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/{{BODY_HEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"{{BODY_HEIGHT_ID}}"
											]
										},
										"description": "Get body height metric by body_height_id"
									},
									"response": []
								},
								{
									"name": "Update body height by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let height = pm.environment.get(\"BODY_HEIGHT\");",
													"pm.environment.set(\"BODY_HEIGHT\", Number(height) + 10);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated Body height biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyHeight = 180;\r",
													"    var expectedHeightUnit = pm.environment.get(\"HEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyHeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyHeight.BodyHeight)).equals(Number(expectedBodyHeight));\r",
													"    pm.expect(jsonRes.Data.BodyHeight.Unit).equals(expectedHeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyHeight\": 180,\r\n    \"Unit\": \"{{HEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/{{BODY_HEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"{{BODY_HEIGHT_ID}}"
											]
										},
										"description": "Update the details for a body height metric by body_height_id."
									},
									"response": []
								},
								{
									"name": "Search body height",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of body height records is returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeightRecords');\r",
													"    pm.expect(jsonRes.Data.BodyHeightRecords.Items.length).to.be.greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/search?createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=BodyHeight&order=ascending&pageIndex=0&itemsPerPage=25&PatientUserId={{PATIENT_USER_ID}}&MinValue=10&MaxValue=200",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
												},
												{
													"key": "orderBy",
													"value": "BodyHeight",
													"description": "The name of the Parameter to order by"
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'"
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "PatientUserId",
													"value": "{{PATIENT_USER_ID}}",
													"description": "Patient User Id"
												},
												{
													"key": "MinValue",
													"value": "10",
													"description": "Minimum value of height"
												},
												{
													"key": "MaxValue",
													"value": "200",
													"description": "Maximum value of height"
												},
												{
													"key": "RecordedByUserId",
													"value": "",
													"description": "User Id of the user who recorded the height biometric record",
													"disabled": true
												}
											]
										},
										"description": "Search body height biometrics using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete body height",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/{{BODY_HEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"{{BODY_HEIGHT_ID}}"
											]
										},
										"description": "Delete body height metric by body_height_id"
									},
									"response": []
								}
							]
						},
						{
							"name": "Body weight",
							"item": [
								{
									"name": "Add body weight",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"BODY_WEIGHT\", 88);\r",
													"pm.environment.set(\"WEIGHT_UNIT\", \"Kg\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BODY_WEIGHT_ID\", jsonRes.Data.BodyWeight.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New body weight is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyWeight = pm.environment.get(\"BODY_WEIGHT\");\r",
													"    var expectedWeightUnit = pm.environment.get(\"WEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyWeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyWeight.BodyWeight)).equals(Number(expectedBodyWeight));\r",
													"    pm.expect(jsonRes.Data.BodyWeight.Unit).equals(expectedWeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyWeight\": {{BODY_WEIGHT}},\r\n    \"Unit\": \"{{WEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights"
											]
										},
										"description": "Adds Biometrics information for Body height"
									},
									"response": []
								},
								{
									"name": "Get body weight by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Body weight biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyWeight = pm.environment.get(\"BODY_WEIGHT\");\r",
													"    var expectedWeightUnit = pm.environment.get(\"WEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyWeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyWeight.BodyWeight)).equals(Number(expectedBodyWeight));\r",
													"    pm.expect(jsonRes.Data.BodyWeight.Unit).equals(expectedWeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/{{BODY_WEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"{{BODY_WEIGHT_ID}}"
											]
										},
										"description": "Get body height metric by body_height_id"
									},
									"response": []
								},
								{
									"name": "Update body weight by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated Body weight biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyWeight = 90;\r",
													"    var expectedWeightUnit = pm.environment.get(\"WEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyWeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyWeight.BodyWeight)).equals(Number(expectedBodyWeight));\r",
													"    pm.expect(jsonRes.Data.BodyWeight.Unit).equals(expectedWeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyWeight\": 90,\r\n    \"Unit\": \"{{WEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/{{BODY_WEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"{{BODY_WEIGHT_ID}}"
											]
										},
										"description": "Update the details for a body height metric by body_height_id."
									},
									"response": []
								},
								{
									"name": "Search body weight",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of body weight records is returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeightRecords');\r",
													"    pm.expect(jsonRes.Data.BodyWeightRecords.Items.length).to.be.greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/search?createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=BodyWeight&order=ascending&pageIndex=0&itemsPerPage=25&PatientUserId={{PATIENT_USER_ID}}&MinValue=10&MaxValue=200",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
												},
												{
													"key": "orderBy",
													"value": "BodyWeight",
													"description": "The name of the Parameter to order by"
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'"
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "PatientUserId",
													"value": "{{PATIENT_USER_ID}}",
													"description": "Patient User Id"
												},
												{
													"key": "MinValue",
													"value": "10",
													"description": "Minimum value of weight"
												},
												{
													"key": "MaxValue",
													"value": "200",
													"description": "Maximum value of weight"
												},
												{
													"key": "RecordedByUserId",
													"value": "",
													"description": "User Id of the user who recorded the height biometric record",
													"disabled": true
												}
											]
										},
										"description": "Search body height biometrics using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete body weight",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/{{BODY_WEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"{{BODY_WEIGHT_ID}}"
											]
										},
										"description": "Delete body height metric by body_height_id"
									},
									"response": []
								}
							]
						},
						{
							"name": "Body temperature",
							"item": [
								{
									"name": "Add body temperature record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"BIOMETRICS_BODY_TEMPERATURE_ID\", jsonRes.Data.BodyTemperature.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New body temperature record is created\", function () {",
													"",
													"    var expectedValue = 36;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.BodyTemperature.BodyTemperature).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BodyTemperature.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"BodyTemperature\": 36,\n    \"Unit\": \"Celsius\",\n    \"RecordDate\": \"2021-09-14\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get body temperature record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Body temperature record is returned\", function () {",
													"",
													"    var expectedValue = 36;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.BodyTemperature.BodyTemperature).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BodyTemperature.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/{{BIOMETRICS_BODY_TEMPERATURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"{{BIOMETRICS_BODY_TEMPERATURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update body temperature record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated body temperature record is returned\", function () {",
													"",
													"    var expectedBodyTemperature = 37;",
													"    var expectedRecordDate = \"2021-09-14\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.BodyTemperature.BodyTemperature).equals(expectedBodyTemperature);",
													"    pm.expect(jsonRes.Data.BodyTemperature.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    var recordDate = jsonRes.Data.BodyTemperature.RecordDate;",
													"    if (recordDate) {",
													"        recordDate = recordDate.split('T')[0];",
													"    }",
													"    pm.expect(recordDate).equals(expectedRecordDate);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"BodyTemperature\": 37,\n    \"Unit\": \"C\",\n    \"RecordDate\": \"2021-09-14\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/{{BIOMETRICS_BODY_TEMPERATURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"{{BIOMETRICS_BODY_TEMPERATURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search body temperature records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of body temperature records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperatureRecords');",
													"    pm.expect(jsonRes.Data.BodyTemperatureRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/search?recordedByUserId={{RECORDED_BY_USER_ID}}&createdDateFrom=2021-09-13&createdDateTo=2021-10-14&orderBy=BodyTemperature&order=ascending&pageIndex=0&itemsPerPage=25&minValue=36&maxValue=48&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-13"
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-14"
												},
												{
													"key": "orderBy",
													"value": "BodyTemperature"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "36"
												},
												{
													"key": "maxValue",
													"value": "48"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete body temperature record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Body temperature record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/{{BIOMETRICS_BODY_TEMPERATURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"{{BIOMETRICS_BODY_TEMPERATURE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Pulse",
							"item": [
								{
									"name": "Add pulse record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"BIOMETRICS_PULSE_ID\", jsonRes.Data.Pulse.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New pulse record is created\", function () {",
													"",
													"    var expectedValue = 72;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.Pulse.Pulse).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Pulse.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Pulse\": 72,\n    \"Unit\": \"%\",\n    \"RecordDate\": \"2021-09-01\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get pulse record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Pulse record is returned\", function () {",
													"",
													"    var expectedValue = 72;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.Pulse.Pulse).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Pulse.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/{{BIOMETRICS_PULSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"{{BIOMETRICS_PULSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update pulse record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated pulse record is returned\", function () {",
													"",
													"    var expectedPulse = 74;",
													"    var expectedRecordDate = \"2021-09-07\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.Pulse.Pulse).equals(expectedPulse);",
													"    pm.expect(jsonRes.Data.Pulse.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    var recordDate = jsonRes.Data.Pulse.RecordDate;",
													"    if (recordDate) {",
													"        recordDate = recordDate.split('T')[0];",
													"    }",
													"    pm.expect(recordDate).equals(expectedRecordDate);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Pulse\": 74,\n    \"RecordDate\": \"2021-09-07\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/{{BIOMETRICS_PULSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"{{BIOMETRICS_PULSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search pulse records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of pulse records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('PulseRecords');",
													"    pm.expect(jsonRes.Data.PulseRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/search?recordedByUserId={{RECORDED_BY_USER_ID}}&createdDateFrom=2021-09-01&createdDateTo=2021-12-07&orderBy=Pulse&order=ascending&pageIndex=0&itemsPerPage=25&minValue=70&maxValue=76&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-01"
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-07"
												},
												{
													"key": "orderBy",
													"value": "Pulse"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "70"
												},
												{
													"key": "maxValue",
													"value": "76"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete pulse record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Pulse record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/{{BIOMETRICS_PULSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"{{BIOMETRICS_PULSE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Blood Pressure",
							"item": [
								{
									"name": "Add blood pressure record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"BIOMETRICS_BLOOD_PRESSURE_ID\", jsonRes.Data.BloodPressure.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New blood pressure record is created\", function () {",
													"",
													"    var expectedSystolic = 160;",
													"    var expectedDiastolic = 180;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressure');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Systolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Diastolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.BloodPressure.Systolic).equals(expectedSystolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.Diastolic).equals(expectedDiastolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Systolic\": 160,\n    \"Diastolic\": 180,\n    \"Unit\": \"mm Hg\",\n    \"RecordDate\": \"2021-09-22\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get blood pressure record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Blood pressure record is returned\", function () {",
													"",
													"    var expectedSystolic = 160;",
													"    var expectedDiastolic = 180;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressure');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Systolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Diastolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodPressure.Systolic).equals(expectedSystolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.Diastolic).equals(expectedDiastolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update blood pressure record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated blood pressure record is returned\", function () {",
													"",
													"    var expectedSystolic = 100;",
													"    var expectedDiastolic = 80;",
													"    var expectedRecordDate = \"2021-09-22T00:00:00.000Z\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressure');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Systolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Diastolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodPressure.Systolic).equals(expectedSystolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.Diastolic).equals(expectedDiastolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.RecordDate).equals(expectedRecordDate);",
													"    pm.expect(jsonRes.Data.BloodPressure.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Systolic\": 100,\n    \"Diastolic\": 80,\n    \"Unit\": \"mm Hg\",\n    \"RecordDate\": \"2021-09-22\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search blood pressure records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of blood pressure records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressureRecords');",
													"    pm.expect(jsonRes.Data.BloodPressureRecords.Items.length).greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/search?recordedByUserId={{RECORDED_BY_USER_ID}}&createdDateFrom=2021-09-22&createdDateTo=2021-10-22&orderBy=Systolic&order=ascending&pageIndex=0&itemsPerPage=25&MinSystolicValue=100&MaxSystolicValue=160&patientUserId={{PATIENT_USER_ID}}&MinDiastolicValue=80&MaxDiastolicValue=180",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-22"
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-22"
												},
												{
													"key": "orderBy",
													"value": "Systolic"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "MinSystolicValue",
													"value": "100"
												},
												{
													"key": "MaxSystolicValue",
													"value": "160"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												},
												{
													"key": "MinDiastolicValue",
													"value": "80"
												},
												{
													"key": "MaxDiastolicValue",
													"value": "180"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete blood pressure record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\" Blood pressure record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Blood glucose",
							"item": [
								{
									"name": "Add blood glucose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BIOMETRICS_BLOOD_GLUCOSE_ID\", jsonRes.Data.BloodGlucose.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New blood glucose record is created\", function () {\r",
													"\r",
													"    var expectedValue = 98;\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.BloodGlucose).equals(expectedValue);\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"pm.environment.set(\"RECORDED_BY_USER_ID\", userId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Unit\": \"mg|dL\",\r\n    \"BloodGlucose\": 98,\r\n    \"RecordDate\": \"2021-09-02\",\r\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get blood glucose by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Blood glucose record is returned\", function () {\r",
													"\r",
													"    var expectedValue = 98;\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.BloodGlucose).equals(expectedValue);\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.PatientUserId).equals(expectedPatientUserId);\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/{{BIOMETRICS_BLOOD_GLUCOSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"{{BIOMETRICS_BLOOD_GLUCOSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update blood glucose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated blood glucose record is returned\", function () {\r",
													"\r",
													"    var expectedValue = 106;\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    \r",
													"   var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('PatientUserId');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.BloodGlucose.BloodGlucose).equals(expectedValue);\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Unit\": \"mg|dL\",\r\n    \"BloodGlucose\": 106,\r\n    \"RecordDate\": \"2021-09-12\",\r\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/{{BIOMETRICS_BLOOD_GLUCOSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"{{BIOMETRICS_BLOOD_GLUCOSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "search blood glucose",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Record of blood glucose is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucoseRecords');\r",
													"    pm.expect(jsonRes.Data.BloodGlucoseRecords.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/search?recordedByUserId={{RECORDED_BY_USER_ID}}&createdDateFrom=2021-09-01&createdDateTo=2021-10-14&orderBy=BloodGlucose&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=1000&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-01"
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-14"
												},
												{
													"key": "orderBy",
													"value": "BloodGlucose"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "1000"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete blood glucose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Blood glucose record is deleted\", function () {\r",
													"\r",
													"    var expectedValue = true;\r",
													"    var jsonRes = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/{{BIOMETRICS_BLOOD_GLUCOSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"{{BIOMETRICS_BLOOD_GLUCOSE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Educational",
			"item": [
				{
					"name": "Knowledge nuggets",
					"item": [
						{
							"name": "Add knowledge nugget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"KNOWLEDGE_NUGGET_ID\", jsonRes.Data.KnowledgeNugget.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Knowledge nugget record is created\", function () {",
											"",
											"    var expectedValue = \"Some topic\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"    ",
											"    pm.expect(jsonRes.Data.KnowledgeNugget.TopicName).equals(expectedValue);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TopicName\": \"Some topic\",\n    \"BriefInformation\": \"Brief information for topic\",\n    \"DetailedInformation\": \"Detailed information for the topic\",\n    \"AdditionalResources\": [],\n    \"Tags\": [\n        \"BP\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get knowledge nugget by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Knowledge nugget record is returned\", function () {",
											"",
											"    var expectedValue = \"Some topic\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"",
											"    pm.expect(jsonRes.Data.KnowledgeNugget.TopicName).equals(expectedValue);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/{{KNOWLEDGE_NUGGET_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"{{KNOWLEDGE_NUGGET_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update knowledge nugget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated knowledge nugget record is returned\", function () {",
											"",
											"    var expectedValue = \"Hypertension\";",
											" ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"",
											"    pm.expect(jsonRes.Data.KnowledgeNugget.TopicName).equals(expectedValue);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TopicName\": \"Hypertension\"   \n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/{{KNOWLEDGE_NUGGET_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"{{KNOWLEDGE_NUGGET_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search knowledge nugget by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of knowledge nugget records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNuggetRecords');",
											"    pm.expect(jsonRes.Data.KnowledgeNuggetRecords.Items.length).to.be.greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/search?TopicName=Heart failure&Tag=Heart&orderBy=TopicName&order=ascending&pageIndex=0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"search"
									],
									"query": [
										{
											"key": "TopicName",
											"value": "Heart failure"
										},
										{
											"key": "Tag",
											"value": "Heart"
										},
										{
											"key": "orderBy",
											"value": "TopicName"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete knowledge nugget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Knowledge nugget record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/{{KNOWLEDGE_NUGGET_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"{{KNOWLEDGE_NUGGET_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get today's topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Random knowledge nugget record is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/today/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"today",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "File resource management",
			"item": [
				{
					"name": "Upload file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jasonRes = pm.response.json();\r",
									"    var resources = jasonRes.Data.FileResources;\r",
									"    var resource = resources[0];\r",
									"    var resourceId = resource.id;\r",
									"\r",
									"    pm.environment.set(\"PATIENT_PROFILE_IMAGE_RESOURCE_ID\", resourceId);\r",
									"    pm.environment.set(\"UPLOADED_RESOURCE_ID\", resourceId);\r",
									"    pm.environment.set(\"RESOURCE_ID\", resourceId);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is uploaded\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
									"\r",
									"    var resource = jsonRes.Data.FileResources[0];\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).greaterThan(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"type": "file",
									"src": "test.data/profile.images/female/2.jpg"
								},
								{
									"key": "IsPublicResource",
									"value": "true",
									"type": "text"
								},
								{
									"key": "IsMultiResolutionImage",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/upload",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload file as public resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is uploaded as public resource\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
									"\r",
									"    var resource = jsonRes.Data.FileResources[0];\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).greaterThan(0);\r",
									"    pm.expect(resource.IsPublicResource).equals(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"type": "file",
									"src": "test.data/profile.images/female/7.jpg"
								},
								{
									"key": "IsPublicResource",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/upload/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"upload",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload multi-resolution image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is uploaded as multi-resolution image\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
									"\r",
									"    var resource = jsonRes.Data.FileResources[0];\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).equals(3);\r",
									"\r",
									"    var firstVersion = resource.Versions[0];\r",
									"    var secondVersion = resource.Versions[1];\r",
									"    var thirdVersion = resource.Versions[2];\r",
									"    \r",
									"    pm.expect(firstVersion).to.have.property('VersionId');\r",
									"    pm.expect(firstVersion).to.have.property('ResourceId');\r",
									"    pm.expect(firstVersion).to.have.property('Version');\r",
									"    pm.expect(firstVersion).to.have.property('Url');\r",
									"    \r",
									"    pm.expect(secondVersion).to.have.property('VersionId');\r",
									"    pm.expect(secondVersion).to.have.property('ResourceId');\r",
									"    pm.expect(secondVersion).to.have.property('Version');\r",
									"    pm.expect(secondVersion).to.have.property('Url');\r",
									"    \r",
									"    pm.expect(thirdVersion).to.have.property('VersionId');\r",
									"    pm.expect(thirdVersion).to.have.property('ResourceId');\r",
									"    pm.expect(thirdVersion).to.have.property('Version');\r",
									"    pm.expect(thirdVersion).to.have.property('Url');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"type": "file",
									"src": "test.data/profile.images/female/23.jpg"
								},
								{
									"key": "IsPublicResource",
									"value": "true",
									"type": "text"
								},
								{
									"key": "IsMultiResolutionImage",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/upload/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"upload",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update file resource - references and tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jasonRes = pm.response.json();\r",
									"    var resource = jasonRes.Data.FileResource;\r",
									"\r",
									"    var reference = resource.References[0];\r",
									"    var referenceId = reference.ItemId;\r",
									"    var referenceType = reference.ItemType;\r",
									"    var referenceKeyword = reference.Keyword;\r",
									"    pm.environment.set(\"RESOURCE_REFERENCE_ID\", referenceId);\r",
									"    pm.environment.set(\"RESOURCE_REFERENCE_TYPE\", referenceType);\r",
									"    pm.environment.set(\"RESOURCE_REFERENCE_KEYWORD\", referenceKeyword);\r",
									"\r",
									"    var tag = resource.Tags[0];\r",
									"    pm.environment.set(\"RESOURCE_TAG\", tag);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"References and tags are added to resource\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResource');\r",
									"\r",
									"    var resource = jsonRes.Data.FileResource;\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.References.length).greaterThan(0);\r",
									"    pm.expect(resource.Tags.length).greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"References\": [\n        {\n            \"ItemId\": \"{{BIOMETRICS_BLOOD_PRESSURE_ID}}\",\n            \"ItemType\": \"Biometrics\",\n            \"Keyword\": \"Blood pressure\"\n        }\n    ],\n    \"Tags\": [\n        \"First tag\",\n        \"Second tag\"\n    ]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload file version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jasonRes = pm.response.json();\r",
									"    var resource = jasonRes.Data.FileResource;\r",
									"    var version = resource.DefaultVersion;\r",
									"\r",
									"    pm.environment.set(\"RESOURCE_VERSION\", version.Version);\r",
									"    pm.environment.set(\"RESOURCE_VERSION_ID\", version.VersionId);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A new file version is uploaded\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResource');\r",
									"\r",
									"    var resource = jsonRes.Data.FileResource;\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"type": "file",
									"src": "test.data/profile.images/female/4.jpg"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/upload-version/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"upload-version",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is renamed with new namee\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Renamed');\r",
									"    var status = jsonRes.Data.Renamed;\r",
									"    pm.expect(status).equals(true);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"RESOURCE_NEW_FILE_NAME\", \"2_new_name.jpg\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/rename/{{RESOURCE_NEW_FILE_NAME}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"rename",
								"{{RESOURCE_NEW_FILE_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get resource by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A file resource by id is returned with new name\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResource');\r",
									"    var resource = jsonRes.Data.FileResource;\r",
									"    var expectedNewFileName = pm.environment.get(\"RESOURCE_NEW_FILE_NAME\");\r",
									"    pm.expect(resource.FileName).equals(expectedNewFileName);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by resource id as an attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download?disposition=attachment",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download"
							],
							"query": [
								{
									"key": "disposition",
									"value": "attachment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by respurce id for inline display",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download?disposition=inline",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download"
							],
							"query": [
								{
									"key": "disposition",
									"value": "inline"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by version name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download-by-version-name/{{RESOURCE_VERSION}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download-by-version-name",
								"{{RESOURCE_VERSION}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by version id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download-by-version-id/{{RESOURCE_VERSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download-by-version-id",
								"{{RESOURCE_VERSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search and download",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/search-download?referenceId={{RESOURCE_REFERENCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"search-download"
							],
							"query": [
								{
									"key": "referenceId",
									"value": "{{RESOURCE_REFERENCE_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Searched resources are returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.TotalCount).greaterThan(0);\r",
									"    pm.expect(jsonRes.Data.FileResources.Items.length).greaterThan(0);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/search?referenceId={{RESOURCE_REFERENCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"search"
							],
							"query": [
								{
									"key": "referenceId",
									"value": "{{RESOURCE_REFERENCE_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get version by version id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A file resource version is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResourceVersion');\r",
									"    var version = jsonRes.Data.FileResourceVersion;\r",
									"    pm.expect(version).to.have.property('VersionId');\r",
									"    pm.expect(version).to.have.property('ResourceId');\r",
									"    pm.expect(version).to.have.property('Version');\r",
									"    pm.expect(version).to.have.property('FileName');\r",
									"    pm.expect(version).to.have.property('MimeType');\r",
									"    pm.expect(version).to.have.property('OriginalName');\r",
									"    pm.expect(version).to.have.property('Url');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/versions/{{RESOURCE_VERSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"versions",
								"{{RESOURCE_VERSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A list of file resource versions is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResourceVersions');\r",
									"    var versions = jsonRes.Data.FileResourceVersions;\r",
									"    pm.expect(versions.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/versions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete version by version id",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/versions/{{RESOURCE_VERSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"versions",
								"{{RESOURCE_VERSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete resource",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}