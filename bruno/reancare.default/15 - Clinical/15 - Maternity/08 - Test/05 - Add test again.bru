meta {
  name: Create Again
  type: http
  seq: 5
}

post {
  url: {{BASE_URL}}/clinical/maternity/maternity-pregnancies/{{PREGNANCY_ID}}/tests
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{ADMIN_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "PregnancyId": "{{PREGNANCY_ID}}",
      "TestName": "CBC",
      "Type": "Blood",
      "Impression": "Normal fetal development observed",
      "Parameters": {
          "Name": "Sugar",
          "Value": "90",
           "Unit": "mg/dL"
      },
      "DateOfTest": "2024-08-10T10:30:00Z"
  }
  
}

tests {
  try {
  
      var jsonData = res.getBody();
      var id = jsonData.Data.Test.id;
      bru.setEnvVar("TEST_ID", id);
  
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New Test record is created", function () {
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('Test');
      
      expect(jsonRes.Data.Test).to.have.property('id');
      expect(jsonRes.Data.Test).to.have.property('PregnancyId');
      expect(jsonRes.Data.Test).to.have.property('TestName');
      expect(jsonRes.Data.Test).to.have.property('Type');
      expect(jsonRes.Data.Test).to.have.property('Impression');
      expect(jsonRes.Data.Test).to.have.property('Parameters');
      expect(jsonRes.Data.Test).to.have.property('DateOfTest');
  });
  
}
