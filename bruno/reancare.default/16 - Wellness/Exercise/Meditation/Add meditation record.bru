meta {
  name: Add meditation record
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/wellness/exercise/meditations
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "PatientUserId": "{{PATIENT_USER_ID}}",
      "Meditation": "Breathing",
      "Description": "",
      "Category": "",
      "StartTime": "2021-09-21T05:30:00.000Z",
      "EndTime": "2021-09-21T05:45:00.000Z"
  }
}

tests {
  var jsonRes = res.getBody();
  
  try {
      bru.setEnvVar("EXERCISE_MEDITATION_ID", jsonRes.Data.Meditation.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New meditation record is created", function () {
  
      var expectedValue = "Breathing";
      var expectedPatientUserId = bru.getEnvVar("PATIENT_USER_ID");
      
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('Meditation');
      expect(jsonRes.Data.Meditation).to.not.be.empty;
      expect(jsonRes.Data.Meditation).to.have.property('id');
      expect(jsonRes.Data.Meditation).to.have.property('Meditation');
      expect(jsonRes.Data.Meditation).to.have.property('PatientUserId');
      
      expect(jsonRes.Data.Meditation.Meditation).equals(expectedValue);
      expect(jsonRes.Data.Meditation.PatientUserId).equals(expectedPatientUserId);
      
  });
  
}
