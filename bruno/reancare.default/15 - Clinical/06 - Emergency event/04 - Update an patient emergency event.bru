meta {
  name: Update an patient emergency event
  type: http
  seq: 3
}

put {
  url: {{BASE_URL}}/clinical/emergency-events/{{EMERGENCY_EVENT_ID}}
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "EhrId":"{{EMERGENCY_EHRID}}",
      "PatientUserId":"{{EMERGENCY_PATIENTUSERID}}",
      "Details":"{{EMERGENCY_DETAILS}}",
      "EmergencyDate":"{{EMERGENCY_EMERGENCYDATE}}"
  }
}

script:pre-request {
  bru.setEnvVar("EMERGENCY_DETAILS", 'Insomnia');
}

tests {
  var jsonRes = res.getBody();
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Correct updates should be reflected", function () {
  
      let expectedEhrId = bru.getEnvVar("EMERGENCY_EHRID");
      let expectedPatientUserId = bru.getEnvVar("EMERGENCY_PATIENTUSERID");
      let expectedDetails = bru.getEnvVar("EMERGENCY_DETAILS");
      let expectedEmergencyDate = bru.getEnvVar("EMERGENCY_EMERGENCYDATE");
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('EmergencyEvent');
      expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;
      expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');
      expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');
      expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');
      expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');
  
      expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);
      expect(jsonRes.Data.EmergencyEvent.EmergencyDate).equals(expectedEmergencyDate);
  });
  
  
}

docs {
  Update the details for an emergency event.
}
