# This workflow will trigger pull requests and apply a label based on the
# paths that are modified in the pull request.
#

# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: PR-CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  pull_request:
    branches: [develop]
    
jobs:
  CodeScan-ESLint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: docker://ghcr.io/github/super-linter:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: /
          TYPESCRIPT_ES_CONFIG_FILE: .eslintrc.json
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: develop

  Build-Docker-Image:
    runs-on: ubuntu-latest
#       group: Default Larger Runners
#       labels: ubuntu-latest-4-cores

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          # echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed "s/\\//-/g")"
          # echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          # echo "::set-output name=repo_name::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')"
          echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed "s/\\//-/g")" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "repo_name=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')" >> $GITHUB_OUTPUT
      - name: Another step
        run: |
          echo "Branch: ${{ steps.vars.outputs.branch }}"
          echo "Sha: ${{ steps.vars.outputs.sha_short }}"
          echo "Repo: ${{ steps.vars.outputs.repo_name }}"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          tags: reancare/services:${{ steps.vars.outputs.branch }}_${{ steps.vars.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
