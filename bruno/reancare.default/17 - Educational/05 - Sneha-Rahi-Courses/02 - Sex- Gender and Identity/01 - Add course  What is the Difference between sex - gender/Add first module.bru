meta {
  name: Add first module
  type: http
  seq: 3
}

post {
  url: {{BASE_URL}}/educational/course-modules
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{ADMIN_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "CourseId": "{{COURSE_ID}}",
      "LearningPathId": "{{LEARNING_PATH_ID}}",
      "Name": "What is the Difference between sex & gender",
      "Sequence": 1,
      "DurationInMins": 5.19
  }
}

tests {
  var jsonRes = res.getBody();
  
  try {
      bru.setEnvVar("FIRST_COURSE_MODULE_ID", jsonRes.Data.CourseModule.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New course module is returned", function () {
  
      var expectedName = "What is the Difference between sex & gender";
      var expectedDurationInMins = 5.19;
      
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('CourseModule');
      expect(jsonRes.Data.CourseModule).to.not.be.empty;
      expect(jsonRes.Data.CourseModule).to.have.property('Name');
      expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');
      
      expect(jsonRes.Data.CourseModule.Name).equals(expectedName);
      expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);
  });
  
  
}
