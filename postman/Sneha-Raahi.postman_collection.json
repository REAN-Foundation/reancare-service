{
	"info": {
		"_postman_id": "7d49cd2f-3ee0-42cd-9341-7bb33ae5c287",
		"name": "Sneha-Raahi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5510218"
	},
	"item": [
		{
			"name": "system admin",
			"item": [
				{
					"name": "Admin log-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\",\r\n    \"LoginRoleId\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			],
			"description": "User login with username/phone/email and password.\nIn this example, system admin logs in.\n\nSystem admin can perform multiple admin tasks such as - \n1. Add/remove/update api clients.\n2. Renew the API keys for the api clients.\n3. Perform monitoring and admin tasks through selected set of APIs only accessible to system-admin role."
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Register patient- with phone and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
									"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_2\", jsonRes.Data.Patient.User.Person.id);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
									"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PASSWORD\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"91-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient log-in with password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PATIENT_LOGIN_ROLE_ID\", 2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"91-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update patient details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
									"    pm.environment.set(\"PATIENT_PHONE\", jsonRes.Data.Patient.User.Person.Phone);\r",
									"    pm.environment.set(\"PATIENT_GENDER\", jsonRes.Data.Patient.User.Person.Gender);\r",
									"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
									"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\",\r\n    \"Address\": {\r\n        \"Type\": \"Official\",\r\n        \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n        \"City\": \"Mumbai\",\r\n        \"Country\": \"India\"\r\n    },\r\n    \"DefaultTimeZone\": \"+05:30\",\r\n    \"CurrentTimeZone\": \"+05:30\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search patients",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/search?phone={{PATIENT_PHONE_NUMBER}}&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone"
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "Email",
									"description": "The name of the parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Sneha-Rahi-Courses",
			"item": [
				{
					"name": "Sneha raahi quiz",
					"item": [
						{
							"name": "Growing up",
							"item": [
								{
									"name": "Maanav vikas ki avasthaayein",
									"item": [
										{
											"name": "Create maanav vikas ki avasthaayein template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"    pm.environment.set(\"MANAV_VIKAS_ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"KCCQ assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Custom\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Maanav vikas ki avasthaayein\",\n    \"Description\": \"Quiz for growing up!\",\n    \"Type\": \"Custom\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false,\n    \"TotalNumberOfQuestions\": 3\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1.How many stages of development are there?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"6\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n\r\n            \"Text\": \"7\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"8\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"9\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectAnswer\" : 3\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"  \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2.What do kishors feel is most important for them?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Feelings of security\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Wanting to socialise and spend time with friends\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Taking responsibility for family and career\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Wanting to depend on their family\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectAnswer\" : 1\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q3_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"     \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3.During what stage do we emphasise most on either our family or career?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Kishoravasta\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Yuva\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Madhyam Aayu\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Budhapa\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectAnswer\" : 1\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Transitioning from adolescence",
									"item": [
										{
											"name": "Create transitioning from adolescence",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"    pm.environment.set(\"ADOLESCENCE_ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"KCCQ assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Custom\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Transitioning from adolescence\",\n    \"Description\": \"\",\n    \"DisplayCode\": \"\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false,\n    \"TotalNumberOfQuestions\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1.What are some ways for us to deal with the confusion and mixed messages we receive at this age? <select all that apply>\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Multi Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Speak to an adult we trust\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Show that we are responsible\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Build trust with people around us\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Convince parents to give us what we want\",\r\n            \"Sequence\": 4\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"  \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2.What do we do if we are forced to do something we don’t want to do, like quit education or get married\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Quit education or get married\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Run away from home\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Get violent with family\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Talk to a trusted person or organisation and seek support\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectAnswer\" : 4\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Learning Journeys",
					"item": [
						{
							"name": "Growing  up",
							"item": [
								{
									"name": "Add journey - Growing up",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-home/svg/growing-up.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey - Growing Up",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Growing Up\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 100,\r\n    \"Enabled\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 1. Manav Vikas Ki Avasthaein",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Manav Vikas Ki Avasthaein.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course- 1 - Manav Vikas Ki Avasthaein",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Manav Vikas Ki Avasthaein\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Manav Vikas Ki Avasthaein\";\r",
															"    var expectedDurationInMins = 5.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Manav Vikas Ki Avasthaein\",\r\n    \"Sequence\": 1,\r\n    \"DurationInMins\": 5.19\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Manav Vikas Ki Avasthaein\";\r",
															"    var expectedDurationInMins = 5.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIRST_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Manav Vikas Ki Avasthaein\",\r\n    \"Description\": \"Between the moment we are born we pass through diffrent stages of physical, emotional and mental maturity. This module will give you an overview of each of these stages of development.\",\r\n    \"DurationInMins\": 5.19,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=aYCBdZLCDBQ&t=194s\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 2. Safarnama: Kishoravastha se Yuvavastha",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Safarnama- Kishoravastha se Yuvavastha.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Safarnama: Kishoravastha se Yuvavastha\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Safarnama: Kishoravastha se Yuvavastha\";\r",
															"    var expectedDurationInMins = 4.16;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Safarnama: Kishoravastha se Yuvavastha\",\r\n    \"Sequence\": 2,\r\n    \"DurationInMins\": 4.16\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Safarnama: Kishoravastha se Yuvavastha\";\r",
															"    var expectedDurationInMins = 4.16;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SECOND_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Safarnama: Kishoravastha se Yuvavastha\",\r\n    \"Description\": \"The path from adolescence to adulthood has become a complicated journey filled with uncertainty, shifting social and cultural expectations, growing social, etc. This module give you a broad understanding of what are some of the changes one can expect.\",\r\n    \"DurationInMins\": 4.16,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=8KQoZrquwrg\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 3. My rights and responsibilities : Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/My rights and responsibilities - overview.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"My rights and responsibilities : Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add third module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"My rights and responsibilities : Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"My rights and responsibilities : Overview\",\r\n    \"Sequence\": 3,\r\n    \"DurationInMins\": 2.45\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  third module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"My rights and responsibilities : Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{THIRD_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"My rights and responsibilities : Overview\",\r\n    \"Description\": \"All citizens of this country enjoy certain right and are expected to fulfil thier responsibilities. These are not just limited to adults. Adolescent and youth also enjoy certain rights. This module will take you through your rights and responsibilities.\",\r\n    \"DurationInMins\": 2.45,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=mJggYdw3I0k\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 4. Physical changes to expect: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Physical changes to expect - overview.jpg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Physical changes to expect: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fourth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FOURTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Physical changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 4.4;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Physical changes to expect: Overview\",\r\n    \"Sequence\": 4,\r\n    \"DurationInMins\": 4.4\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fourth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Physical changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 4.4;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FOURTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Physical changes to expect: Overview\",\r\n    \"Description\": \"During adolescents our body goes though many changes. Let's learn at the most obvious changes in this module.\",\r\n    \"DurationInMins\": 4.4,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=vMRHCYq7oBU\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 5. Emotional changes to expect: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-home/svg/emotions.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Emotional changes to expect: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fifth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Emotional changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Emotional changes to expect: Overview\",\r\n    \"Sequence\": 5,\r\n    \"DurationInMins\": 3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fifth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Emotional changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIFTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Emotional changes to expect: Overview\",\r\n    \"Description\": \"Learn the emotional social changes that you go through during puberty. Being a step ahead of the game will help you manage yourself for the better.\",\r\n    \"DurationInMins\": 3,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=Bjee0QgqC10\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 6. Reproductive health: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-home/svg/female-reproductive-health.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Reproductive health: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add sixth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SIXTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Reproductive health: Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Reproductive health: Overview\",\r\n    \"Sequence\": 6,\r\n    \"DurationInMins\": 2.45\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  sixth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Reproductive health: Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SIXTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Reproductive health: Overview\",\r\n    \"Description\": \"As you grow you will notice many changes in your body. In this Module we will learn about menstrual health and why it is important for both girls and boys to maintain hygiene.\",\r\n    \"DurationInMins\": 2.45,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=00BYyDr8Xdg&t=103s\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 7. Taking care of nutrition: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Taking care of nutrition.jpg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Taking care of nutrition: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add seventh module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Taking care of nutrition: Overview\";\r",
															"    var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Taking care of nutrition: Overview\",\r\n    \"Sequence\": 7,\r\n    \"DurationInMins\": 2.49\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  seventh module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Taking care of nutrition: Overview\";\r",
															"    var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SEVENTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Taking care of nutrition: Overview\",\r\n    \"Description\": \"Why does a growing body needs the right kind of nutrition? Get answers to these and more in this module.\",\r\n    \"DurationInMins\": 2.49,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=W3eXoKmL-M0\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 8. Accepting my body",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-journeys-details/png/accepting-body.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Accepting my body\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add eighth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"EIGHTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Accepting my body\";\r",
															"    var expectedDurationInMins = 4.37;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Accepting my body\",\r\n    \"Sequence\": 8,\r\n    \"DurationInMins\": 4.37\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  eighth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"EIGHTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Accepting my body\";\r",
															"    var expectedDurationInMins = 4.37;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{EIGHTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Accepting my body\",\r\n    \"Description\": \"When you feel good about your body, you're more likely to have good self-esteem and mental health as well as a balanced attitude to eating and physical activity. In this module we will discuss ways in which we can become more comfortable with our bodies\",\r\n    \"DurationInMins\": 4.37,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=F661OcQ8WOk\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 9. Dealing with peer pressure",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/peer pressure.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Dealing with peer pressure\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add ninth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"NINTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Dealing with peer pressure\";\r",
															"    var expectedDurationInMins = 2.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Dealing with peer pressure\",\r\n    \"Sequence\": 9,\r\n    \"DurationInMins\": 2.19\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  ninth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"NINTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Dealing with peer pressure\";\r",
															"    var expectedDurationInMins = 2.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{NINTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Dealing with peer pressure\",\r\n    \"Description\": \"As young people we face different pressures from the people around us. This module will teach you how you can cope with these pressure.\",\r\n    \"DurationInMins\": 2.19,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=a6_8zBcm7xk&t=46s\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 10. Together against bullying",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Together against bullying.jpg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Together against bullying\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add tenth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"TENTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Together against bullying\",\r\n    \"Sequence\": 10,\r\n    \"DurationInMins\": 4.3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  tenth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"TENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{TENTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Together against bullying\",\r\n    \"Description\": \"If you know someone who has been bullied or you have been a victim of bullying then this module will help you understand the effects and the steps you can take to stop bullying.\",\r\n    \"DurationInMins\": 4.3,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=4mrE5zgEvt4\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course quiz : Manav vikas",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "quiz-image.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Quiz-Manav Vikas ki Avasthaein\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add eleventh module",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ELEVENTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Quiz-Manav Vikas ki Avasthaeing\",\r\n    \"Sequence\": 11\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  eleventh module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ELEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{ELEVENTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Quiz-Manav Vikas ki Avasthaeing\",\r\n    \"Description\": \"Take a quiz on growing up\",\r\n    \"ContentType\": \"Assessment\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"ActionTemplateId\": \"{{MANAV_VIKAS_ASSESSMENT_TEMPLATE_ID}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course quiz : Adolescence",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "quiz-image.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Quiz-Transitioning from adolescence\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add twelth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"TWELTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Quiz-Transitioning from adolescence\",\r\n    \"Sequence\": 12\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  twelth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ELEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{TWELTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Quiz-Transitioning from adolescence\",\r\n    \"Description\": \"Take a quiz on transitioning to adolescence\",\r\n    \"ContentType\": \"Assessment\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"ActionTemplateId\": \"{{ADOLESCENCE_ASSESSMENT_TEMPLATE_ID}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Sex, Gender and Identity",
							"item": [
								{
									"name": "Add journey - Sex, Gender and Identity",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-journeys/svg/gender-identity.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Sex, Gender and Identity\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 95,\r\n    \"Enabled\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 1. What is the Difference between sex & gender",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-journeys-details/svg/pressure.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is the Difference between sex & gender\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"What is the Difference between sex & gender\";\r",
															"    var expectedDurationInMins = 5.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is the Difference between sex & gender\",\r\n    \"Sequence\": 1,\r\n    \"DurationInMins\": 5.19\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"What is the Difference between sex & gender\";\r",
															"    var expectedDurationInMins = 3.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIRST_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"What is the Difference between sex & gender\",\r\n    \"Description\": \"Did you think sex and gender means the same thing? Well it isn't. This module will help you understand the difference between sex and gender.\",\r\n    \"DurationInMins\": 3.45,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=Y19kYh6k7ls\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 2. What are gender stereotypes?",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/gender-stereotypes.jpeg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What are gender stereotypes?\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"What are gender stereotypes?\";\r",
															"    var expectedDurationInMins = 2.56;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What are gender stereotypes?\",\r\n    \"Sequence\": 2,\r\n    \"DurationInMins\": 2.56\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"What are gender stereotypes?\";\r",
															"    var expectedDurationInMins = 2.56;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SECOND_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"What are gender stereotypes?\",\r\n    \"Description\": \"People have occasionally felt pressure to act or look a certain way based on their gender. In this module we will learn about the various gender related assumptions.\",\r\n    \"DurationInMins\": 2.56,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=HdHSDaJNQSg\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 3. What is identity",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Gender identity.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is identity?\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add third module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"What is identity\";\r",
															"    var expectedDurationInMins = 2.29;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is identity?\",\r\n    \"Sequence\": 3,\r\n    \"DurationInMins\": 2.29\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  third module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"What is identity\";\r",
															"    var expectedDurationInMins = 2.29;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{THIRD_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"What is identity\",\r\n    \"Description\": \"Who are you? What makes you, you? Your gender identity is how you see yourself, boy or girl, and everything in between. This module will teach you a litlle more about understanding yourself and people around you.\",\r\n    \"DurationInMins\": 2.29,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=FFZtHu_DXi4\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 4. Undertstanding the gender spectrum",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Gender spectrum.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Undertstanding the gender spectrum\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fourth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FOURTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Undertstanding the gender spectrum\";\r",
															"    var expectedDurationInMins = 7.14;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Undertstanding the gender spectrum\",\r\n    \"Sequence\": 4,\r\n    \"DurationInMins\": 7.14\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fourth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FOURTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Undertstanding the gender spectrum\";\r",
															"    var expectedDurationInMins = 7.14;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FOURTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Undertstanding the gender spectrum\",\r\n    \"Description\": \"Know your LGBTIQ+ terms! Using the genderbread person, we explain what's meant by sexual orientation, gender identity, gender expression and sex characteristics.\",\r\n    \"DurationInMins\": 7.14,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=-cdsGFnNp6Q\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 5. Section 377",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Section 377.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Section 377\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fifth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Section 377\";\r",
															"    // var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    // pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Section 377\",\r\n    \"Sequence\": 5\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fifth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Section 377\";\r",
															"    // var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    // pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    // pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIFTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Section 377\",\r\n    \"Description\": \"What is section 377 and what does it mean to the LGBTQIA community\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 6. Coming out to others",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/Coming out to others.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Coming out to others\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add sixth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Section 377\";\r",
															"    // var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    // pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Coming out to others\",\r\n    \"Sequence\": 6\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  sixth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Coming out to others\";\r",
															"    var expectedDurationInMins = 2.38;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SIXTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Coming out to others\",\r\n    \"Description\": \"Here are some tips that will help you openly declare your sexual orientation or gender identity if you want to\",\r\n    \"DurationInMins\": 2.38,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=7YXcg8HJs18\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 7. Important numbers",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-course/png/phone-icon.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Important numbers\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add seventh module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Important numbers\";\r",
															"    // var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    // pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Important numbers\",\r\n    \"Sequence\": 7\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload pdf",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"PDF_FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/documents/lab_order_x.pdf"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  seventh module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Important numbers\";\r",
															"    // var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    // pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    // pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SEVENTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Important numbers \",\r\n    \"ContentType\": \"Pdf\",\r\n    \"ResourceLink\": \"{{PDF_FILE_RESOURCE_URL}}\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  seventh module content Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Important numbers\";\r",
															"    // var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    // pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    // pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"7053720c-8718-478a-a9e6-9a334eb1954d\",\r\n    \"LearningPathId\": \"2415333e-8e59-4bd3-a20d-e70cf86d4910\",\r\n    \"ModuleId\": \"4e386876-c049-42b9-8f13-9f28c87cec68\",\r\n    \"Title\": \"Important numbers \",\r\n    \"ContentType\": \"Pdf\",\r\n    \"ResourceLink\": \"{{PDF_FILE_RESOURCE_URL}}\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Health & Nutrition",
							"item": [
								{
									"name": "Add journey - Health and Nutrition",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-journeys/svg/eat-healthy.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Health and Nutrition\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 90,\r\n    \"Enabled\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Mental health",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-journeys/svg/feeling.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Mental Health\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 85,\r\n    \"Enabled\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Reproductive Health",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-journeys/svg/sexual-reproductive.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Reproductive Health\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 80,\r\n    \"Enabled\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Conception, Contraception and Abortion",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-home/png/female-reproductive-health.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Conception, Contraception and Abortion\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 75,\r\n    \"Enabled\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Child Abuse",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-home/png/child-abuse.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Child Abuse\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 70,\r\n    \"Enabled\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Substance Abuse",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-home/png/substance-abuse.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Substance Abuse\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 65,\r\n    \"Enabled\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Domestic Violence",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "postman/test.data/sneha-rahi/learning-journeys/png/domestic-violence.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Domestic Violence\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"PreferenceWeight\": 60,\r\n    \"Enabled\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Add notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Job posting\";\r",
									"\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"   \r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									"    \r",
									"});\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{USER_ID}}\",\r\n    \"Title\": \"You can now limit credit card numbers by card type and country.\",\r\n    \"Body\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\r\n    \"SentOn\": \"3/28/2021\",\r\n    \"ImageUrl\": \"https://picsum.photos/200\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get notification by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Notice record is returned\", function () {",
									"",
									"    var expectedTitle =  \"Job posting\";",
									"    var expectedDaysActive = 7;",
									"    ",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Notice');",
									"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;",
									"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');",
									"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');",
									"    ",
									"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);",
									"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);",
									"",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/{{NOTIFICATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								"{{NOTIFICATION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MarkAsRead",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Updated notice record is returned\", function () {",
									"",
									"    var expectedTitle =  \"Job posting\";",
									"    var expectedDaysActive = 7;",
									"    ",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Notice');",
									"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;",
									"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');",
									"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');",
									"    ",
									"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);",
									"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);",
									"    ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ReadOn\": \"2022-09-20\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/{{NOTIFICATION_ID}}/mark-as-read",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								"{{NOTIFICATION_ID}}",
								"mark-as-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Updated notice record is returned\", function () {",
									"",
									"    var expectedTitle =  \"Job posting\";",
									"    var expectedDaysActive = 7;",
									"    ",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Notice');",
									"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;",
									"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');",
									"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');",
									"    ",
									"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);",
									"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);",
									"    ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Title\": \"Job posting\",\n    \"Body\": \"abcs\",\n    \"SentOn\": \"2022-09-20\",\n    \"ImageUrl\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\n    \"Type\": \"General\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/{{NOTIFICATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								"{{NOTIFICATION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"List of notification records is returned\", function () {",
									"",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('NoticeRecords');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/search?itemsPerPage=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								"search"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "order",
									"value": "ascending",
									"disabled": true
								},
								{
									"key": "pageIndex",
									"value": "0",
									"disabled": true
								},
								{
									"key": "itemsPerPage",
									"value": "10"
								},
								{
									"key": "title",
									"value": "Job posting",
									"disabled": true
								},
								{
									"key": "SentOn",
									"value": "",
									"disabled": true
								},
								{
									"key": "Type",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Notice record is deleted\", function () {",
									"",
									"    var expectedValue = true;",
									"    ",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
									"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
									"",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/{{NOTIFICATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								"{{NOTIFICATION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "First notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"You can now generate datasets using JSON and import them into other schemas using the Dataset Column type.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"All Recipes – Welcome Content\",\r\n    \"Body\": \"AllRecipes encourages new subscribers to browse their ever-growing collection of recipes. Their aim is to guide their subscriber to content that will arouse their interest. Their welcome message will vary based on what’s currently trending on their site.\",\r\n    \"SentOn\": \"11/14/2022\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/All-Recipes-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Second notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Added support for InfluxDB\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Delight them with real-time updates\",\r\n    \"Body\": \"Be it subscribing to exclusive content or getting users into your email subscription list, leverage push notifications to lure them into subscribing.\",\r\n    \"SentOn\": \"10/06/2021\",\r\n    \"ImageUrl\": \"https://images.unsplash.com/photo-1667420420282-ad2653e2b20b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1266&q=80\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Third notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Added the ability to import fields from a JSON schema or example JSON object.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Diyanu – Recurring Discounts\",\r\n    \"Body\": \"A recurring discount is a great way to encourage repeat purchases. Their customers will come back regularly to browse their catalog of new fashion wares with the discount in mind.\",\r\n    \"SentOn\": \"6/19/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Diyanu-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Fourth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"You can now create a dataset directly from a schema. You no longer need to download and reupload generated data to create a dataset!\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Backpacker – Brand Introduction\",\r\n    \"Body\": \"Backpacker welcome message includes a unique personal story. Backpacker introduces its founder in its push message and directs new subscribers to a longer blog post that covers the history of their brand.\",\r\n    \"SentOn\": \"5/22/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Backpacker-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Fifth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"You can now stream data to an MQTT endpoint! Click More > Stream to MQTT Endpoint... to get started.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Shein – Welcome Tour\",\r\n    \"Body\": \"Shein welcomes new subscribers by showcasing its latest fashion collection. Two CTAs encourage subscribers to shop for either clothing or accessories. What makes this notification stand out is its timeliness. New subscribers often have strong buying intent, so bringing your latest offers to their attention is a great way to boost conversions when interest is at its highest.\",\r\n    \"SentOn\": \"5/19/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Shein-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Sixth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Added types related to construction work\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Hearst – Newsletter Sign Up\",\r\n    \"Body\": \"Offer free access to gated content through a push notification to steer your audience towards your newsletter or social media pages.\",\r\n    \"SentOn\": \"5/19/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Hearst-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Seventh notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Added Etherium and Tezos types.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Snow Joe – Price Drop\",\r\n    \"Body\": \"Snow Joe uses push notifications to inform their customers of major price drops whenever they run a clearance sale.\",\r\n    \"SentOn\": \"5/3/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Snow-Joe-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Eighth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Added a download button to the preview dialog.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"tentree – Cross Promotion\",\r\n    \"Body\": \"Tentree took advantage of their successful Kickstarter campaign to effectively cross-promote their eco backpack lineup. Retarget customers that have already shown interest in your product to increase average customer spend (AVS).\",\r\n    \"SentOn\": \"4/10/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/tentree-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Ninth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"You can now use regular expressions to generate data in formulas. For example /d+{2}/.gen\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Cutting Board – Ebook Giveaway\",\r\n    \"Body\": \"Cutting Board offered their subscribers a free ebook in a push message – as part of a larger drip campaign. Strengthen customer loyalty with high-quality content that you know your customers will appreciate.\",\r\n    \"SentOn\": \"4/4/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Cutting-Board-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Tenth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Restored the ability to backup your schemas to files.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Restored the ability to backup your schemas to files.\",\r\n    \"Body\": \"FabAlley – Reward Program - This is an excellent example of a push event triggered based on individual data points. Create your own customer loyalty program to encourage shoppers to spend more regularly.\",\r\n    \"SentOn\": \"4/2/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Fab-Alley-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Eleventh notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Massive UI Update! The UI has been overhauled to provide a faster, prettier experience.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Mid-Day Massive UI Update!\",\r\n    \"Body\": \"The UI has been overhauled to provide a faster, prettier experience.\",\r\n    \"SentOn\": \"3/23/2021\",\r\n    \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Mid-Day-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Twelfth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"Added normal_dist(mean, std_dev, decimals) formula function.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Fox News – Complete Purchase Reminder\",\r\n    \"Body\": \"Fox News gently reminds its customers to complete their news subscription purchase with personalized push notifications.\",\r\n    \"SentOn\": \"6/18/2020\",\r\n   \"ImageUrl\": \"https://www.sendinblue.com/wp-content/uploads/2022/04/Fox-News-Push-Message.png\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Thirteenth notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.Notification.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New notification is created\", function () {\r",
									"\r",
									"    var expectedTitle =  \"You can now limit credit card numbers by card type and country.\";\r",
									"    \r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Notification');\r",
									"    pm.expect(jsonRes.Data.Notification).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Notification).to.have.property('Title');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.Notification.Title).equals(expectedTitle);\r",
									" \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Title\": \"Glow & Lovely – Account Creation\",\r\n    \"Body\": \"You can now limit credit card numbers by card type and country.\",\r\n    \"SentOn\": \"3/28/2021\",\r\n    \"ImageUrl\": \"https://picsum.photos/200\",\r\n    \"Type\": \"General\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/general/notifications/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"general",
								"notifications",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Linkages",
			"item": [
				{
					"name": "Notice",
					"item": [
						{
							"name": "Add notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ID\", jsonRes.Data.Notice.id);\r",
											"    pm.environment.set(\"ACTION\", jsonRes.Data.Notice.Action);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Job posting\";\r",
											"    var expectedDaysActive = 7;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Platform engineer\",\r\n    \"Description\": \"Firstly you will have to check for what violation you’ve received the show cause notice. If you really failed to conduct an AGM according to the timeline provided, your reply should contain acceptance of non-compliance and prayer for imposing low penalty due to the small size of the company. There shall be no loss to the shareholders and the general public, no repetitive nature of non-compliance etc. etc.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service\",\r\n    \"PostDate\": \"2022-08-03\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://www.complybook.com/images/blogs/original/1667016702Import%20of%20Milk%20and%20Milk%20Products.jpg\",\r\n    \"Action\": \"Apply for job\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add second notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ID\", jsonRes.Data.Notice.id);\r",
											"    pm.environment.set(\"ACTION\", jsonRes.Data.Notice.Action);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Job posting\";\r",
											"    var expectedDaysActive = 7;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Engineering Director\",\r\n    \"Description\": \"Long-term accommodation booking platform for students (think booking.com for student housing). Amber helps 80M+ students worldwide, find and book full-time accommodations near their universities, without the hassle of negotiation, non-standardized and cumbersome paperwork, and broken payment process. We are the largest and fastest-growing student housing platform globally, with 1M+ units listed in 6 countries and across 100+ cities. We are growing rapidly and targeting $500M in annual gross bookings value by 2022.\",\r\n    \"PostDate\": \"2022-11-03\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://ncdirindia.org/Theme/Images/job_openings.png\",\r\n    \"Action\": \"Apply for job\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add third notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ID\", jsonRes.Data.Notice.id);\r",
											"    pm.environment.set(\"ACTION\", jsonRes.Data.Notice.Action);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Job posting\";\r",
											"    var expectedDaysActive = 7;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Engineering Manager\",\r\n    \"Description\": \"An Engineering Manager at SaaS Labs would drive the delivery of new features and improve efficiency. In this role, you will manage teams of engineers, focusing on their career growth, mentoring, and education. You will work closely with the leadership team and product team to prioritize the overall development roadmap.\",\r\n    \"PostDate\": \"2022-11-06\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://cdn.shrm.org/image/upload/c_crop%2Ch_397%2Cw_706%2Cx_0%2Cy_0/c_fit%2Cf_auto%2Cq_auto%2Cw_767/v1/Benefits/iStock-896799196_jbtcxy?databtoa=eyIxNng5Ijp7IngiOjAsInkiOjAsIngyIjo3MDYsInkyIjozOTcsInciOjcwNiwiaCI6Mzk3fX0%3D\",\r\n    \"Action\": \"Apply for job\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add fourth notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ID\", jsonRes.Data.Notice.id);\r",
											"    pm.environment.set(\"ACTION\", jsonRes.Data.Notice.Action);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Job posting\";\r",
											"    var expectedDaysActive = 7;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Senior Manager, Software Development\",\r\n    \"Description\": \"As a Senior Engineering Manager at Shipbob you will be primarily responsible for the delivery of production level software from your teams. You will work very closely with Product Owners, QA and the Director of Engineering/VP of Engineering/Distinguished Engineer.\",\r\n    \"PostDate\": \"2022-11-06\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://previews.123rf.com/images/arcady31/arcady311511/arcady31151100064/48082640-job-openings-sticker.jpg\",\r\n    \"Action\": \"Apply for job\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add fifth notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ID\", jsonRes.Data.Notice.id);\r",
											"    pm.environment.set(\"ACTION\", jsonRes.Data.Notice.Action);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Job posting\";\r",
											"    var expectedDaysActive = 7;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Head of Engineering\",\r\n    \"Description\": \"Systematic Ventures uses machine learning and AI to let clients see deeper into private markets. Our powerful analytics engine delivers proprietary forecasts on companies and deep analysis on industries and investors. We create tools that bring transparency and level the playing field for great companies and committed investors.\",\r\n    \"PostDate\": \"2022-11-07\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://images.moneycontrol.com/static-mcnews/2017/05/jobs_hiring_1280.jpg?impolicy=website\",\r\n    \"Action\": \"Apply for job\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get notice by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Notice record is returned\", function () {",
											"",
											"    var expectedTitle =  \"Job posting\";",
											"    var expectedDaysActive = 7;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');",
											"    ",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/notices/{{NOTICE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										"{{NOTICE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update notice by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated notice record is returned\", function () {",
											"",
											"    var expectedTitle =  \"Job posting\";",
											"    var expectedDaysActive = 7;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');",
											"    ",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Title\": \"Job Apply\",\n    \"Description\": \"As per Section 96 of the Companies Act, 2013: Every company other than a One Person Company shall in each year hold in addition to any other meetings, a general meeting as its annual general meeting and shall specify the meeting as such in the notices calling it, and not more than 15 months shall elapse between the date of one annual general meeting of a company and that of the next. Provided that in case of the first annual general meeting, it shall be held within a period of 9 months from the date of closing of the first financial year of the company and in any other case, within a period of 6 months, from the date of closing of the financial year. Now, there are following 2 probabilities for getting a notice for violation of Section 96\",\n    \"Link\": \"https://amritmahotsav.nic.in/\",\n    \"PostDate\": \"2022-08-03\",\n    \"DaysActive\": 7,\n    \"Tags\": [\"Popular\", \"Hot\"],\n    \"IsActive\": false,\n    \"ImageUrl\": \"https://www.complybook.com/images/blogs/original/1584935885ReplyToShowCauseNoticeReceivedMCAComplianceManagementSystem.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/{{NOTICE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"{{NOTICE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search notices",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of notice records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('NoticeRecords');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/notices/search?pageIndex=0&itemsPerPage=40",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										"search"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "40"
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Job posting",
											"disabled": true
										},
										{
											"key": "link",
											"value": "",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "HotNews",
											"description": "\"",
											"disabled": true
										},
										{
											"key": "postDate",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Notice record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/notices/{{NOTICE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										"{{NOTICE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notice Action",
					"item": [
						{
							"name": "Take action over notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ACTION_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Notice action performed successfully!\", function () {\r",
											"\r",
											"    var expectedAction =  \"Job posting\";\r",
											"    var expectedActionTakenAt = \"2022-08-04\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('NoticeAction');\r",
											"    pm.expect(jsonRes.Data.NoticeAction).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('Action');\r",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('ActionTakenAt');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.NoticeAction.Action).equals(expectedAction);\r",
											"    pm.expect(jsonRes.Data.NoticeAction.ActionTakenAt).equals(expectedActionTakenAt);    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"NoticeId\": \"{{NOTICE_ID}}\",\r\n    \"Contents\": [\r\n        {\r\n            \"Title\":\"Attachment\",\r\n            \"ResourceId\": \"{{FILE_RESOURCE_ID}}\"\r\n        }\r\n    ],\r\n    \"Action\": \"{{ACTION}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/{{NOTICE_ID}}/users/{{PATIENT_USER_ID}}/take-action",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										"{{NOTICE_ID}}",
										"users",
										"{{PATIENT_USER_ID}}",
										"take-action"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get notice action for the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Notice action record is returned\", function () {",
											"",
											"    var expectedAction =  \"Job posting\";",
											"    var expectedActionTakenAt = \"2022-08-04\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('NoticeAction');",
											"    pm.expect(jsonRes.Data.NoticeAction).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('Action');",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('ActionTakenAt');",
											"    ",
											"    pm.expect(jsonRes.Data.NoticeAction.Action).equals(expectedAction);",
											"    pm.expect(jsonRes.Data.NoticeAction.ActionTakenAt).equals(expectedActionTakenAt);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/general/notices/{{NOTICE_ID}}/users/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"{{NOTICE_ID}}",
										"users",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all user actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Notice action record is returned\", function () {",
											"",
											"    var expectedAction =  \"Job posting\";",
											"    var expectedActionTakenAt = \"2022-08-04\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('NoticeAction');",
											"    pm.expect(jsonRes.Data.NoticeAction).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('Action');",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('ActionTakenAt');",
											"    ",
											"    pm.expect(jsonRes.Data.NoticeAction.Action).equals(expectedAction);",
											"    pm.expect(jsonRes.Data.NoticeAction.ActionTakenAt).equals(expectedActionTakenAt);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/general/notices/users/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"users",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Linkages",
					"item": [
						{
							"name": "First linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"FIRST_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Associate-Finance Processes and Operations\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Associate-Finance Processes and Operations\",\r\n    \"Description\": \"In this role, you are required to solve routine problems, largely through precedent and referral to general guidelines\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\",\r\n    \"Action\":\"Apply for job\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Second linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"SECOND_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"New Associate-Procure to Pay Processing\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"New Associate-Procure to Pay Processing\",\r\n    \"Description\": \"In this role, you are required to solve routine problems, largely through precedent and referral to general guidelines\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Third linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"THIRD_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"New Associate-Procure to Pay Processing\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"New Associate-Procure to Pay Processing\",\r\n    \"Description\": \"You will be aligned with our Finance Operations vertical and will be helping us in determining financial outcomes by collecting operational data/reports, whilst conducting analysis and reconciling transactions.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fourth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"FOURTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"QA Analyst\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"QA Analyst\",\r\n    \"Description\": \"Demonstrate extensive knowledge of quality assurance, testing and software development processes and methodologies.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fifth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"FIFTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Front Desk Receptionist\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Front Desk Receptionist\",\r\n    \"Description\": \"Promptly, professionally and courteously receives and assesses all the incoming telephone calls /inquiries and re-directs the said call or message to the doctors.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Sixth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"SIXTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Customer Service Associate, International voice process\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Customer Service Associate, International voice process\",\r\n    \"Description\": \"An Amazon Customer Service Associate is a critical part of our mission to deliver timely, accurate and professional customer service to all Amazon customers.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Seventh linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"SEVENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"HR & Admin Executive\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"HR & Admin Executive\",\r\n    \"Description\": \"We are looking for self-starting, dynamic and a person with excellent English communication skills (Written & Verbal).\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Eighth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"EIGHTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Graphic Designer Fresher\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Graphic Designer Fresher\",\r\n    \"Description\": \"Working to briefs, you will need to demonstrate clear brand understanding and deliverconsistent, quality artwork that is on-brand for social media and emailers,website, app digitalcreatives design and web banners.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Ninth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NINTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Finance Executive\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Finance Executive\",\r\n    \"Description\": \"Handling daily end-to-end accounting.Ensure Timely bank payments & Bank Reconciliation\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"TENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Analyst_Chargeback\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Analyst_Chargeback\",\r\n    \"Description\": \"IntegriChain is the data and application backbone for market access departments of Life Sciences manufacturers\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n   \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Eleventh linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"ELEVENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Analyst, Cash Processing/Funds Transfer\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Analyst, Cash Processing/Funds Transfer\",\r\n    \"Description\": \"Cash Processing and Funds Transfer - IC1Monitors client payments, daily cash and wire transactions, and acts as a first line of defense by addressing flags raised by transaction system\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Twelfth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"TWELFTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Graphics Designer\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Graphics Designer\",\r\n    \"Description\": \"Looking for a Creative Persona (Preferably with prior Packaging/E-com UI-UX Experience)\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Thirteenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"THIRTEENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Trainee Purchase Executive\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Trainee Purchase Executive\",\r\n    \"Description\": \"Maintaining Purchase Requisition record in Excel, tracking and reporting Pending Requisition regularly to Purchase manager and Factory manager\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fourteenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"FOURTHEENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Stylist\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Stylist\",\r\n    \"Description\": \"Candidate should analysis requirement and provide solutions\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fifteenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"FIFTEENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Associate Business Analyst\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Associate Business Analyst\",\r\n    \"Description\": \"Be responsible for day-to-day operations of client accounts.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Sixteenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"SIXTEENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"BPO Executive DOMESTIC PROCESS\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"BPO Executive DOMESTIC PROCESS\",\r\n    \"Description\": \"At Beromt, we are passionate about providing every individual with high-end luxury cosmetic products that capture those bold, beautiful looks you love.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Seventeenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"SEVENTEENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"New Associate-Procure to Pay Processing\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"New Associate-Procure to Pay Processing\",\r\n    \"Description\": \"You will be aligned with our Finance Operations vertical and will be helping us in determining financial outcomes by collecting operational data/reports, whilst conducting analysis and reconciling transactions.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Eighteenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"EIGHTEENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Image Editor\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Image Editor\",\r\n    \"Description\": \"A photo editor specialized in product visual edition (packshot, on model, ghost, flatlay, model shots).\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Ninteenth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NINTEENTH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Associate Business Analyst\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Associate Business Analyst\",\r\n    \"Description\": \"Part of Dentsu Group, Dentsu International is a network designed for what’s next, helping clients predict and plan for disruptive future opportunities and create new paths to growth in the sustainable economy.\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Twentieth linkage",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"TWENTIETH_LINKAGE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New linkage is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Graphic Designer Internship\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Graphic Designer Internship\",\r\n    \"Description\": \"Looking for enthusiastic individuals who are interested in working on graphic design and presentation projects for corporates\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-09-20\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\"Popular\", \"HotNews\"],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://picsum.photos/200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"notices",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Chat module",
			"item": [
				{
					"name": "Second user logs in",
					"item": [
						{
							"name": "Register second user with phone and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"OTHER_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PASSWORD\", password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"+91-9970155165\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Second user logs in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"SECOND_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_LOGIN_ROLE_ID\", 2);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"+91-9970155165\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{SECOND_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\",\r\n    \"Address\": {\r\n        \"Type\": \"Official\",\r\n        \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n        \"City\": \"Mumbai\",\r\n        \"Country\": \"India\"\r\n    },\r\n    \"DefaultTimeZone\": \"+05:30\",\r\n    \"CurrentTimeZone\": \"+05:30\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{OTHER_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{OTHER_USER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Third user logs in",
					"item": [
						{
							"name": "Register second user with phone and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"OTHER_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PASSWORD\", password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"+91-9730359993\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Second user logs in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"SECOND_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_LOGIN_ROLE_ID\", 2);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"+91-9970155165\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{SECOND_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\",\r\n    \"Address\": {\r\n        \"Type\": \"Official\",\r\n        \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n        \"City\": \"Mumbai\",\r\n        \"Country\": \"India\"\r\n    },\r\n    \"DefaultTimeZone\": \"+05:30\",\r\n    \"CurrentTimeZone\": \"+05:30\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{OTHER_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{OTHER_USER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/search?name=pea&orderBy=FirstName&order=ascending&pageIndex=0&itemsPerPage=5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "pea",
									"description": "Search by name"
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "FirstName",
									"description": "The name of the parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "5",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Start conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"CONVERSATION_ID\", jsonRes.Data.Conversation.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"InitiatingUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"OtherUserId\": \"{{OTHER_USER_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/start",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"start"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "First user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"Football today?\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Second user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{SECOND_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"काय करता आपण या क्षणाला?\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "First user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"After office. 7pm\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Second user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{SECOND_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"Sounds good. Let's ping everyone. Chat message sent successfully\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation beween these two users - 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/first-user/{{PATIENT_USER_ID}}/second-user/{{OTHER_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"first-user",
								"{{PATIENT_USER_ID}}",
								"second-user",
								"{{OTHER_USER_ID}}"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation beween these two users - 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/first-user/{{OTHER_USER_ID}}/second-user/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"first-user",
								"{{OTHER_USER_ID}}",
								"second-user",
								"{{PATIENT_USER_ID}}"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    const messages = jsonRes.Data.ConversationMessages;\r",
									"    var count = 1;\r",
									"    for (var message of messages) {\r",
									"        pm.environment.set(\"CHAT_MESSAGE_\" + count.toString(), message.id);\r",
									"        count++;\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/messages/{{CHAT_MESSAGE_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"messages",
								"{{CHAT_MESSAGE_1}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Update message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"Let's roll!\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/messages/{{CHAT_MESSAGE_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"messages",
								"{{CHAT_MESSAGE_1}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Delete message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/messages/{{CHAT_MESSAGE_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"messages",
								"{{CHAT_MESSAGE_1}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get recent conversations for first user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/users/{{PATIENT_USER_ID}}/conversations/recent",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"users",
								"{{PATIENT_USER_ID}}",
								"conversations",
								"recent"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get marked/favourite conversations for first user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/users/{{PATIENT_USER_ID}}/conversations/marked",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"users",
								"{{PATIENT_USER_ID}}",
								"conversations",
								"marked"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Left over",
			"item": [
				{
					"name": "Mental health",
					"item": [
						{
							"name": "Create growing up  quiz template",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
											"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New assessment template is created\", function () {",
											"   ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
											"    ",
											"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"KCCQ assessment template\");",
											"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
											"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Custom\");",
											"    ",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Title\": \"Growing up quiz template\",\n    \"Description\": \"\",\n    \"DisplayCode\": \"\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q1_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"    \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1.Which of the following foods would you expect to be cholesterol free?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"nuts\",\r\n            \"Text\": \"Nuts\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"milk\",\r\n            \"Text\": \"Milk\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"Fish\",\r\n            \"Text\": \"Fish\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"crustaceans\",\r\n            \"Text\": \"Crustaceans\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q2_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"    \r",
											"  \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2.What are the different types of bullying found in a school?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Verbal and physical bullying\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Verbal, physical, and social bullying\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Bullying only occurs when there is a physical altercation\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"None of these answers are correct\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q3_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"    \r",
											"     \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3.Select the best situation that describes a bullying incident.\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Punching an 11th grader to show off in front of your friends\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Calling someone a name who talks differently than you\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Creating an online post that threatens someone or harms their social status\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"All of these answers are correct.\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 4\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q4_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"     \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 4.What is the definition of peer pressure?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"letting someone take control over you\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"when someone tries to get you to do something you don't want to do\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"doing what everyone else is doing\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"doing what people say\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 2\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"GROWING_UP_ASSESSMENT_NODE_Q5_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"     \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q4. Puberty is the time when a person changes from a child into _____.\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"a person\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"an adult\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"a woman\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"a man\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 2\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dealing with peer pressure",
					"item": [
						{
							"name": "Create dealing with peer pressure quiz template",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
											"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New assessment template is created\", function () {",
											"   ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
											"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
											"    ",
											"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"KCCQ assessment template\");",
											"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
											"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Custom\");",
											"    ",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Title\": \"Dealing with peer pressure quiz template\",\n    \"Description\": \"\",\n    \"DisplayCode\": \"\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"    \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1.What is the definition of peer pressure?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"letting someone take control over you\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"when someone tries to get you to do something you don't want to do\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"doing what everyone else is doing\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"doing what people say\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 2\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"    \r",
											"  \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2.When you are under pressure you should do?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Stay Calm & Be Confident\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Make Eye-Contact & Repeat NO!\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Leave the situation if your friend persists\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"All of the above\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 4\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"    \r",
											"     \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3.Why do some kids give into peer pressure?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Because they want to be liked, to fit in.\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Because they worry that other kids might make fun of them if they don't go along with the group\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Because they are curious to try something new that others are doing.\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"All of the above\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 4\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"     \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 4.What qualities can help a person to resist negative peer pressure?\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Speed and Coordination\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Self-Confidence & Assertiveness\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"A nice Smile\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Nice Hair\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 3\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add question node- 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
											"   \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
											"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
											"     \r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q4. Puberty is the time when a person changes from a child into _____.\",\r\n    \"Description\": \"\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"a person\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"an adult\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"a woman\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"a man\",\r\n            \"Sequence\": 4\r\n        }\r\n        \r\n    ],\r\n    \"CorrectOption\" : 2\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"assessment-templates",
										"{{ASSESSMENT_TEMPLATE_ID}}",
										"nodes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search assessment templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"List of assessment tempaltes is returned\", function () {",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplateRecords');",
									"    pm.expect(jsonRes.Data.AssessmentTemplateRecords.Items.length).greaterThan(0);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/clinical/assessment-templates/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clinical",
								"assessment-templates",
								"search"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "CreatedAt",
									"disabled": true
								},
								{
									"key": "order",
									"value": "ascending",
									"disabled": true
								},
								{
									"key": "pageIndex",
									"value": "0",
									"disabled": true
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"disabled": true
								},
								{
									"key": "minValue",
									"value": "0",
									"disabled": true
								},
								{
									"key": "maxValue",
									"value": "100",
									"disabled": true
								},
								{
									"key": "title",
									"value": "genera",
									"disabled": true
								},
								{
									"key": "type",
									"value": "Careplan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule a new assessment Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonRes = pm.response.json();",
									"",
									"try {",
									"    pm.environment.set(\"ASSESSMENT_ID\", jsonRes.Data.Assessment.id);",
									"}",
									"catch (error) {",
									"    console.log(error.message);",
									"}",
									"",
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"New assessment is created\", function () {",
									"   ",
									"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
									"    var expectedTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");",
									"",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Assessment');",
									"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
									"    pm.expect(jsonRes.Data.Assessment).to.have.property('id');",
									"    pm.expect(jsonRes.Data.Assessment).to.have.property('Title');",
									"    pm.expect(jsonRes.Data.Assessment).to.have.property('PatientUserId');",
									"    pm.expect(jsonRes.Data.Assessment).to.have.property('AssessmentTemplateId');",
									"    pm.expect(jsonRes.Data.Assessment).to.have.property('Type');",
									"    ",
									"    pm.expect(jsonRes.Data.Assessment.Title).equals(\"A new assessment\");",
									"    pm.expect(jsonRes.Data.Assessment.PatientUserId).equals(expectedPatientUserId);",
									"    pm.expect(jsonRes.Data.Assessment.AssessmentTemplateId).equals(expectedTemplateId);",
									"    ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var today = (new Date()).toISOString().split('T')[0];\r",
									"pm.environment.set(\"TODAY\", today);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Title\": \"A new assessment\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"ScheduledDate\": \"{{TODAY}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/clinical/assessments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clinical",
								"assessments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start assessment Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"try {",
									"    var jsonRes = pm.response.json();",
									"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
									"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
									"}",
									"catch (error) {",
									"    console.log(error.message);",
									"}",
									"",
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Assessment is started\", function () {",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Next');",
									"    pm.expect(jsonRes.Data.Next).to.have.property('id');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/start",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clinical",
								"assessments",
								"{{ASSESSMENT_ID}}",
								"start"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ask-Sneha",
			"item": [
				{
					"name": "Ask query",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authentication",
								"value": "zxcv",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phoneNumber\": \"+91-9970155165\",\r\n    \"type\": \"text\",\r\n    \"message\": \"What is cricket?\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reancare-api-dev.services.reanfoundation.org:443/v1/SNEHA/SNEHA_SUPPORT/zxcv/receive",
							"protocol": "https",
							"host": [
								"reancare-api-dev",
								"services",
								"reanfoundation",
								"org"
							],
							"port": "443",
							"path": [
								"v1",
								"SNEHA",
								"SNEHA_SUPPORT",
								"zxcv",
								"receive"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "News feed",
			"item": [
				{
					"name": "News feeds - Raahi",
					"item": [
						{
							"name": "Add RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ID\", jsonRes.Data.Rssfeed.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Raahi News\",\r\n    \"Description\": \"All news related to Sneha Raahi application\",\r\n    \"Link\": \"https://www.snehamumbai.org/\",\r\n    \"Language\": \"en\",\r\n    \"Copyright\": \"© 2022 SNEH Foundation\",\r\n    \"Favicon\": \"https://www.snehamumbai.org/wp-content/themes/sneha/img/logo.png\",\r\n    \"Category\": \"News\",\r\n    \"Image\": \"https://www.snehamumbai.org/wp-content/themes/sneha/img/logo.png\",\r\n    \"Tags\": [\r\n        \"Raahi\",\r\n        \"Sneha\",\r\n        \"Application\"\r\n    ],\r\n    \"ProviderName\": \"Sneha Foundation\",\r\n    \"ProviderEmail\": \"crisis@snehamumbai.org\",\r\n    \"ProviderLink\": \"https://www.snehamumbai.org/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated course module is returned\", function () {",
											"",
											"    var expectedName = \"Maths\";",
											"    var expectedDurationInMins = 45;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModule');",
											"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');",
											"    ",
											"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);",
											"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Maths\",\n    \"Description\": \"Learning course\",\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\n    \"DurationInMins\": 45\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Rss feeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of course modules is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModules');",
											"    pm.expect(jsonRes.Data.CourseModules.Items.length).greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/search",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"search"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "Name",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "title",
											"value": "raahi",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ITEM_ID\", jsonRes.Data.RssfeedItem.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FeedId\": \"{{RSS_FEED_ID}}\",\r\n    \"Title\": \"Sneha Raahi 1.0 Beta released to dev\",\r\n    \"Description\": \"Release of Sneha Raahi web application version 1.0 Beta released to dev.\",\r\n    \"Content\": \"First version of Sneha Raahi web application released to dev.\",\r\n    \"Link\": \"https://www.snehamumbai.org/media/\",\r\n    \"Image\": \"https://www.jbcnschool.edu.in/wp-content/uploads/2019/12/field-trip-nehru-science-dec-19-006.jpg\",\r\n    \"AuthorName\": \"Sneha Foundation\",\r\n    \"AuthorEmail\": \"crisis@snehamumbai.org\",\r\n    \"AuthorLink\": \"https://www.snehamumbai.org/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ITEM_ID\", jsonRes.Data.Rssfeed.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items/{{RSS_FEED_ITEM_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items",
										"{{RSS_FEED_ITEM_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ITEM_ID\", jsonRes.Data.Rssfeed.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Content\": \"Our intervention on early childhood development (ECD) addresses various developmental domains.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items/{{RSS_FEED_ITEM_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items",
										"{{RSS_FEED_ITEM_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items/{{RSS_FEED_ITEM_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items",
										"{{RSS_FEED_ITEM_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get atom feed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}/atom",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}",
										"atom"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get rss feed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}/rss",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}",
										"rss"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get json feed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}/json",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}",
										"json"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "News feeds - Community",
					"item": [
						{
							"name": "Add RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ID\", jsonRes.Data.Rssfeed.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Community News\",\r\n    \"Description\": \"All news related to Sneha Community\",\r\n    \"Link\": \"https://www.snehamumbai.org/\",\r\n    \"Language\": \"en\",\r\n    \"Copyright\": \"© 2022 SNEH Foundation\",\r\n    \"Favicon\": \"https://www.snehamumbai.org/wp-content/themes/sneha/img/logo.png\",\r\n    \"Category\": \"News\",\r\n    \"Image\": \"https://www.snehamumbai.org/wp-content/themes/sneha/img/logo.png\",\r\n    \"Tags\": [\r\n        \"Raahi\",\r\n        \"Sneha\",\r\n        \"Community\"\r\n    ],\r\n    \"ProviderName\": \"Sneha Foundation\",\r\n    \"ProviderEmail\": \"crisis@snehamumbai.org\",\r\n    \"ProviderLink\": \"https://www.snehamumbai.org/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated course module is returned\", function () {",
											"",
											"    var expectedName = \"Maths\";",
											"    var expectedDurationInMins = 45;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModule');",
											"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');",
											"    ",
											"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);",
											"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Maths\",\n    \"Description\": \"Learning course\",\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\n    \"DurationInMins\": 45\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Rss feeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of course modules is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModules');",
											"    pm.expect(jsonRes.Data.CourseModules.Items.length).greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/search",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"search"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "Name",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "title",
											"value": "raahi",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RSS feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ITEM_ID\", jsonRes.Data.RssfeedItem.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FeedId\": \"{{RSS_FEED_ID}}\",\r\n    \"Title\": \"Field trip to Nehru Science Centre\",\r\n    \"Description\": \"Learning visits has always been a key strategy in EHSAS to build assets, agency and self-awareness in young people. On the 24th of September, 2022, 43 young people from all three sites of Dharavi, Kandivali and Kalwa visited the Nehru Science Center.\",\r\n    \"Content\": \"Our intervention on early childhood development (ECD) addresses various developmental domains such as expressive and receptive languages, gross and fine movements, relating, play and self-help activities of children from birth to three years of age to enable them to reach their full potential.\",\r\n    \"Link\": \"https://www.snehamumbai.org/media/\",\r\n    \"Image\": \"https://www.jbcnschool.edu.in/wp-content/uploads/2019/12/field-trip-nehru-science-dec-19-006.jpg\",\r\n    \"AuthorName\": \"Sneha Foundation\",\r\n    \"AuthorEmail\": \"crisis@snehamumbai.org\",\r\n    \"AuthorLink\": \"https://www.snehamumbai.org/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ITEM_ID\", jsonRes.Data.Rssfeed.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items/{{RSS_FEED_ITEM_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items",
										"{{RSS_FEED_ITEM_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ITEM_ID\", jsonRes.Data.Rssfeed.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Content\": \"Our intervention on early childhood development (ECD) addresses various developmental domains.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items/{{RSS_FEED_ITEM_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items",
										"{{RSS_FEED_ITEM_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items/{{RSS_FEED_ITEM_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items",
										"{{RSS_FEED_ITEM_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add another feed item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"RSS_FEED_ITEM_ID\", jsonRes.Data.RssfeedItem.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FeedId\": \"{{RSS_FEED_ID}}\",\r\n    \"Title\": \"Over 83 per cent of toddlers eat unhealthy food in Mumbai slums, reveals survey\",\r\n    \"Description\": \"High prices of fruits and vegetables, and parents not having enough time to feed their children, results in the consumption of easily available, low-cost unhealthy foods such as wafers, vada pav, fried food, Chinese bhel, toast, butter, khari and instant noodles among kids\",\r\n    \"Content\": \"A survey released last week by SNEHA, a non-profit working in the field of malnourishment across the slums of Mumbai, shows over 83 per cent of infants, aged six months to 23 months, in these areas are consuming unhealthy, low-cost food. \",\r\n    \"Link\": \"https://www.snehamumbai.org/media/\",\r\n    \"Image\": \"https://images.mid-day.com/images/images/2022/apr/April%2012-junk_e.jpg\",\r\n    \"AuthorName\": \"Sneha Foundation\",\r\n    \"AuthorEmail\": \"crisis@snehamumbai.org\",\r\n    \"AuthorLink\": \"https://www.snehamumbai.org/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/feed-items",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"feed-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get atom feed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}/atom",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}",
										"atom"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get rss feed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}/rss",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}",
										"rss"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get json feed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/rss-feeds/{{RSS_FEED_ID}}/json",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"rss-feeds",
										"{{RSS_FEED_ID}}",
										"json"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}