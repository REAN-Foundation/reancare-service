meta {
  name: Add custom task for survey
  type: http
  seq: 2
}

post {
  url: {{BASE_URL}}/custom-tasks
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "UserId": "{{PATIENT_USER_ID}}",
      "Task": "Take a walk",
      "Description": "Take a walk 30 min. in morning",
      "Category": "Exercise",
      "Details": {
          "ExerciseType": "Brisk walk",
          "IntensityLevel": "Moderate"
      },
      "ScheduledStartTime": "2025-07-01",
      "IsRecurrent": false
  }
}

tests {
  var jsonRes = res.getBody();
  
  try {
      bru.setEnvVar("CUSTOM_TASK_ID", jsonRes.Data.UserTask.Action.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New custom task is created", function () {
  
      var userId = bru.getEnvVar("PATIENT_USER_ID");
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.not.be.null;
      expect(jsonRes.Data).to.have.property('UserTask');
      expect(jsonRes.Data.UserTask).to.have.property('Action');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Task');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Description');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Category');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Details');
      expect(jsonRes.Data.UserTask.Action).to.have.property('ScheduledStartTime');
  
      expect(jsonRes.Data.UserTask.Action.UserId).equals(userId);
      expect(jsonRes.Data.UserTask.Action.Task).equals("Take a walk");
      expect(jsonRes.Data.UserTask.Action.Description).equals("Take a walk 30 min. in morning");
  });
  
}

docs {
  Create new Goal record
}
