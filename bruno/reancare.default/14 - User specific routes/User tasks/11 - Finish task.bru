meta {
  name: Finish task
  type: http
  seq: 10
}

put {
  url: {{BASE_URL}}/user-tasks/{{USER_TASK_ID}}/finish
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

script:pre-request {
  bru.setEnvVar("USER_TASK_FINISHED", true);
}

tests {
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("User Task is finished", function () {
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('UserTask');
      expect(jsonRes.Data.UserTask).to.not.be.empty;
      expect(jsonRes.Data.UserTask).to.have.property("id");
      expect(jsonRes.Data.UserTask).to.have.property("DisplayId");
      expect(jsonRes.Data.UserTask).to.have.property("UserId");
      expect(jsonRes.Data.UserTask).to.have.property("Task");
      expect(jsonRes.Data.UserTask).to.have.property("ActionType");
      expect(jsonRes.Data.UserTask).to.have.property("ActionId");
      expect(jsonRes.Data.UserTask).to.have.property("ScheduledStartTime");
      expect(jsonRes.Data.UserTask).to.have.property("ScheduledEndTime");
      expect(jsonRes.Data.UserTask).to.have.property("Status");
      expect(jsonRes.Data.UserTask).to.have.property("IsRecurrent");
  
      expect(jsonRes.Data.UserTask.Status).eqls("Completed");
      expect(jsonRes.Data.UserTask.Finished).eqls(true);
  
  });
  
}

docs {
  Finishes User Task record with id
}
