meta {
  name: Get by id
  type: http
  seq: 2
}

get {
  url: {{BASE_URL}}/clinical/maternity/maternity-deliveries/{{DELIVERY_ID}}/complications/{{COMPLICATION_ID}}
  body: none
  auth: none
}

headers {
  Authorization: Bearer {{ADMIN_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

tests {
  try {
  
      var jsonData = res.getBody();
      var id = jsonData.Data.Complication.id;
      bru.setEnvVar("COMPLICATION_ID", id);
  
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Complication record retrieved successfully", function () {
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('Complication');
      
      expect(jsonRes.Data.Complication).to.have.property('id');
      expect(jsonRes.Data.Complication).to.have.property('DeliveryId');
      expect(jsonRes.Data.Complication).to.have.property('BabyId1');
      expect(jsonRes.Data.Complication).to.have.property('BabyId2');
      expect(jsonRes.Data.Complication).to.have.property('BabyId3');
      expect(jsonRes.Data.Complication).to.have.property('Name');
      expect(jsonRes.Data.Complication).to.have.property('Status');
      expect(jsonRes.Data.Complication).to.have.property('Severity');
      expect(jsonRes.Data.Complication).to.have.property('MedicalConditionId');
  });
  
}
