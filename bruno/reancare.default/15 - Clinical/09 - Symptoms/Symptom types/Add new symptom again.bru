meta {
  name: Add new symptom again
  type: http
  seq: 6
}

post {
  url: {{BASE_URL}}/clinical/symptom-types
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  authorization: Bearer {{DOCTOR_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
}

body:json {
  {
      "Symptom": "Headache",
      "Description": "Severe to moderate headache",
      "Tags": [
          "Stroke",
          "Migrain"
      ],
      "Language": "en-US",
      "ImageResourceId": "92313a9e-0eb0-46fa-ac24-c137f28c33d4"
  }
}

tests {
  try {
      var jsonRes = res.getBody();
      var id = jsonRes.Data.SymptomType.id;
      bru.setEnvVar("SYMPTOM_TYPE_ID", id);
      bru.setEnvVar("SYMPTOM_TYPE_HEADACHE_ID", id);
      console.log(id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New body height biometrice is created", function () {
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('SymptomType');
      expect(jsonRes.Data.SymptomType).to.have.property('id');
      expect(jsonRes.Data.SymptomType).to.have.property('Symptom');
      expect(jsonRes.Data.SymptomType).to.have.property('Description');
      expect(jsonRes.Data.SymptomType).to.have.property('Tags');
      expect(jsonRes.Data.SymptomType).to.have.property('Language');
      expect(jsonRes.Data.SymptomType).to.have.property('ImageResourceId');
  
      expect(jsonRes.Data.SymptomType.Symptom).equals("Headache");
      expect(jsonRes.Data.SymptomType.Description).equals("Severe to moderate headache");
      expect(jsonRes.Data.SymptomType.Language).equals("en-US");
      expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(0);
  });
  
  
}

docs {
  Create a new drug order (medication list) for a patient for the visit.
}
