# This workflow will trigger pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: Dev-CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the develop branch
  push:
    branches: [develop]
  pull_request:
    branches:
      - develop
  workflow_dispatch:

jobs:
  CodeScan-ESLint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: /
          JAVASCRIPT_ES_CONFIG_FILE: .eslintrc.json
          # VALIDATE_JAVASCRIPT_ES: true
          # VALIDATE_JAVASCRIPT_STANDARD: true
          # VALIDATE_MARKDOWN: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_TYPESCRIPT_STANDARD: true

  # Deploy-ECS:
  #   environment: dev
  #   runs-on: ubuntu-latest

  #   steps:
  #     # - name: Set the dev environment variables
  #     #   run: |
  #     #       echo "TASK_DEFINTION_NAME=duploservices-dev-health-guru-bot" >> $GITHUB_ENV
  #     #       echo "DUPLO_ID=1b25fb90-59d2-4a35-8d69-98e604e7206d" >> $GITHUB_ENV
  #     #       echo "SERVICE_NAME=guru-bot" >> $GITHUB_ENV

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Declare some variables
  #       id: vars
  #       shell: bash
  #       run: |
  #         echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed "s/\\//-/g")"
  #         echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
  #         echo "::set-output name=repo_name::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')"

  #     - name: Another step
  #       run: |
  #         echo "Branch: ${{ steps.vars.outputs.branch }}"
  #         echo "Sha: ${{ steps.vars.outputs.sha_short }}"
  #         echo "Repo: ${{ steps.vars.outputs.repo_name }}"


  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-

  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ./
  #         file: ./Dockerfile
  #         builder: ${{ steps.buildx.outputs.name }}
  #         push: true
  #         tags: reancare/services:${{ steps.vars.outputs.branch }}_${{ steps.vars.outputs.sha_short }}
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache

  #     - name: Image digest
  #       run: echo ${{ steps.docker_build.outputs.digest }}

  #     - name: Download task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINTION_NAME }} \
  #         --query taskDefinition > task-definition.json

  #     - name: New image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: default
  #         image: reancare/services:${{ steps.vars.outputs.branch }}_${{ steps.vars.outputs.sha_short }}

  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         wait-for-service-stability: true

  #     - name: Task Definition Variable
  #       id: taskdefintionvar
  #       shell: bash
  #       run: |
  #         echo "::set-output name=task_definition_arn::$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINTION_NAME }} | jq '.[] | .taskDefinitionArn')"

  #     - name: Task Defintion ARN
  #       run: |
  #         echo "Task Defintion: ${{ steps.taskdefintionvar.outputs.task_definition_arn }}"

  #     - name: Deploy Amazon ECS task definition using Duplo API
  #       uses: fjogeleit/http-request-action@master
  #       with:
  #         url: 'https://reanfoundation.duplocloud.net/subscriptions/${{ secrets.DUPLO_ID }}/UpdateEcsService'
  #         method: 'POST'
  #         data: '{"TaskDefinition":${{ steps.taskdefintionvar.outputs.task_definition_arn }},"Name": "${{ secrets.SERVICE_NAME }}","Replicas":1}'
  #         bearerToken: ${{ secrets.DUPLOCLOUD_TOKEN }}