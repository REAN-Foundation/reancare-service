meta {
  name: Get med summary for day
  type: http
  seq: 5
}

get {
  url: {{BASE_URL}}/clinical/medication-consumptions/summary-for-day/{{PATIENT_USER_ID}}/{{MEDICATION_CONSUMPTION_FOR_DATE}}?groupByDrug=true
  body: none
  auth: none
}

params:query {
  groupByDrug: true
  ~date: 2021-10-14
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

script:pre-request {
  
  Date.prototype.addDays = function(days) {
      var date = new Date(this.valueOf());
      date.setDate(date.getDate() + days);
      return date;
  }
  
  function formatDate(date) {
      var d = new Date(date),
          month = '' + (d.getMonth() + 1),
          day = '' + d.getDate(),
          year = d.getFullYear();
  
      if (month.length < 2) 
          month = '0' + month;
      if (day.length < 2) 
          day = '0' + day;
  
      return [year, month, day].join('-');
  }
  
  var date = formatDate((new Date()).addDays(4));
  
  bru.setEnvVar("MEDICATION_CONSUMPTION_FOR_DATE", date);
  
}

tests {
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Medication consumption schedule for day is returned", function () {
     
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('MedicationConsumptionSummary');
      expect(jsonRes.Data.MedicationConsumptionSummary).to.not.be.empty;
      expect(jsonRes.Data.MedicationConsumptionSummary).to.have.property('Day');
      expect(jsonRes.Data.MedicationConsumptionSummary).to.have.property('SummaryForDay');    
      expect(jsonRes.Data.MedicationConsumptionSummary.SummaryForDay.length).greaterThan(0);
  
      var firstDrugSummary = jsonRes.Data.MedicationConsumptionSummary.SummaryForDay[0];
  
      expect(firstDrugSummary).to.have.property('Drug');
      expect(firstDrugSummary).to.have.property('SummaryForDrug');
      expect(firstDrugSummary).to.have.property('Schedules');
      expect(firstDrugSummary.Schedules.length).greaterThan(0);
    
  });
  
  
}
