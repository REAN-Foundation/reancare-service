meta {
  name: Get organization by id
  type: http
  seq: 2
}

get {
  url: {{BASE_URL}}/organizations/{{ORGANIZATION_ID}}
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

tests {
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New organization is created", function () {
  
      var expectedType = bru.getEnvVar("ORGANIZATION_TYPE");
      var expectedName = bru.getEnvVar("ORGANIZATION_NAME");
      var expectedContactPhone = bru.getEnvVar("CONTACT_ORGANIZATION_PHONE");
      var expectedContactEmail = bru.getEnvVar("CONTACT_ORGANIZATION_EMAIL");
      var expectedOperationalSince = bru.getEnvVar("ORGANIZATION_OPERATIONAL_SINCE");
      var expectedIsHealthFacility = true;
  
      // var expectedContactUserId = bru.getEnvVar("CONTACT_USER_ID");
      // var expectedNationalRegistryId = null;
      // var expectedParentOrganizationId = bru.getEnvVar("PARENT_ORGANIZATION_ID");
      // var expectedAbout = bru.getEnvVar("ABOUT_ORGANIZATION");
      // var expectedImageResourceId = bru.getEnvVar("ORGANIZATION_IMAGE_RESOURCE_ID");
  
      // console.log(expectedType + '\n');
      // console.log(expectedName + '\n');
      // console.log(expectedContactUserId + '\n');
      // console.log(expectedContactOrganizationPhone + '\n');
      // console.log(expectedContactOrganizationEmail + '\n');
      // console.log(expectedParentOrganizationId + '\n');
      // console.log(expectedAbout + '\n');
      // console.log(expectedOperationalSince + '\n');
      // console.log(expectedImageResourceId + '\n');
      // console.log(expectedIsHealthFacility + '\n');
      // console.log(expectedNationalRegistryId + '\n');
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('Organization');
      expect(jsonRes.Data.Organization).to.not.be.empty;
      expect(jsonRes.Data.Organization).to.have.property('id');
      expect(jsonRes.Data.Organization).to.have.property('Type');
      expect(jsonRes.Data.Organization).to.have.property('Name');
      expect(jsonRes.Data.Organization).to.have.property('ContactEmail');
      expect(jsonRes.Data.Organization).to.have.property('ContactPhone');
      expect(jsonRes.Data.Organization).to.have.property('OperationalSince');
      expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');
  
      var opSince = jsonRes.Data.Organization.OperationalSince;
      if(opSince){
          opSince = opSince.split('T')[0];
      }
  
      expect(jsonRes.Data.Organization.Type).equals(expectedType);
      expect(jsonRes.Data.Organization.Name).equals(expectedName);
      expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);
      expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);
      expect(opSince).equals(expectedOperationalSince);
      expect(jsonRes.Data.Organization.IsHealthFacility).equals(expectedIsHealthFacility);
  
  });
  
  
}

docs {
  Get an address by address id.
}
