meta {
  name: Update course content by id
  type: http
  seq: 3
}

put {
  url: {{BASE_URL}}/educational/course-contents/{{COURSE_CONTENT_ID}}
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{ADMIN_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "Title": "Maths Tutorials",
      "Description": "Learning course",
      "ImageUrl": "https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0",
      "DurationInMins": 45,
      "ContentType":"Text",
      "Sequence": 2
  }
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Updated course module is returned", function () {
  
      var expectedTitle = "Maths Tutorials";
      var expectedDurationInMins = 45;
      var expectedSequence = 2;
      
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('CourseContent');
      expect(jsonRes.Data.CourseContent).to.not.be.empty;
      expect(jsonRes.Data.CourseContent).to.have.property('Title');
      expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');
      expect(jsonRes.Data.CourseContent).to.have.property('Sequence');
      
      
      expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );
      expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);
      expect(jsonRes.Data.CourseContent.Sequence).equals(expectedSequence);
      
  });
  
  
}
