meta {
  name: Add water consumption record
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/wellness/nutrition/water-consumptions
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "PatientUserId": "{{PATIENT_USER_ID}}",
      "Volume": 7,
      "Time": "2021-09-21"
  }
}

tests {
  var jsonRes = res.getBody();
  try {
      bru.setEnvVar("NUTRITION_WATER_CONSUMPTION_ID", jsonRes.Data.WaterConsumption.id);
  }
  catch (error) {
      console.log(error.message);
  }
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  test("New water consumption record is created", function () {
      var expectedValue = 7;
      var expectedTime = "2021-09-21T00:00:00.000Z";
      var expectedPatientUserId = bru.getEnvVar("PATIENT_USER_ID");
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('WaterConsumption');
      expect(jsonRes.Data.WaterConsumption).to.not.be.empty;
      expect(jsonRes.Data.WaterConsumption).to.have.property('id');
      expect(jsonRes.Data.WaterConsumption).to.have.property('Volume');
      expect(jsonRes.Data.WaterConsumption).to.have.property('PatientUserId');
      expect(jsonRes.Data.WaterConsumption).to.have.property('Time');
  
  
      expect(jsonRes.Data.WaterConsumption.Volume).equals(expectedValue);
      expect(jsonRes.Data.WaterConsumption.PatientUserId).equals(expectedPatientUserId);
      expect(jsonRes.Data.WaterConsumption.Time).equals(expectedTime);
  
  });
  
}
