meta {
  name: Get task by display id
  type: http
  seq: 7
}

get {
  url: {{BASE_URL}}/user-tasks/display-id/{{USER_TASK_DISPLAY_ID}}
  body: none
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

tests {
  var jsonRes = res.getBody();
  
  try {
      bru.setEnvVar("USER_TASK_ID", jsonRes.Data.UserTask.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("User Task is created", function () {
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('UserTask');
      expect(jsonRes.Data.UserTask).to.not.be.empty;
      expect(jsonRes.Data.UserTask).to.have.property("id");
      expect(jsonRes.Data.UserTask).to.have.property("DisplayId");
      expect(jsonRes.Data.UserTask).to.have.property("UserId");
      expect(jsonRes.Data.UserTask).to.have.property("Task");
      expect(jsonRes.Data.UserTask).to.have.property("ActionType");
      expect(jsonRes.Data.UserTask).to.have.property("ActionId");
      expect(jsonRes.Data.UserTask).to.have.property("ScheduledStartTime");
      expect(jsonRes.Data.UserTask).to.have.property("ScheduledEndTime");
      expect(jsonRes.Data.UserTask).to.have.property("Status");
      expect(jsonRes.Data.UserTask).to.have.property("IsRecurrent");
  
      expect(jsonRes.Data.UserTask.Task).eqls("Take a dog for walk");
  });
  
}

docs {
  Gets list of User Task records
}
