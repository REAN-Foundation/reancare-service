meta {
  name: Create patient emergency event
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/clinical/emergency-events
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "EhrId":"{{EMERGENCY_EHRID}}",
      "PatientUserId":"{{PATIENT_USER_ID}}",
      "Details":"{{EMERGENCY_DETAILS}}",
      "EmergencyDate":"{{EMERGENCY_DATE}}"
  }
}

script:pre-request {
  
  let patientUserId = bru.getEnvVar('PATIENT_USER_ID');
  bru.setEnvVar("EMERGENCY_EHRID", "EHR-" + Math.floor(Math.random() * 1000000)); // Example EHR ID
  bru.setEnvVar("EMERGENCY_DETAILS", "Allergy reaction and Difficulty breathing");
  bru.setEnvVar("EMERGENCY_DATE", new Date().toISOString());
}

tests {
  var jsonRes = res.getBody();
  
  try {
      bru.setEnvVar("EMERGENCY_EVENT_ID", jsonRes.Data.EmergencyEvent.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New PATIENT EMERGENCY Event record is created", function () {
  
      let expectedEhrId = bru.getEnvVar("EMERGENCY_EHRID");
      let expectedPatientUserId = bru.getEnvVar("EMERGENCY_PATIENTUSERID");
      let expectedDetails = bru.getEnvVar("EMERGENCY_DETAILS");
      let expectedEmergencyDate = bru.getEnvVar("EMERGENCY_DATE");
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('EmergencyEvent');
      expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;
      expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');
      expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');
      expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');
      expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');
  
      expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);
      expect(jsonRes.Data.EmergencyEvent.EmergencyDate).equals(expectedEmergencyDate);
  });
  
  
}

docs {
  Add an emergency event.
}
