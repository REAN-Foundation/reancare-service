meta {
  name: Add Sleep record
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/wellness/daily-records/sleep
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "PatientUserId": "{{PATIENT_USER_ID}}",
      "SleepDuration": "{{SLEEP_DURATION}}",
      "Unit": "{{SLEEP_UNIT}}",
      "RecordDate": "{{SLEEP_RECORDDATE}}"
  }
}

script:pre-request {
  bru.setEnvVar("SLEEP_DURATION", 8);
  bru.setEnvVar("SLEEP_UNIT", 'hrs');
  bru.setEnvVar("SLEEP_RECORDDATE", '2021-09-20');
}

tests {
  var jsonRes = res.getBody();
  
  try {
      bru.setEnvVar("SLEEP_RECORD_ID", jsonRes.Data.SleepRecord.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Sleep record is created", function () {
  
      var expectedPatientUserId = bru.getEnvVar("PATIENT_USER_ID");
      var expectedSleepDuration = bru.getEnvVar("SLEEP_DURATION");
      var expectedUnit = bru.getEnvVar("SLEEP_UNIT");
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('SleepRecord');
      expect(jsonRes.Data.SleepRecord).to.not.be.empty;
      expect(jsonRes.Data.SleepRecord).to.have.property('id');
      expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');
      expect(jsonRes.Data.SleepRecord).to.have.property('Unit');
      expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');
  
      expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);
      expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);
      expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);
  
  });
  
}
