meta {
  name: Create Again
  type: http
  seq: 3
}

post {
  url: {{BASE_URL}}/clinical/maternity/maternity-deliveries/{{DELIVERY_ID}}/babies
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{ADMIN_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "DeliveryId": "{{DELIVERY_ID}}",
      "PatientUserId": "{{PATIENT_USER_ID}}",
      "WeightAtBirthGrams": 3200,
      "Gender": "Male",
      "Status": "Alive",
      "ComplicationId": "{{COMPLICATION_ID}}"
  }
  
}

tests {
  try {
  
      var jsonData = res.getBody();
      var id = jsonData.Data.Baby.id;
      bru.setEnvVar("BABY_ID", id);
  
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("New Baby record is created", function () {
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('Baby');
      
      expect(jsonRes.Data.Baby).to.have.property('id');
      expect(jsonRes.Data.Baby).to.have.property('DeliveryId');
      expect(jsonRes.Data.Baby).to.have.property('PatientUserId');
      expect(jsonRes.Data.Baby).to.have.property('WeightAtBirthGrams');
      expect(jsonRes.Data.Baby).to.have.property('Gender');
      expect(jsonRes.Data.Baby).to.have.property('Status');
      expect(jsonRes.Data.Baby).to.have.property('ComplicationId');
  });
  
}
