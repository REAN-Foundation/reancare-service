meta {
  name: Get custom task
  type: http
  seq: 3
}

get {
  url: {{BASE_URL}}/custom-tasks/{{CUSTOM_TASK_ID}}
  body: none
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

tests {
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Custom task is retrieved", function () {
  
      var userId = bru.getEnvVar("PATIENT_USER_ID");
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.not.be.null;
      expect(jsonRes.Data).to.have.property('UserTask');
      expect(jsonRes.Data.UserTask).to.have.property('Action');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Task');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Description');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Category');
      expect(jsonRes.Data.UserTask.Action).to.have.property('Details');
      expect(jsonRes.Data.UserTask.Action).to.have.property('ScheduledStartTime');
  
      expect(jsonRes.Data.UserTask.Action.UserId).equals(userId);
      expect(jsonRes.Data.UserTask.Action.Task).equals("Take a walk");
      expect(jsonRes.Data.UserTask.Action.Description).equals("Take a walk 30 min. in morning");
  });
  
  
}

docs {
  Gets list of Goal records
}
