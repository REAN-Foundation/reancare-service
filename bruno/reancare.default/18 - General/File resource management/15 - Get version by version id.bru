meta {
  name: Get version by version id
  type: http
  seq: 16
}

get {
  url: {{BASE_URL}}/file-resources/{{RESOURCE_ID}}/versions/{{RESOURCE_VERSION_ID}}
  body: none
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
}

tests {
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("A file resource version is returned", function () {
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('FileResourceVersion');
      var version = jsonRes.Data.FileResourceVersion;
      expect(version).to.have.property('VersionId');
      expect(version).to.have.property('ResourceId');
      expect(version).to.have.property('Version');
      expect(version).to.have.property('FileName');
      expect(version).to.have.property('MimeType');
      expect(version).to.have.property('OriginalName');
      expect(version).to.have.property('Url');
  
  });
}
