{
	"info": {
		"_postman_id": "8ae2cd93-c55c-4f19-8781-69765e3c7b86",
		"name": "reancare.default",
		"description": "This documentation details the default version of the REANCare api.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "service health-check",
			"item": [
				{
					"name": "Health-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}",
							"host": [
								"{{BASE_URL}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "API to check the health of the service."
		},
		{
			"name": "system admin",
			"item": [
				{
					"name": "Admin log-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\",\r\n    \"LoginRoleId\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			],
			"description": "User login with username/phone/email and password.\nIn this example, system admin logs in.\n\nSystem admin can perform multiple admin tasks such as - \n1. Add/remove/update api clients.\n2. Renew the API keys for the api clients.\n3. Perform monitoring and admin tasks through selected set of APIs only accessible to system-admin role."
		},
		{
			"name": "Api clients",
			"item": [
				{
					"name": "Create an API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Tabbu health app\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"+91 8329569676\",\r\n    \"Email\": \"tabbasum.kolhapure@reanfoundation.org\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "Register an API client.\n\nThis API will register a new API client and returns the generated 'client code' and 'api-key'. The API key has finite lifetime. By default, it is 1 year from the date of the registration."
					},
					"response": []
				},
				{
					"name": "Create an API client - with validity period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Excellent Medicos\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"+91 9876543219\",\r\n    \"Email\": \"dev@excell-medicos.com\",\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "Register an API client. This example shows how you can set custom validity period for the API key. This API will register a new API client and returns generated 'client code' and 'api-key'."
					},
					"response": []
				},
				{
					"name": "Get API client by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "Retrieve an API client info by client id."
					},
					"response": []
				},
				{
					"name": "Update API client by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated api client is returned\", function () {\r",
									"\r",
									"    var expectedClientName = pm.environment.get(\"API_CLIENT_NEW_NAME\");\r",
									"    var expectedClientPhone = pm.environment.get(\"API_CLIENT_NEW_PHONE\");\r",
									"    var expectedClientEmail = pm.environment.get(\"API_CLIENT_NEW_EMAIL\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonRes.Data.Client.ClientName).equals(expectedClientName);\r",
									"    pm.expect(jsonRes.Data.Client.Phone).equals(expectedClientPhone);\r",
									"    pm.expect(jsonRes.Data.Client.Email).equals(expectedClientEmail);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"New-Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									"\r",
									"pm.environment.set(\"API_CLIENT_NEW_NAME\", \"My health app - New name\");\r",
									"pm.environment.set(\"API_CLIENT_NEW_PHONE\", \"+91 4444455555\");\r",
									"pm.environment.set(\"API_CLIENT_NEW_EMAIL\", \"new.client.email@client.com\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"{{API_CLIENT_NEW_NAME}}\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"{{API_CLIENT_NEW_PHONE}}\",\r\n    \"Email\": \"{{API_CLIENT_NEW_EMAIL}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "Update an API client info by client id."
					},
					"response": []
				},
				{
					"name": "Get current API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api key is returned\", function () {\r",
									"\r",
									"    var expectedClientCode = pm.environment.get(\"API_CLIENT_CODE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ClientCode).equals(expectedClientCode);\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/current-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"current-api-key"
							]
						},
						"description": "Get the current valid API key for a given client. \n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				},
				{
					"name": "Renew API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New api key is returned\", function () {\r",
									"\r",
									"    var currentApiKey = pm.environment.get(\"API_KEY\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).not.equals(currentApiKey);\r",
									"    \r",
									"    //set the new key to env\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/renew-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"renew-api-key"
							]
						},
						"description": "Renew API key with a given validity period. If not added, the key will be valid for 1 year.\n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				}
			],
			"description": "Management of API clients. \n\nAPI clients may include mobile/web apps, other customized API services such as chat-bot service."
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "Get person-roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
									"    for(var i = 0; i < personRoles.length; i++) {\r",
									"        var r = personRoles[i];\r",
									"        var name = r.RoleName;\r",
									"        var id = r.id;\r",
									"        var str = \"ROLE_\" + name.toUpperCase();\r",
									"        console.log(str);\r",
									"        console.log(id);\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Person roles are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('PersonRoleTypes');\r",
									"    pm.expect(jsonRes.Data.PersonRoleTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.PersonRoleTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/person-roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"person-roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organization types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var organizationTypes = jsonRes.Data.OrganizationTypes;\r",
									"    for(var i = 0; i < organizationTypes.length; i++) {\r",
									"        var r = organizationTypes[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = \"ORGANIZATION_TYPE_\" + name.toUpperCase();\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Organization types are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('OrganizationTypes');\r",
									"    pm.expect(jsonRes.Data.OrganizationTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.OrganizationTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/organizations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get gender types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var genderTypes = jsonRes.Data.GenderTypes;\r",
									"    for(var i = 0; i < genderTypes.length; i++) {\r",
									"        var r = genderTypes[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = \"GENDER_TYPE_\" + name.toUpperCase();\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Gender types are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('GenderTypes');\r",
									"    pm.expect(jsonRes.Data.GenderTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.GenderTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/genders",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"genders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Add an organization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"ORGANIZATION_TYPE\", 'Clinic');\r",
									"pm.environment.set(\"ORGANIZATION_NAME\", 'Shree Clinic');\r",
									"pm.environment.set(\"CONTACT_ORGANIZATION_PHONE\", '+91-1234567890');\r",
									"pm.environment.set(\"CONTACT_ORGANIZATION_EMAIL\", 'xyz@gmail.com');\r",
									"pm.environment.set(\"ABOUT_ORGANIZATION\", 'Shree Gastroenterology & Endoscopy Clinic');\r",
									"pm.environment.set(\"ORGANIZATION_OPERATIONAL_SINCE\", '2017-05-08');\r",
									"pm.environment.set(\"ORGANIZATION_IMAGE_RESOURCE_ID\", '80eb4c8b-f302-4612-9fe9-f832c6eb401f');\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ORGANIZATION_ID\", jsonRes.Data.Organization.id);\r",
									"    pm.environment.set(\"PARENT_ORGANIZATION_ID\", jsonRes.Data.Organization.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New organization is created\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ORGANIZATION_TYPE\");\r",
									"    var expectedName = pm.environment.get(\"ORGANIZATION_NAME\");\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"    var expectedIsHealthFacility = true;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals(expectedName);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(expectedIsHealthFacility);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{ORGANIZATION_TYPE}}\",\r\n    \"Name\": \"{{ORGANIZATION_NAME}}\",\r\n    \"ContactPhone\": \"{{CONTACT_ORGANIZATION_PHONE}}\",\r\n    \"ContactEmail\": \"{{CONTACT_ORGANIZATION_EMAIL}}\",\r\n    \"About\": \"{{ABOUT_ORGANIZATION}}\",\r\n    \"OperationalSince\": \"{{ORGANIZATION_OPERATIONAL_SINCE}}\",\r\n    \"AddressId\": \"{{ADDRESS_ID}}\",\r\n    \"ImageResourceId\": \"80eb4c8b-f302-4612-9fe9-f832c6eb401f\",\r\n    \"IsHealthFacility\": true\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Get organization by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New organization is created\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ORGANIZATION_TYPE\");\r",
									"    var expectedName = pm.environment.get(\"ORGANIZATION_NAME\");\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"    var expectedIsHealthFacility = true;\r",
									"\r",
									"    // var expectedContactUserId = pm.environment.get(\"CONTACT_USER_ID\");\r",
									"    // var expectedNationalRegistryId = null;\r",
									"    // var expectedParentOrganizationId = pm.environment.get(\"PARENT_ORGANIZATION_ID\");\r",
									"    // var expectedAbout = pm.environment.get(\"ABOUT_ORGANIZATION\");\r",
									"    // var expectedImageResourceId = pm.environment.get(\"ORGANIZATION_IMAGE_RESOURCE_ID\");\r",
									"\r",
									"    // console.log(expectedType + '\\n');\r",
									"    // console.log(expectedName + '\\n');\r",
									"    // console.log(expectedContactUserId + '\\n');\r",
									"    // console.log(expectedContactOrganizationPhone + '\\n');\r",
									"    // console.log(expectedContactOrganizationEmail + '\\n');\r",
									"    // console.log(expectedParentOrganizationId + '\\n');\r",
									"    // console.log(expectedAbout + '\\n');\r",
									"    // console.log(expectedOperationalSince + '\\n');\r",
									"    // console.log(expectedImageResourceId + '\\n');\r",
									"    // console.log(expectedIsHealthFacility + '\\n');\r",
									"    // console.log(expectedNationalRegistryId + '\\n');\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals(expectedName);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(expectedIsHealthFacility);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"{{ORGANIZATION_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Update an organization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"ORGANIZATION_NAME\", 'Shree Hospital');\r",
									"pm.environment.get(\"ORGANIZATION_TYPE\", \"Hospital\");\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Organization is updated\", function () {\r",
									"\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals('Hospital');\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals('Shree Hospital');\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(true);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Hospital\",\r\n    \"Name\": \"Shree Hospital\",\r\n    \"About\": \"Shree Hospital is a speciality hospital located on western part of the Pune city specializing in post-trauma care\",\r\n    \"ContactPhone\": \"{{CONTACT_ORGANIZATION_PHONE}}\",\r\n    \"ContactEmail\": \"{{CONTACT_ORGANIZATION_EMAIL}}\",\r\n    \"OperationalSince\": \"{{ORGANIZATION_OPERATIONAL_SINCE}}\",\r\n    \"ImageResourceId\": \"{{ORGANIZATION_IMAGE_RESOURCE_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"{{ORGANIZATION_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Search organizations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of organizations is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organizations');\r",
									"    pm.expect(jsonRes.Data.Organizations.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/search?type=Hospital&name=shr&operationalSinceFrom=1975-01-01&operationalSinceTo=2021-12-12&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=Name&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "Hospital",
									"description": "Search by type of organization"
								},
								{
									"key": "name",
									"value": "shr",
									"description": "Search by organization name"
								},
								{
									"key": "contactPhone",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by contact phone",
									"disabled": true
								},
								{
									"key": "contactEmail",
									"value": "123",
									"description": "Search by contact email",
									"disabled": true
								},
								{
									"key": "operationalSinceFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for operational since date based search"
								},
								{
									"key": "operationalSinceTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for operational since date based search"
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
								},
								{
									"key": "orderBy",
									"value": "Name",
									"description": "The name of the parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Patients",
					"item": [
						{
							"name": "Register patient- with only a phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_1\", jsonRes.Data.Patient.User.Person.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											"pm.environment.set(\"PASSWORD\", password);\r",
											"\r",
											"//Profile images\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text",
										"description": "API key for client app authentication"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								},
								"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
							},
							"response": [
								{
									"name": "Register patient- with only a phone number",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/patients",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "904"
										},
										{
											"key": "ETag",
											"value": "W/\"388-ZkB5OKUvnee2O8d2F/CCLl1RRgQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 02 Aug 2021 07:38:31 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Patient created successfully!\",\n    \"HttpCode\": 201,\n    \"Data\": {\n        \"Patient\": {\n            \"id\": \"d365387c-e297-4a0f-b722-1e7f6a7c33dc\",\n            \"User\": {\n                \"id\": \"32a16f4b-3e65-4353-9297-65308a56d8da\",\n                \"UserName\": \"amseta1420\",\n                \"Person\": {\n                    \"id\": \"6fc754e4-f557-451c-bd8e-cf18e34fa919\",\n                    \"Prefix\": \"\",\n                    \"FirstName\": null,\n                    \"MiddleName\": null,\n                    \"LastName\": null,\n                    \"DisplayName\": \"unknown\",\n                    \"Gender\": \"Unknown\",\n                    \"BirthDate\": null,\n                    \"Age\": \"\",\n                    \"Phone\": \"+91-1423755609\",\n                    \"Email\": null,\n                    \"ImageResourceId\": null,\n                    \"ActiveSince\": \"2021-08-02T07:38:31.000Z\",\n                    \"Roles\": []\n                },\n                \"LastLogin\": null,\n                \"DefaultTimeZone\": \"+05:30\",\n                \"CurrentTimeZone\": \"+05:30\",\n                \"Role\": {\n                    \"id\": 2,\n                    \"RoleName\": \"Patient\"\n                }\n            },\n            \"DisplayId\": \"PT#1-1423755609\",\n            \"Addresses\": [],\n            \"MedicalProfile\": null,\n            \"Insurances\": [],\n            \"EmergencyContacts\": []\n        }\n    },\n    \"Trace\": null,\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\"\n    },\n    \"Context\": \"Patient.Create\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
								}
							]
						},
						{
							"name": "Register patient- with same phone number - should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Response should be failure\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('failure');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register patient- with phone and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_2\", jsonRes.Data.Patient.User.Person.id);\r",
											"\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											"pm.environment.set(\"PASSWORD\", password);\r",
											"\r",
											"//Profile images\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": [
								{
									"name": "Register patient- with phone and password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/patients",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "904"
										},
										{
											"key": "ETag",
											"value": "W/\"388-+QstBHEhnm7bio7FIB8nk3HOmY0\""
										},
										{
											"key": "Date",
											"value": "Mon, 02 Aug 2021 07:48:11 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Patient created successfully!\",\n    \"HttpCode\": 201,\n    \"Data\": {\n        \"Patient\": {\n            \"id\": \"c7e4a0c4-0410-47a4-b40f-e3bca222ac2d\",\n            \"User\": {\n                \"id\": \"f9f2baad-8aac-4055-a8f1-675e86303a3a\",\n                \"UserName\": \"tnkert2002\",\n                \"Person\": {\n                    \"id\": \"0663bf1a-d169-4db5-a087-1c6dc456e4e9\",\n                    \"Prefix\": \"\",\n                    \"FirstName\": null,\n                    \"MiddleName\": null,\n                    \"LastName\": null,\n                    \"DisplayName\": \"unknown\",\n                    \"Gender\": \"Unknown\",\n                    \"BirthDate\": null,\n                    \"Age\": \"\",\n                    \"Phone\": \"+91-8126671387\",\n                    \"Email\": null,\n                    \"ImageResourceId\": null,\n                    \"ActiveSince\": \"2021-08-02T07:48:11.000Z\",\n                    \"Roles\": []\n                },\n                \"LastLogin\": null,\n                \"DefaultTimeZone\": \"+05:30\",\n                \"CurrentTimeZone\": \"+05:30\",\n                \"Role\": {\n                    \"id\": 2,\n                    \"RoleName\": \"Patient\"\n                }\n            },\n            \"DisplayId\": \"PT#1-8126671387\",\n            \"Addresses\": [],\n            \"MedicalProfile\": null,\n            \"Insurances\": [],\n            \"EmergencyContacts\": []\n        }\n    },\n    \"Trace\": null,\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\"\n    },\n    \"Context\": \"Patient.Create\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
								}
							]
						},
						{
							"name": "Patient log-in with password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-password"
									]
								}
							},
							"response": [
								{
									"name": "Patient log-in with password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/users/login-with-password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"users",
												"login-with-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1234"
										},
										{
											"key": "ETag",
											"value": "W/\"4d2-pHha66gNIOAPmG3hY3eezjeWyEQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 02 Aug 2021 07:48:17 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"User 'unknown' logged in successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"AccessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiJmOWYyYmFhZC04YWFjLTQwNTUtYThmMS02NzVlODYzMDNhM2EiLCJEaXNwbGF5TmFtZSI6InVua25vd24iLCJQaG9uZSI6Iis5MS04MTI2NjcxMzg3IiwiRW1haWwiOm51bGwsIlVzZXJOYW1lIjoidG5rZXJ0MjAwMiIsIkN1cnJlbnRSb2xlSWQiOjIsImlhdCI6MTYyNzg5MDQ5NywiZXhwIjoxNjM1NjY2NDk3fQ.n9ps_cuOLSwZcgEkDg59LwkeX9k0YuEcttFKNHFKDz0\",\n        \"User\": {\n            \"id\": \"f9f2baad-8aac-4055-a8f1-675e86303a3a\",\n            \"UserName\": \"tnkert2002\",\n            \"Person\": {\n                \"id\": \"0663bf1a-d169-4db5-a087-1c6dc456e4e9\",\n                \"Prefix\": \"\",\n                \"FirstName\": null,\n                \"MiddleName\": null,\n                \"LastName\": null,\n                \"DisplayName\": \"unknown\",\n                \"Gender\": \"Unknown\",\n                \"BirthDate\": null,\n                \"Age\": \"\",\n                \"Phone\": \"+91-8126671387\",\n                \"Email\": null,\n                \"ImageResourceId\": null,\n                \"ActiveSince\": \"2021-08-02T07:48:11.000Z\",\n                \"Roles\": [\n                    {\n                        \"id\": \"01742aba-5212-430d-9200-6ab492fdca1e\",\n                        \"PersonId\": \"0663bf1a-d169-4db5-a087-1c6dc456e4e9\",\n                        \"RoleId\": 2,\n                        \"RoleName\": \"Patient\"\n                    }\n                ]\n            },\n            \"LastLogin\": null,\n            \"DefaultTimeZone\": \"+05:30\",\n            \"CurrentTimeZone\": \"+05:30\",\n            \"Role\": {\n                \"id\": 2,\n                \"RoleName\": \"Patient\"\n            }\n        }\n    },\n    \"Trace\": null,\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\"\n    },\n    \"Context\": \"User.LoginWithPassword\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
								}
							]
						},
						{
							"name": "Get patient by user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var password = \"Client-Test@123\";\r",
											"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": [
								{
									"name": "Get patient by user id",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients",
												"{{PATIENT_USER_ID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1246"
										},
										{
											"key": "ETag",
											"value": "W/\"4de-vtd/lNY4h4WU1eZaAJBoB38Ssx4\""
										},
										{
											"key": "Date",
											"value": "Mon, 02 Aug 2021 07:46:36 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Patient retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"Patient\": {\n            \"id\": \"e66f8dda-a724-4ebe-b904-bcec548cf782\",\n            \"User\": {\n                \"id\": \"e291b0a2-6bec-4af9-b05f-29f9acefca41\",\n                \"UserName\": \"xvylkb7136\",\n                \"Person\": {\n                    \"id\": \"2ee6a612-cd50-4177-878c-09d4a3472e6c\",\n                    \"Prefix\": \"\",\n                    \"FirstName\": null,\n                    \"MiddleName\": null,\n                    \"LastName\": null,\n                    \"DisplayName\": \"unknown\",\n                    \"Gender\": \"Unknown\",\n                    \"BirthDate\": null,\n                    \"Age\": \"\",\n                    \"Phone\": \"+91-3283072998\",\n                    \"Email\": null,\n                    \"ImageResourceId\": null,\n                    \"ActiveSince\": \"2021-08-02T07:46:29.000Z\",\n                    \"Roles\": [\n                        {\n                            \"id\": \"43329a2b-7f0d-4b61-9a2b-a52412fdd911\",\n                            \"PersonId\": \"2ee6a612-cd50-4177-878c-09d4a3472e6c\",\n                            \"RoleId\": 2,\n                            \"RoleName\": \"Patient\"\n                        }\n                    ]\n                },\n                \"LastLogin\": null,\n                \"DefaultTimeZone\": \"+05:30\",\n                \"CurrentTimeZone\": \"+05:30\",\n                \"Role\": {\n                    \"id\": 2,\n                    \"RoleName\": \"Patient\"\n                }\n            },\n            \"DisplayId\": \"PT#1-3283072998\",\n            \"EhrId\": null,\n            \"Addresses\": [],\n            \"MedicalProfile\": null,\n            \"Insurances\": [],\n            \"EmergencyContacts\": []\n        }\n    },\n    \"Trace\": null,\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\"\n    },\n    \"User\": {\n        \"UserId\": \"1c353c97-437a-489c-ad00-c83d6e07ebd8\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-6238056610\",\n        \"Email\": null,\n        \"UserName\": \"cbixyx9006\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1627844993,\n        \"exp\": 1635620993\n    },\n    \"Context\": \"Patient.GetByUserId\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
								}
							]
						},
						{
							"name": "Update patient details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
											"    pm.environment.set(\"PATIENT_PHONE\", jsonRes.Data.Patient.User.Person.Phone);\r",
											"    pm.environment.set(\"PATIENT_GENDER\", jsonRes.Data.Patient.User.Person.Gender);\r",
											"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
											"\r",
											"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
											"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": [
								{
									"name": "Update patient details",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients",
												"{{PATIENT_USER_ID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1355"
										},
										{
											"key": "ETag",
											"value": "W/\"54b-oMCmX5zwQTpqqYuaNKZfRH2Rk8M\""
										},
										{
											"key": "Date",
											"value": "Mon, 02 Aug 2021 06:29:32 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Patient records updated successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"Patient\": {\n            \"id\": \"4e8a8e80-72f2-4a83-87c2-1159c74e6c98\",\n            \"User\": {\n                \"id\": \"c60d6508-5002-4748-adfe-b81bf60e3b92\",\n                \"UserName\": \"mgihsm9697\",\n                \"Person\": {\n                    \"id\": \"e88266d4-b5af-499f-b1e4-b237b999becb\",\n                    \"Prefix\": \"Mr.\",\n                    \"FirstName\": \"John\",\n                    \"MiddleName\": null,\n                    \"LastName\": \"Doe\",\n                    \"DisplayName\": \"Mr. John Doe\",\n                    \"Gender\": \"Male\",\n                    \"BirthDate\": \"1979-01-01T00:00:00.000Z\",\n                    \"Age\": \"42 years and 7 months\",\n                    \"Phone\": \"+91-8125681676\",\n                    \"Email\": \"johndoe@gmail.com\",\n                    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\",\n                    \"ActiveSince\": \"2021-08-02T05:14:04.000Z\",\n                    \"Roles\": [\n                        {\n                            \"id\": \"255cf801-a0ef-454d-a5d0-6c2c73c2160c\",\n                            \"PersonId\": \"e88266d4-b5af-499f-b1e4-b237b999becb\",\n                            \"RoleId\": 2,\n                            \"RoleName\": \"Patient\"\n                        }\n                    ]\n                },\n                \"LastLogin\": null,\n                \"DefaultTimeZone\": \"+05:30\",\n                \"CurrentTimeZone\": \"+05:30\",\n                \"Role\": {\n                    \"id\": 2,\n                    \"RoleName\": \"Patient\"\n                }\n            },\n            \"DisplayId\": \"PT#1-8125681676\",\n            \"EhrId\": null,\n            \"Addresses\": [],\n            \"MedicalProfile\": null,\n            \"Insurances\": [],\n            \"EmergencyContacts\": []\n        }\n    },\n    \"Trace\": null,\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\"\n    },\n    \"User\": {\n        \"UserId\": \"1c353c97-437a-489c-ad00-c83d6e07ebd8\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-6238056610\",\n        \"Email\": null,\n        \"UserName\": \"cbixyx9006\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1627844993,\n        \"exp\": 1635620993\n    },\n    \"Context\": \"Patient.UpdateByUserId\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
								}
							]
						},
						{
							"name": "Update patient details - only email and first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
											"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
											"\r",
											"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FirstName\": \"Anand\",\r\n    \"Email\": \"Anand.doe@gmail.com\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search patients",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of patients is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
											"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patients/search?phone={{PATIENT_PHONE_NUMBER}}&email={{PATIENT_EMAIL}}&name={{PATIENT_FIRST_NAME}}&gender={{PATIENT_GENDER}}&birthdateFrom=1975-01-01&birthdateTo=2021-12-12&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients",
										"search"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{PATIENT_PHONE_NUMBER}}",
											"description": "Search by patient phone"
										},
										{
											"key": "email",
											"value": "{{PATIENT_EMAIL}}",
											"description": "Search by patient email"
										},
										{
											"key": "name",
											"value": "{{PATIENT_FIRST_NAME}}",
											"description": "Search by name"
										},
										{
											"key": "gender",
											"value": "{{PATIENT_GENDER}}",
											"description": "Search by patient gender"
										},
										{
											"key": "birthdateFrom",
											"value": "1975-01-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search"
										},
										{
											"key": "birthdateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search"
										},
										{
											"key": "createdDateFrom",
											"value": "2021-05-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
										},
										{
											"key": "createdDateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
										},
										{
											"key": "orderBy",
											"value": "Email",
											"description": "The name of the parameter to order by"
										},
										{
											"key": "order",
											"value": "ascending",
											"description": "'ascending' or 'descending'"
										},
										{
											"key": "pageIndex",
											"value": "0",
											"description": "Page index for pagination"
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"description": "Items per page"
										}
									]
								},
								"description": "Search addresses using query parameters."
							},
							"response": [
								{
									"name": "Search patients",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ADMIN_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/patients/search?phone={{PATIENT_PHONE}}&email={{PATIENT_EMAIL}}&name={{PATIENT_FIRST_NAME}}&gender={{PATIENT_GENDER}}&birthdateFrom=1975-01-01&birthdateTo=2021-12-12&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients",
												"search"
											],
											"query": [
												{
													"key": "phone",
													"value": "{{PATIENT_PHONE}}",
													"description": "Search by patient phone"
												},
												{
													"key": "email",
													"value": "{{PATIENT_EMAIL}}",
													"description": "Search by patient email"
												},
												{
													"key": "name",
													"value": "{{PATIENT_FIRST_NAME}}",
													"description": "Search by name"
												},
												{
													"key": "gender",
													"value": "{{PATIENT_GENDER}}",
													"description": "Search by patient gender"
												},
												{
													"key": "birthdateFrom",
													"value": "1975-01-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search"
												},
												{
													"key": "birthdateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
												},
												{
													"key": "orderBy",
													"value": "Email",
													"description": "The name of the parameter to order by"
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'"
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1248"
										},
										{
											"key": "ETag",
											"value": "W/\"4e0-dkGE75qDjZcJyZ0HRRb9+L73wtw\""
										},
										{
											"key": "Date",
											"value": "Mon, 02 Aug 2021 07:45:13 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Total 2 patient records retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"Patients\": {\n            \"TotalCount\": 2,\n            \"PageIndex\": 0,\n            \"ItemsPerPage\": 25,\n            \"Order\": \"ascending\",\n            \"OrderedBy\": \"CreatedAt\",\n            \"Items\": [\n                {\n                    \"id\": \"4e8a8e80-72f2-4a83-87c2-1159c74e6c98\",\n                    \"UserId\": \"c60d6508-5002-4748-adfe-b81bf60e3b92\",\n                    \"DisplayId\": \"PT#1-8125681676\",\n                    \"EhrId\": null,\n                    \"DisplayName\": \"Mr. John Doe\",\n                    \"UserName\": \"mgihsm9697\",\n                    \"Phone\": \"+91-8125681676\",\n                    \"Email\": \"johndoe@gmail.com\",\n                    \"Gender\": \"Male\",\n                    \"BirthDate\": \"1979-01-01T00:00:00.000Z\",\n                    \"Age\": \"42 years and 7 months\"\n                },\n                {\n                    \"id\": \"d365387c-e297-4a0f-b722-1e7f6a7c33dc\",\n                    \"UserId\": \"32a16f4b-3e65-4353-9297-65308a56d8da\",\n                    \"DisplayId\": \"PT#1-1423755609\",\n                    \"EhrId\": null,\n                    \"DisplayName\": \"Mr. Anand Tendulkar\",\n                    \"UserName\": \"amseta1420\",\n                    \"Phone\": \"+91-1423755609\",\n                    \"Email\": \"ananddoe@gmail.com\",\n                    \"Gender\": \"Male\",\n                    \"BirthDate\": \"1978-01-12T00:00:00.000Z\",\n                    \"Age\": \"43 years and 7 months\"\n                }\n            ]\n        }\n    },\n    \"Trace\": null,\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\"\n    },\n    \"User\": {\n        \"UserId\": \"ab84bbf7-0189-4344-9fbe-7cf20e48d746\",\n        \"DisplayName\": \"system-admin\",\n        \"Phone\": \"+91 0000000000\",\n        \"Email\": null,\n        \"UserName\": \"admin\",\n        \"CurrentRoleId\": 1,\n        \"iat\": 1627844992,\n        \"exp\": 1635620992\n    },\n    \"Context\": \"Patient.Search\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Doctors",
					"item": [
						{
							"name": "Register doctor- with only a phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    pm.environment.set(\"DOCTOR_PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"DOCTOR_PERSON_ID_1\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_3\", jsonRes.Data.Doctor.User.Person.id);\r",
											"\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											"pm.environment.set(\"PASSWORD\", password);\r",
											"\r",
											"//Profile images\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text",
										"description": "API key for client app authentication"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors"
									]
								},
								"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
							},
							"response": []
						},
						{
							"name": "Register doctor- with same phone number - should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is failure\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var password = \"Client-Test@123\";\r",
											"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register doctor- with phone and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    pm.environment.set(\"CONTACT_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    pm.environment.set(\"DOCTOR_PERSON_ID_2\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_4\", jsonRes.Data.Doctor.User.Person.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Randomly generated user details\r",
											"\r",
											"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
											"\r",
											"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
											"\r",
											"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
											"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
											"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
											"var password = \"Test@123\";\r",
											"\r",
											"pm.environment.set(\"FIRST_NAME\", first);\r",
											"pm.environment.set(\"LAST_NAME\", last);\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
											"pm.environment.set(\"EMAIL\", email);\r",
											"pm.environment.set(\"PASSWORD\", password);\r",
											"\r",
											"//Profile images\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Doctor log-in with password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{ROLE_DOCTOR}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get doctor by user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var password = \"Client-Test@123\";\r",
											"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update doctor details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_FIRST_NAME\", jsonRes.Data.Doctor.User.Person.FirstName);\r",
											"    pm.environment.set(\"DOCTOR_PHONE\", jsonRes.Data.Doctor.User.Person.Phone);\r",
											"    pm.environment.set(\"DOCTOR_GENDER\", jsonRes.Data.Doctor.User.Person.Gender);\r",
											"    pm.environment.set(\"DOCTOR_EMAIL\", jsonRes.Data.Doctor.User.Person.Email);\r",
											"\r",
											"    var phone = jsonRes.Data.Doctor.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"DOCTOR_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor details are updated\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update doctor details - only email and first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"DOCTOR_FIRST_NAME\", jsonRes.Data.Doctor.User.Person.FirstName);\r",
											"    pm.environment.set(\"DOCTOR_EMAIL\", jsonRes.Data.Doctor.User.Person.Email);\r",
											"    pm.environment.set(\"CONTACT_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
											"    \r",
											"    var phone = jsonRes.Data.Doctor.User.Person.Phone;\r",
											"    var tokens = phone.split('-');\r",
											"    var phoneNumber = tokens[1];\r",
											"\r",
											"    pm.environment.set(\"DOCTOR_PHONE_NUMBER\", phoneNumber);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FirstName\": \"Anand\",\r\n    \"Email\": \"Anand.doe@gmail.com\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"{{DOCTOR_USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search doctors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of doctors is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Doctors');\r",
											"    pm.expect(jsonRes.Data.Doctors.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/doctors/search?phone={{DOCTOR_PHONE_NUMBER}}&email={{DOCTOR_EMAIL}}&name={{DOCTOR_FIRST_NAME}}&gender={{DOCTOR_GENDER}}&birthdateFrom=1975-01-01&birthdateTo=2021-12-12&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"doctors",
										"search"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{DOCTOR_PHONE_NUMBER}}",
											"description": "Search by patient phone"
										},
										{
											"key": "email",
											"value": "{{DOCTOR_EMAIL}}",
											"description": "Search by patient email"
										},
										{
											"key": "name",
											"value": "{{DOCTOR_FIRST_NAME}}",
											"description": "Search by name"
										},
										{
											"key": "gender",
											"value": "{{DOCTOR_GENDER}}",
											"description": "Search by patient gender"
										},
										{
											"key": "birthdateFrom",
											"value": "1975-01-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search"
										},
										{
											"key": "birthdateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search"
										},
										{
											"key": "createdDateFrom",
											"value": "2021-05-01",
											"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
										},
										{
											"key": "createdDateTo",
											"value": "2021-12-12",
											"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
										},
										{
											"key": "orderBy",
											"value": "Email",
											"description": "The name of the parameter to order by"
										},
										{
											"key": "order",
											"value": "ascending",
											"description": "'ascending' or 'descending'"
										},
										{
											"key": "pageIndex",
											"value": "0",
											"description": "Page index for pagination"
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"description": "Items per page"
										}
									]
								},
								"description": "Search addresses using query parameters."
							},
							"response": []
						}
					]
				}
			],
			"description": "## APIs to manage users\n\nThese set of APIs are meant to add/retrieve/update/delete/search users for different types, such as patients' doctors, lab-users and pharmacists."
		},
		{
			"name": "Addresses",
			"item": [
				{
					"name": "Create first address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ADDRESS_TYPE\", 'Home');\r",
									"pm.environment.set(\"ADDRESS_LINE\", '89/88, Sembudoss St, Parrys');\r",
									"pm.environment.set(\"ADDRESS_CITY\", 'Pune');\r",
									"pm.environment.set(\"ADDRESS_DISTRICT\", 'Greater Pune');\r",
									"pm.environment.set(\"ADDRESS_STATE\", 'Maharashtra');\r",
									"pm.environment.set(\"ADDRESS_COUNTRY\", 'India');\r",
									"pm.environment.set(\"ADDRESS_POSTAL_CODE\", '411001');\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE\", 36.732324);\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE\", 6.611966);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ADDRESS_ID\", jsonRes.Data.Address.id);\r",
									"    pm.environment.set(\"ADDRESS_ID_1\", jsonRes.Data.Address.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{ADDRESS_TYPE}}\",\r\n    \"AddressLine\": \"{{ADDRESS_LINE}}\",\r\n    \"City\": \"{{ADDRESS_CITY}}\",\r\n    \"District\": \"{{ADDRESS_DISTRICT}}\",\r\n    \"State\": \"{{ADDRESS_STATE}}\",\r\n    \"Country\": \"{{ADDRESS_COUNTRY}}\",\r\n    \"PostalCode\": \"{{ADDRESS_POSTAL_CODE}}\",\r\n    \"Longitude\": {{ADDRESS_LONGITUDE}},\r\n    \"Lattitude\": {{ADDRESS_LATTITUDE}}\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Get address by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Address is returned\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ADDRESS_TYPE\");\r",
									"    var expectedAddressLine = pm.environment.get(\"ADDRESS_LINE\");\r",
									"    var expectedCity = pm.environment.get(\"ADDRESS_CITY\");\r",
									"    var expectedDistrict = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"    var expectedState = pm.environment.get(\"ADDRESS_STATE\");\r",
									"    var expectedCountry = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"    var expectedPostalCode = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"    var expectedLongitude = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"    var expectedLattitude = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/{{ADDRESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"{{ADDRESS_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Update an address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated address is returned\", function () {\r",
									"\r",
									"    var expectedType = \"Official\";\r",
									"    var expectedAddressLine = \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\";\r",
									"    var expectedCity = \"Mumbai\";\r",
									"    var expectedDistrict = \"Greater Mumbai\";\r",
									"    var expectedState = \"Maharashtra\";\r",
									"    var expectedCountry = \"India\";\r",
									"    var expectedPostalCode = \"412407\";\r",
									"    var expectedLongitude = 23.45545;\r",
									"    var expectedLattitude = 54.65466;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Official\",\r\n    \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n    \"City\": \"Mumbai\",\r\n    \"District\": \"Greater Mumbai\",\r\n    \"State\": \"Maharashtra\",\r\n    \"Country\": \"India\",\r\n    \"PostalCode\": \"412407\",\r\n    \"Longitude\": 23.45545,\r\n    \"Lattitude\": 54.65466\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/{{ADDRESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"{{ADDRESS_ID}}"
							]
						},
						"description": "Update the details for an address."
					},
					"response": []
				},
				{
					"name": "Search addresses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var str = '';\r",
									"var search = '';\r",
									"var num = 0.0;\r",
									"\r",
									"var expectedType = pm.environment.get(\"ADDRESS_TYPE\");\r",
									"var expectedAddressLine = pm.environment.get(\"ADDRESS_LINE\");\r",
									"var expectedCity = pm.environment.get(\"ADDRESS_CITY\");\r",
									"var expectedDistrict = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"var expectedState = pm.environment.get(\"ADDRESS_STATE\");\r",
									"var expectedCountry = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"var expectedPostalCode = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"var expectedLongitude = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"var expectedLattitude = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_LINE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_LINE_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_CITY\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_CITY_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_DISTRICT_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_STATE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_STATE_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_COUNTRY_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_POSTAL_CODE_SEARCH_STRING\", search);\r",
									"\r",
									"num = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_FROM\", num - 1);\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_TO\", num + 1);\r",
									"\r",
									"num = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_FROM\", num - 1);\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_TO\", num + 1);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of addresses is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
									"    pm.expect(jsonRes.Data.Addresses.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "Session token (JWT) for the user",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API client secret key",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/search?type=Official&city=Mum&district={{ADDRESS_DISTRICT_SEARCH_STRING}}&state={{ADDRESS_STATE_SEARCH_STRING}}&country={{ADDRESS_COUNTRY_SEARCH_STRING}}&postalCode=412&createdDateFrom=2021-05-01&createdDateTo=2021-12-12&orderBy=City&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "Official",
									"description": "Type of the address"
								},
								{
									"key": "addressLine",
									"value": "{{ADDRESS_LINE_SEARCH_STRING}}",
									"description": "Search string to match address line",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Mum",
									"description": "Search string for city"
								},
								{
									"key": "district",
									"value": "{{ADDRESS_DISTRICT_SEARCH_STRING}}",
									"description": "Search string for district"
								},
								{
									"key": "state",
									"value": "{{ADDRESS_STATE_SEARCH_STRING}}",
									"description": "Search string for state"
								},
								{
									"key": "country",
									"value": "{{ADDRESS_COUNTRY_SEARCH_STRING}}",
									"description": "Search string for country"
								},
								{
									"key": "postalCode",
									"value": "412",
									"description": "Search string for "
								},
								{
									"key": "longitudeFrom",
									"value": "{{ADDRESS_LONGITUDE_SEARCH_FROM}}",
									"description": "Format: float value. \nStart of the range for longitude based search",
									"disabled": true
								},
								{
									"key": "longitudeTo",
									"value": "{{ADDRESS_LONGITUDE_SEARCH_TO}}",
									"description": "Format: float value. \nEnd of the range for longitude based search",
									"disabled": true
								},
								{
									"key": "lattitudeFrom",
									"value": "{{ADDRESS_LATTITUDE_SEARCH_FROM}}",
									"description": "Format: float value.\nStart of the range for lattitude based search",
									"disabled": true
								},
								{
									"key": "lattitudeTo",
									"value": "{{ADDRESS_LATTITUDE_SEARCH_TO}}",
									"description": "Format: float value.\nEnd of the range for lattitude based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search"
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search"
								},
								{
									"key": "orderBy",
									"value": "City",
									"description": "The name of the Parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Create second address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ADDRESS_ID\", jsonRes.Data.Address.id);\r",
									"    pm.environment.set(\"ADDRESS_ID_2\", jsonRes.Data.Address.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A new address is returned\", function () {\r",
									"\r",
									"    var expectedType = \"Official\";\r",
									"    var expectedAddressLine = \"120, XYZ Lane\";\r",
									"    var expectedCity = \"Pune\";\r",
									"    var expectedDistrict = \"Pune\";\r",
									"    var expectedState = \"Maharashtra\";\r",
									"    var expectedCountry = \"India\";\r",
									"    var expectedPostalCode = \"411001\";\r",
									"    var expectedLongitude = 23.43243;\r",
									"    var expectedLattitude = 80.24354;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Official\",\r\n    \"AddressLine\": \"120, XYZ Lane\",\r\n    \"City\": \"Pune\",\r\n    \"District\": \"Pune\",\r\n    \"State\": \"Maharashtra\",\r\n    \"Country\": \"India\",\r\n    \"PostalCode\": \"411001\",\r\n    \"Longitude\": 23.43243,\r\n    \"Lattitude\": 80.24354\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Add an address."
					},
					"response": []
				}
			],
			"description": "## APIs to manage addresses\n\nThese set of APIs are used to manage addresses belonging to persons or organizations."
		},
		{
			"name": "Relationships",
			"item": [
				{
					"name": "organization-organization",
					"item": [
						{
							"name": "Set parent organization to organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Parent organization is set\", function () {\r",
											"\r",
											"    var expectedParentOrganizationId = pm.environment.get(\"PARENT_ORGANIZATION_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
											"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('ParentOrganization');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Organization.ParentOrganization.id).equals(expectedParentOrganizationId);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentOrganizationId\": \"{{PARENT_ORGANIZATION_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Person-organization",
					"item": [
						{
							"name": "Add person to organization (Doctor-to-Clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-person/{{DOCTOR_PERSON_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-person",
										"{{DOCTOR_PERSON_ID_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add another person to organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-person/{{DOCTOR_PERSON_ID_2}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-person",
										"{{DOCTOR_PERSON_ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get organizations by person id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Organizations for person are returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organizations');\r",
											"    pm.expect(jsonRes.Data.Organizations).to.not.be.empty;\r",
											"\r",
											"    var count = jsonRes.Data.Organizations.length;\r",
											"    pm.expect(count).to.be.greaterThan(0);\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('Type');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('ContactEmail');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('ContactPhone');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('OperationalSince');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('IsHealthFacility');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Organizations.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{DOCTOR_PERSON_ID_1}}/organizations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{DOCTOR_PERSON_ID_1}}",
										"organizations"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Get persons for organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personCount = jsonRes.Data.Persons.length;\r",
											"    pm.environment.set(\"ORGANIZATION_PERSON_COUNT\", personCount);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Persons for organization are returned - Person count is increased\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Persons');\r",
											"    pm.expect(jsonRes.Data.Persons.length).to.be.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/persons",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove person from organization (Doctor-from-Clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person removed from organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/remove-person/{{DOCTOR_PERSON_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"remove-person",
										"{{DOCTOR_PERSON_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get persons for organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Persons for organization are returned - Person count is increased\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Persons');\r",
											"    var previousPersonCount = pm.environment.get(\"ORGANIZATION_PERSON_COUNT\");\r",
											"    var personCount = jsonRes.Data.Persons.length;\r",
											"    pm.expect(personCount).to.be.lessThan(previousPersonCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/persons",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set contact user to organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Contact user id for the organization is updated\", function () {\r",
											"\r",
											"    var expectedContactUserId = pm.environment.get(\"CONTACT_USER_ID\");\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactUser');\r",
											"    pm.expect(jsonRes.Data.Organization.ContactUser.id).equals(expectedContactUserId);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ContactUserId\": \"{{CONTACT_USER_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization-address",
					"item": [
						{
							"name": "Add an address to an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-address/{{ADDRESS_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-address",
										"{{ADDRESS_ID_1}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses by organization id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.environment.set(\"ORGANIZATION_ADDRESS_COUNT\", addressCount);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Add another address to an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-address/{{ADDRESS_ID_2}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-address",
										"{{ADDRESS_ID_2}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses by organization id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"\r",
											"    var previousAddressCount = pm.environment.get(\"ORGANIZATION_ADDRESS_COUNT\");\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.expect(addressCount).to.be.greaterThan(previousAddressCount);\r",
											"\r",
											"    pm.environment.set(\"ORGANIZATION_ADDRESS_COUNT\", addressCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Remove an address from an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address removed from organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/remove-address/{{ADDRESS_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"remove-address",
										"{{ADDRESS_ID_1}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization is one less than previous count\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    var previousAddressCount = pm.environment.get(\"ORGANIZATION_ADDRESS_COUNT\");\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.expect(addressCount).to.be.lessThan(previousAddressCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Person-address",
					"item": [
						{
							"name": "Add an address to a person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to person\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonId\": \"{{PERSON_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/add-address/{{ADDRESS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"add-address",
										"{{ADDRESS_ID}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for person after addition",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for person are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Remove an address from person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address removed from person\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonId\": \"{{PERSON_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/remove-address/{{ADDRESS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"remove-address",
										"{{ADDRESS_ID}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for person after removal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is failure\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('failure');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Patient health profile",
			"item": [
				{
					"name": "Get health profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Default patient health profile is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('HealthProfile');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('PatientUserId');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('BloodGroup');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDiabetic');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('HasHeartAilment');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MaritalStatus');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SedentaryLifestyle');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsSmoker');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDrinker');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SubstanceAbuse');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/patient-health-profiles/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patient-health-profiles",
								"{{PATIENT_USER_ID}}"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Update health profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated patient health profile is returned\", function () {\r",
									"\r",
									"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('HealthProfile');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('PatientUserId');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MajorAilment');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('OtherConditions');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('BloodGroup');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDiabetic');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('HasHeartAilment');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MaritalStatus');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Ethnicity');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Nationality');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Occupation');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SedentaryLifestyle');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsSmoker');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDrinker');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSeverity');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSince');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('ProcedureHistory');\r",
									"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SubstanceAbuse');\r",
									"\r",
									"    pm.expect(jsonRes.Data.HealthProfile.PatientUserId).equals(expectedPatientUserId);\r",
									"    pm.expect(jsonRes.Data.HealthProfile.BloodGroup).equals(\"O+\");\r",
									"    pm.expect(jsonRes.Data.HealthProfile.MajorAilment).equals(\"Heart failure\");\r",
									"    pm.expect(jsonRes.Data.HealthProfile.OtherConditions).equals(\"None\");\r",
									"    pm.expect(jsonRes.Data.HealthProfile.IsDiabetic).equals(false);\r",
									"    pm.expect(jsonRes.Data.HealthProfile.HasHeartAilment).equals(true);\r",
									"    pm.expect(jsonRes.Data.HealthProfile.MaritalStatus).equals(\"Married\");\r",
									"    pm.expect(jsonRes.Data.HealthProfile.Ethnicity).equals(\"South-Asian\");\r",
									"    pm.expect(jsonRes.Data.HealthProfile.Nationality).equals(\"Indian\");\r",
									"    pm.expect(jsonRes.Data.HealthProfile.Occupation).equals(\"Software engineer\");\r",
									"    pm.expect(jsonRes.Data.HealthProfile.SedentaryLifestyle).equals(true);\r",
									"    pm.expect(jsonRes.Data.HealthProfile.IsSmoker).equals(false);\r",
									"    pm.expect(jsonRes.Data.HealthProfile.IsDrinker).equals(true);\r",
									"    pm.expect(jsonRes.Data.HealthProfile.DrinkingSeverity).equals(\"Medium\");\r",
									"\r",
									"    var drinkingSince = jsonRes.Data.HealthProfile.DrinkingSince;\r",
									"    if(drinkingSince){\r",
									"        drinkingSince = drinkingSince.split('T')[0];\r",
									"    }\r",
									"    pm.expect(drinkingSince).equals(\"2010-01-01\");\r",
									"\r",
									"    pm.expect(jsonRes.Data.HealthProfile.SubstanceAbuse).equals(true);\r",
									"    pm.expect(jsonRes.Data.HealthProfile.ProcedureHistory).equals(\"Had a toncil operation\");\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BloodGroup\": \"O+\",\r\n    \"MajorAilment\": \"Heart failure\",\r\n    \"OtherConditions\": \"None\",\r\n    \"IsDiabetic\": false,\r\n    \"HasHeartAilment\": true,\r\n    \"MaritalStatus\": \"Married\",\r\n    \"Ethnicity\": \"South-Asian\",\r\n    \"Nationality\": \"Indian\",\r\n    \"Occupation\": \"Software engineer\",\r\n    \"SedentaryLifestyle\": true,\r\n    \"IsSmoker\": false,\r\n    \"IsDrinker\": true,\r\n    \"DrinkingSeverity\": \"Medium\",\r\n    \"DrinkingSince\": \"2010-01-01\",\r\n    \"SubstanceAbuse\": true,\r\n    \"ProcedureHistory\": \"Had a toncil operation\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patient-health-profiles/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patient-health-profiles",
								"{{PATIENT_USER_ID}}"
							]
						},
						"description": "Add an address."
					},
					"response": []
				}
			],
			"description": "## APIs to manage addresses\n\nThese set of APIs are used to manage addresses belonging to persons or organizations."
		},
		{
			"name": "Biometrics",
			"item": [
				{
					"name": "Blood oxygen saturation",
					"item": [
						{
							"name": "Add blood oxygen saturation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"BIOMETRICS_BLOOD_OXYGEN_ID\", jsonRes.Data.BloodOxygenSaturation.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New blood oxygen saturation record is created\", function () {",
											"",
											"    var expectedValue = 85;",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('id');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('PatientUserId');",
											"    ",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedValue);",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.PatientUserId).equals(expectedPatientUserId);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"BloodOxygenSaturation\": 99,\n    \"Unit\": \"%\",\n    \"RecordDate\": \"2021-09-01\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/biometrics/blood-oxygen-saturations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"biometrics",
										"blood-oxygen-saturations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get blood oxygen saturation by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Blood oxygen saturation record is returned\", function () {",
											"",
											"    var expectedValue = 99;",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('id');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('PatientUserId');",
											"",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedValue);",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.PatientUserId).equals(expectedPatientUserId);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"biometrics",
										"blood-oxygen-saturations",
										"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update blood oxygen saturation by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated blood oxygen saturation record is returned\", function () {",
											"",
											"    var expectedBloodOxygenSaturation = 80;",
											"    var expectedRecordDate = \"2021-09-07T00:00:00.000Z\";",
											"    var expectedRecordedByUserId = \"4cd74e12-cae1-4314-9a69-f45b18cc1cf9\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('RecordDate');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('RecordedByUserId');",
											"",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedBloodOxygenSaturation);",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.RecordDate).equals(expectedRecordDate);",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.RecordedByUserId).equals(expectedRecordedByUserId);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"BloodOxygenSaturation\": \"90\",\n    \"RecordDate\": \"2021-09-07\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"biometrics",
										"blood-oxygen-saturations",
										"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete blood oxygen saturation record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\" Blood oxygen saturation record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"biometrics",
										"blood-oxygen-saturations",
										"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search blood oxygen saturation record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of blood oxygen saturation records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturationRecords');",
											"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/biometrics/blood-oxygen-saturations/search?recordedByUserId={{RECORDED_BY_USER_ID}}&createdDateFrom=2021-09-01&createdDateTo=2021-10-14&orderBy=BloodOxygenSaturation&order=ascending&pageIndex=0&itemsPerPage=25&minValue=90&maxValue=100&patientUserId={{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"biometrics",
										"blood-oxygen-saturations",
										"search"
									],
									"query": [
										{
											"key": "recordedByUserId",
											"value": "{{RECORDED_BY_USER_ID}}"
										},
										{
											"key": "createdDateFrom",
											"value": "2021-09-01"
										},
										{
											"key": "createdDateTo",
											"value": "2021-10-14"
										},
										{
											"key": "orderBy",
											"value": "BloodOxygenSaturation"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "minValue",
											"value": "90"
										},
										{
											"key": "maxValue",
											"value": "100"
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Nutrition",
			"item": [
				{
					"name": "Food Consumption",
					"item": [
						{
							"name": "Add food consumption record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"NUTRITION_FOOD_CONSUMPTION_ID\", jsonRes.Data.FoodConsumption.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Food consumption record is created\", function () {",
											"",
											"    var expectedValue = \"Roti\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Food');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('id');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('PatientUserId');",
											"    ",
											"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedValue);",
											"    pm.expect(jsonRes.Data.FoodConsumption.PatientUserId).equals(expectedPatientUserId);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Food\": \"roti\",\n    \"Description\": \"mins\",\n    \"ConsumedAs\": \"Lunch\",\n    \"Calories\": 100,\n    \"ImageResourceId\": \"f150d29b-d893-4032-b274-194175f59d3f\",\n    \"StartTime\": \"2021-09-16T09:45:00.000Z\",\n    \"EndTime\": \"2021-09-16T09:50:00.000Z\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/nutrition/food-consumption",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"nutrition",
										"food-consumption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get food consumption record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Food consumption record is returned\", function () {",
											"",
											"    var expectedValue = \"Rice\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Food');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('id');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('PatientUserId');",
											"",
											"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedValue);",
											"    pm.expect(jsonRes.Data.FoodConsumption.PatientUserId).equals(expectedPatientUserId);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/nutrition/food-consumption/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"nutrition",
										"food-consumption",
										"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get food consumption records by event name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Food consumption record is returned\", function () {",
											"",
											"    var expectedValue = \"Lunch\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Event');",
											"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.have.property('id');",
											"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.have.property('Event');",
											"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.have.property('PatientUserId');",
											"",
											"    pm.expect(jsonRes.Data.FoodConsumptionEvent.Event).equals(expectedValue);",
											"    pm.expect(jsonRes.Data.FoodConsumptionEvent.PatientUserId).equals(expectedPatientUserId);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/nutrition/food-consumption/{{PATIENT_USER_ID}}/by-event/Lunch",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"nutrition",
										"food-consumption",
										"{{PATIENT_USER_ID}}",
										"by-event",
										"Lunch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete food consumption by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Food consumption record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/nutrition/food-consumption/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"nutrition",
										"food-consumption",
										"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update food consumption record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated food consumption record is returned\", function () {",
											"",
											"    var expectedFood = \"Rice\";",
											"    var expectedStartTime = \"2021-09-16T09:45:00.000Z\";",
											"    var expectedEndTime = \"2021-09-16T09:50:00.000Z\";",
											"",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Food');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('StartTime');",
											"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('EndTime');",
											"",
											"",
											"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedFood);",
											"    pm.expect(jsonRes.Data.FoodConsumption.RecordDate).equals(expectedStartTime); ",
											"    pm.expect(jsonRes.Data.FoodConsumption.RecordDate).equals(expectedEndTime);    ",
											"   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Food\": \"Rice\",\n    \"Description\": \"mins\",\n    \"ConsumedAs\": \"Dinner\",\n    \"Calories\": 200,\n    \"ImageResourceId\": \"f150d29b-d893-4032-b274-194175f59d3f\",\n    \"StartTime\": \"2021-09-16T09:45:00.000Z\",\n    \"EndTime\": \"2021-09-16T09:50:00.000Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/nutrition/food-consumption/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"nutrition",
										"food-consumption",
										"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search food consumption records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of food consumption records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('FoodConsumptionRecords');",
											"    pm.expect(jsonRes.Data.FoodConsumptionRecords.Items.length).to.be.greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/nutrition/food-consumption/search?food=Basundi&consumedAs=Lunch&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}&forDay=2021-09-16&orderBy=food&order=ascending",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"nutrition",
										"food-consumption",
										"search"
									],
									"query": [
										{
											"key": "food",
											"value": "Basundi"
										},
										{
											"key": "consumedAs",
											"value": "Lunch"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "timeFrom",
											"value": "60",
											"disabled": true
										},
										{
											"key": "timeTo",
											"value": "95",
											"disabled": true
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										},
										{
											"key": "forDay",
											"value": "2021-09-16"
										},
										{
											"key": "orderBy",
											"value": "food"
										},
										{
											"key": "order",
											"value": "ascending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get food consumption records for day",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Food consumption records are returned\", function () {",
											"",
											"    var expectedValue = \"Lunch\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Foods');",
											"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('id');",
											"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('Foods');",
											"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('PatientUserId');",
											"",
											"    pm.expect(jsonRes.Data.FoodConsumptionEvent.Event).equals(expectedValue);",
											"    pm.expect(jsonRes.Data.FoodConsumptionForDay.PatientUserId).equals(expectedPatientUserId);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/nutrition/food-consumption/{{PATIENT_USER_ID}}/for-day/2021-09-16",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"nutrition",
										"food-consumption",
										"{{PATIENT_USER_ID}}",
										"for-day",
										"2021-09-16"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}