meta {
  name: Update patient details - partial address
  type: http
  seq: 10
}

put {
  url: {{BASE_URL}}/patients/{{PATIENT_USER_ID}}
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "Prefix": "Mr.",
      "FirstName": "John",
      "MiddleName": "X",
      "LastName": "Doe",
      "Email": "john.doe@gmail.com",
      "Gender": "Male",
      "BirthDate": "1979-01-01",
      "ImageResourceId": "20fd7e52-0d24-4599-bda5-3ed7be2dd383",
      "Addresses": [
          {
              "Type": "Official",
              "AddressLine": "99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli",
              "City": "Mumbai",
              "District": "Greater Mumbai",
              "State": "Maharashtra",
              "Country": "India",
              "PostalCode": "412407",
              "Longitude": 23.45545,
              "Lattitude": 54.65466
          }
      ]
  }
}

tests {
  try {
      var jsonRes = res.getBody();
      bru.setEnvVar("PATIENT_FIRST_NAME", jsonRes.Data.Patient.User.Person.FirstName);
      bru.setEnvVar("PATIENT_PHONE", jsonRes.Data.Patient.User.Person.Phone);
      bru.setEnvVar("PATIENT_GENDER", jsonRes.Data.Patient.User.Person.Gender);
      bru.setEnvVar("PATIENT_EMAIL", jsonRes.Data.Patient.User.Person.Email);
  
      var phone = jsonRes.Data.Patient.User.Person.Phone;
      var tokens = phone.split('-');
      var phoneNumber = tokens[1];
  
      bru.setEnvVar("PATIENT_PHONE_NUMBER", phoneNumber);
  }
  catch (error) {
      console.log(error.message);
  }
  
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Patient is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('Patient');
      expect(jsonRes.Data.Patient).to.not.be.empty;
      expect(jsonRes.Data.Patient).to.have.property('id');
      expect(jsonRes.Data.Patient).to.have.property('User');
      expect(jsonRes.Data.Patient.User).to.not.be.empty;
      expect(jsonRes.Data.Patient.User).to.have.property('id');
      expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;
      expect(jsonRes.Data.Patient.User.Person).to.have.property('id');
  });
  
}
