{
	"info": {
		"_postman_id": "9607d829-4f68-4dab-a24c-71bd01463d5c",
		"name": "reancare.default",
		"description": "This documentation details the default version of the REANCare api.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15905052"
	},
	"item": [
		{
			"name": "service health-check",
			"item": [
				{
					"name": "Health-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}",
							"host": [
								"{{BASE_URL}}"
							]
						},
						"description": "This request will be used by API monitor to check the health of the service."
					},
					"response": []
				}
			],
			"description": "API to check the health of the service."
		},
		{
			"name": "system admin",
			"item": [
				{
					"name": "Admin log-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\",\r\n    \"LoginRoleId\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			],
			"description": "User login with username/phone/email and password.\nIn this example, system admin logs in.\n\nSystem admin can perform multiple admin tasks such as - \n1. Add/remove/update api clients.\n2. Renew the API keys for the api clients.\n3. Perform monitoring and admin tasks through selected set of APIs only accessible to system-admin role."
		},
		{
			"name": "Api clients",
			"item": [
				{
					"name": "Create an API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Bot Wrapper\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"+91 9876543219\",\r\n    \"Email\": \"dev@excell-medicos.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "Register an API client.\n\nThis API will register a new API client and returns the generated 'client code' and 'api-key'. The API key has finite lifetime. By default, it is 1 year from the date of the registration."
					},
					"response": []
				},
				{
					"name": "Create an API client - with validity period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Excellent Medicos\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"+91 9876543219\",\r\n    \"Email\": \"dev@excell-medicos.com\",\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "Register an API client. This example shows how you can set custom validity period for the API key. This API will register a new API client and returns generated 'client code' and 'api-key'."
					},
					"response": []
				},
				{
					"name": "Get API client by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api client is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "Retrieve an API client info by client id."
					},
					"response": []
				},
				{
					"name": "Search API clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of API clients records is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiClientRecords');\r",
									"    pm.expect(jsonRes.Data.ApiClientRecords.Items.length).greaterThan(0);\r",
									"\r",
									"});\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"search"
							],
							"query": [
								{
									"key": "clientName",
									"value": "",
									"disabled": true
								},
								{
									"key": "clientCode",
									"value": "REANBOTW",
									"disabled": true
								},
								{
									"key": "phone",
									"value": "+91-7875693566",
									"disabled": true
								},
								{
									"key": "email",
									"value": "tabbasum.kolhapure@reanfoundation.org",
									"disabled": true
								},
								{
									"key": "validTill",
									"value": "",
									"disabled": true
								},
								{
									"key": "validForm",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Retrieve an API client info by client id."
					},
					"response": []
				},
				{
					"name": "Update API client by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.Client.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.Client.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated api client is returned\", function () {\r",
									"\r",
									"    var expectedClientName = pm.environment.get(\"API_CLIENT_NEW_NAME\");\r",
									"    var expectedClientPhone = pm.environment.get(\"API_CLIENT_NEW_PHONE\");\r",
									"    var expectedClientEmail = pm.environment.get(\"API_CLIENT_NEW_EMAIL\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.Client.ClientCode).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonRes.Data.Client.ClientName).equals(expectedClientName);\r",
									"    pm.expect(jsonRes.Data.Client.Phone).equals(expectedClientPhone);\r",
									"    pm.expect(jsonRes.Data.Client.Email).equals(expectedClientEmail);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"New-Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									"\r",
									"pm.environment.set(\"API_CLIENT_NEW_NAME\", \"My health app - New name\");\r",
									"pm.environment.set(\"API_CLIENT_NEW_PHONE\", \"+91 4444455555\");\r",
									"pm.environment.set(\"API_CLIENT_NEW_EMAIL\", \"new.client.email@client.com\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "Admin user login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "Default API key for internal clients.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"{{API_CLIENT_NEW_NAME}}\",\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\",\r\n    \"Phone\": \"{{API_CLIENT_NEW_PHONE}}\",\r\n    \"Email\": \"{{API_CLIENT_NEW_EMAIL}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "Update an API client info by client id."
					},
					"response": []
				},
				{
					"name": "Get current API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api key is returned\", function () {\r",
									"\r",
									"    var expectedClientCode = pm.environment.get(\"API_CLIENT_CODE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ClientCode).equals(expectedClientCode);\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/current-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"current-api-key"
							]
						},
						"description": "Get the current valid API key for a given client. \n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				},
				{
					"name": "Renew API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New api key is returned\", function () {\r",
									"\r",
									"    var currentApiKey = pm.environment.get(\"API_KEY\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).not.equals(currentApiKey);\r",
									"    \r",
									"    //set the new key to env\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ValidFrom\": \"2021-07-21\",\r\n    \"ValidTill\": \"2024-07-20\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/renew-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"renew-api-key"
							]
						},
						"description": "Renew API key with a given validity period. If not added, the key will be valid for 1 year.\n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				}
			],
			"description": "Management of API clients. \n\nAPI clients may include mobile/web apps, other customized API services such as chat-bot service."
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "Get person-roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/person-roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"person-roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organization types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var organizationTypes = jsonRes.Data.OrganizationTypes;\r",
									"    for(var i = 0; i < organizationTypes.length; i++) {\r",
									"        var r = organizationTypes[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = \"ORGANIZATION_TYPE_\" + name.toUpperCase();\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Organization types are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('OrganizationTypes');\r",
									"    pm.expect(jsonRes.Data.OrganizationTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.OrganizationTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/organization-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"organization-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get gender types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var genderTypes = jsonRes.Data.GenderTypes;\r",
									"    for(var i = 0; i < genderTypes.length; i++) {\r",
									"        var r = genderTypes[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = \"GENDER_TYPE_\" + name.toUpperCase();\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Gender types are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('GenderTypes');\r",
									"    pm.expect(jsonRes.Data.GenderTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.GenderTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/genders",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"genders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get lab record types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var labRecordsTypes = jsonRes.Data.LabRecordTypes;\r",
									"    for(var i = 0; i < labRecordsTypes.length; i++) {\r",
									"        var r = labRecordsTypes[i];\r",
									"        var name = r.DisplayName;\r",
									"        var id = r.id;\r",
									"        var str = \"LAB_RECORD_\" + name.toUpperCase();\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Gender types are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('LabRecordTypes');\r",
									"    pm.expect(jsonRes.Data.LabRecordTypes).to.not.be.empty;\r",
									"    var count = jsonRes.Data.LabRecordTypes.length;\r",
									"    pm.expect(count).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/lab-records",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"lab-records"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patients",
			"item": [
				{
					"name": "Mobile patient registration and login",
					"item": [
						{
							"name": "Get user roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
											"    for(var i = 0; i < personRoles.length; i++) {\r",
											"        var r = personRoles[i];\r",
											"        var name = r.RoleName;\r",
											"        var id = r.id;\r",
											"        var str = \"ROLE_\" + name.toUpperCase();\r",
											"        console.log(str);\r",
											"        console.log(id);\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/person-roles",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"person-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user with phone and role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PHONE_NUMBER\", \"1599511599\");\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/users/by-phone/{{PHONE}}/role/{{ROLE_PATIENT}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"by-phone",
										"{{PHONE}}",
										"role",
										"{{ROLE_PATIENT}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register patient- with only a phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_1\", jsonRes.Data.Patient.User.Person.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text",
										"description": "API key for client app authentication"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								},
								"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
							},
							"response": []
						},
						{
							"name": "Register patient- with only a phone Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
											"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
											"    pm.environment.set(\"PERSON_ID_1\", jsonRes.Data.Patient.User.Person.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
											"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text",
										"description": "API key for client app authentication"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"+44-7464296323\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patients"
									]
								},
								"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
							},
							"response": []
						},
						{
							"name": "Patient log-in with otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Otp\": \"180291\",\r\n    \"LoginRoleId\": {{ROLE_PATIENT}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-otp",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patient log-in with otp Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"+44-7464296323\",\r\n    \"Otp\": \"698901\",\r\n    \"LoginRoleId\": {{ROLE_PATIENT}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-with-otp",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-with-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patient log-out",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "API key for client app authentication"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DeviceToken\": \"{{DEVICE_TOKEN}}\"\r\n   \r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"// pm.test(\"Request is successfull\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     var jsonRes = pm.response.json();\r",
											"//     pm.expect(jsonRes.Status).to.eql('success');\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"+44-7464296323\",\r\n    \"Purpose\": \"Login\",\r\n    \"RoleId\": 2\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/generate-otp",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"generate-otp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register patient- with only a phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
									"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_1\", jsonRes.Data.Patient.User.Person.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
									"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text",
								"description": "API key for client app authentication"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients"
							]
						},
						"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
					},
					"response": []
				},
				{
					"name": "Register patient- with same phone number - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Response should be failure\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('failure');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register patient- with phone and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
									"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_2\", jsonRes.Data.Patient.User.Person.id);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
									"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient log-in with password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with phone and role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
									"    for(var i = 0; i < personRoles.length; i++) {\r",
									"        var r = personRoles[i];\r",
									"        var name = r.RoleName;\r",
									"        var id = r.id;\r",
									"        var str = \"ROLE_\" + name.toUpperCase();\r",
									"        console.log(str);\r",
									"        console.log(id);\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Person roles are retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.User).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/by-phone/{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}/role/{{ROLE_PATIENT}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"by-phone",
								"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}",
								"role",
								"{{ROLE_PATIENT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get patient by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
									"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update patient details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
									"    pm.environment.set(\"PATIENT_PHONE\", jsonRes.Data.Patient.User.Person.Phone);\r",
									"    pm.environment.set(\"PATIENT_GENDER\", jsonRes.Data.Patient.User.Person.Gender);\r",
									"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
									"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\",\r\n    \"Address\": {\r\n        \"Type\": \"Official\",\r\n        \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n        \"City\": \"Mumbai\",\r\n        \"Country\": \"India\"\r\n    },\r\n    \"DefaultTimeZone\": \"+05:30\",\r\n    \"CurrentTimeZone\": \"+05:30\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update patient details - partial address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
									"    pm.environment.set(\"PATIENT_PHONE\", jsonRes.Data.Patient.User.Person.Phone);\r",
									"    pm.environment.set(\"PATIENT_GENDER\", jsonRes.Data.Patient.User.Person.Gender);\r",
									"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
									"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\",\r\n    \"Address\": {\r\n        \"Type\": \"Official\",\r\n        \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n        \"City\": \"Mumbai\",\r\n        \"District\": \"Greater Mumbai\",\r\n        \"State\": \"Maharashtra\",\r\n        \"Country\": \"India\",\r\n        \"PostalCode\": \"412407\",\r\n        \"Longitude\": 23.45545,\r\n        \"Lattitude\": 54.65466\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update patient details - only email and first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
									"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"Anand\",\r\n    \"Email\": \"Anand.doe@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update patient details - reset params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
									"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": null,\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": null,\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": null,\r\n    \"ImageResourceId\": null,\r\n    \"Address\": {\r\n        \"Type\": \"Official\",\r\n        \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n        \"City\": null,\r\n        \"District\": null,\r\n        \"State\": \"Maharashtra\",\r\n        \"Country\": \"\",\r\n        \"PostalCode\": \"412407\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search patients",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/patients/search?phone={{PATIENT_PHONE_NUMBER}}&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone"
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "Email",
									"description": "The name of the parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Add an organization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"ORGANIZATION_TYPE\", 'Clinic');\r",
									"pm.environment.set(\"ORGANIZATION_NAME\", 'Shree Clinic');\r",
									"pm.environment.set(\"CONTACT_ORGANIZATION_PHONE\", '+91-1234567890');\r",
									"pm.environment.set(\"CONTACT_ORGANIZATION_EMAIL\", 'xyz@gmail.com');\r",
									"pm.environment.set(\"ABOUT_ORGANIZATION\", 'Shree Gastroenterology & Endoscopy Clinic');\r",
									"pm.environment.set(\"ORGANIZATION_OPERATIONAL_SINCE\", '2017-05-08');\r",
									"pm.environment.set(\"ORGANIZATION_IMAGE_RESOURCE_ID\", '80eb4c8b-f302-4612-9fe9-f832c6eb401f');\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ORGANIZATION_ID\", jsonRes.Data.Organization.id);\r",
									"    pm.environment.set(\"PARENT_ORGANIZATION_ID\", jsonRes.Data.Organization.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New organization is created\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ORGANIZATION_TYPE\");\r",
									"    var expectedName = pm.environment.get(\"ORGANIZATION_NAME\");\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"    var expectedIsHealthFacility = true;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals(expectedName);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(expectedIsHealthFacility);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{ORGANIZATION_TYPE}}\",\r\n    \"Name\": \"{{ORGANIZATION_NAME}}\",\r\n    \"ContactPhone\": \"{{CONTACT_ORGANIZATION_PHONE}}\",\r\n    \"ContactEmail\": \"{{CONTACT_ORGANIZATION_EMAIL}}\",\r\n    \"About\": \"{{ABOUT_ORGANIZATION}}\",\r\n    \"OperationalSince\": \"{{ORGANIZATION_OPERATIONAL_SINCE}}\",\r\n    \"AddressId\": \"{{ADDRESS_ID}}\",\r\n    \"ImageResourceId\": \"80eb4c8b-f302-4612-9fe9-f832c6eb401f\",\r\n    \"IsHealthFacility\": true\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Get organization by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New organization is created\", function () {\r",
									"\r",
									"    var expectedType = pm.environment.get(\"ORGANIZATION_TYPE\");\r",
									"    var expectedName = pm.environment.get(\"ORGANIZATION_NAME\");\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"    var expectedIsHealthFacility = true;\r",
									"\r",
									"    // var expectedContactUserId = pm.environment.get(\"CONTACT_USER_ID\");\r",
									"    // var expectedNationalRegistryId = null;\r",
									"    // var expectedParentOrganizationId = pm.environment.get(\"PARENT_ORGANIZATION_ID\");\r",
									"    // var expectedAbout = pm.environment.get(\"ABOUT_ORGANIZATION\");\r",
									"    // var expectedImageResourceId = pm.environment.get(\"ORGANIZATION_IMAGE_RESOURCE_ID\");\r",
									"\r",
									"    // console.log(expectedType + '\\n');\r",
									"    // console.log(expectedName + '\\n');\r",
									"    // console.log(expectedContactUserId + '\\n');\r",
									"    // console.log(expectedContactOrganizationPhone + '\\n');\r",
									"    // console.log(expectedContactOrganizationEmail + '\\n');\r",
									"    // console.log(expectedParentOrganizationId + '\\n');\r",
									"    // console.log(expectedAbout + '\\n');\r",
									"    // console.log(expectedOperationalSince + '\\n');\r",
									"    // console.log(expectedImageResourceId + '\\n');\r",
									"    // console.log(expectedIsHealthFacility + '\\n');\r",
									"    // console.log(expectedNationalRegistryId + '\\n');\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals(expectedName);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(expectedIsHealthFacility);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"{{ORGANIZATION_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Update an organization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"ORGANIZATION_NAME\", 'Shree Hospital');\r",
									"pm.environment.get(\"ORGANIZATION_TYPE\", \"Hospital\");\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Organization is updated\", function () {\r",
									"\r",
									"    var expectedContactPhone = pm.environment.get(\"CONTACT_ORGANIZATION_PHONE\");\r",
									"    var expectedContactEmail = pm.environment.get(\"CONTACT_ORGANIZATION_EMAIL\");\r",
									"    var expectedOperationalSince = pm.environment.get(\"ORGANIZATION_OPERATIONAL_SINCE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
									"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactEmail');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactPhone');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('OperationalSince');\r",
									"    pm.expect(jsonRes.Data.Organization).to.have.property('IsHealthFacility');\r",
									"\r",
									"    var opSince = jsonRes.Data.Organization.OperationalSince;\r",
									"    if(opSince){\r",
									"        opSince = opSince.split('T')[0];\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonRes.Data.Organization.Type).equals('Hospital');\r",
									"    pm.expect(jsonRes.Data.Organization.Name).equals('Shree Hospital');\r",
									"    pm.expect(jsonRes.Data.Organization.ContactEmail).equals(expectedContactEmail);\r",
									"    pm.expect(jsonRes.Data.Organization.ContactPhone).equals(expectedContactPhone);\r",
									"    pm.expect(opSince).equals(expectedOperationalSince);\r",
									"    pm.expect(jsonRes.Data.Organization.IsHealthFacility).equals(true);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Hospital\",\r\n    \"Name\": \"Shree Hospital\",\r\n    \"About\": \"Shree Hospital is a speciality hospital located on western part of the Pune city specializing in post-trauma care\",\r\n    \"ContactPhone\": \"{{CONTACT_ORGANIZATION_PHONE}}\",\r\n    \"ContactEmail\": \"{{CONTACT_ORGANIZATION_EMAIL}}\",\r\n    \"OperationalSince\": \"{{ORGANIZATION_OPERATIONAL_SINCE}}\",\r\n    \"ImageResourceId\": \"{{ORGANIZATION_IMAGE_RESOURCE_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"{{ORGANIZATION_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Search organizations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of organizations is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Organizations');\r",
									"    pm.expect(jsonRes.Data.Organizations.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/organizations/search?type=Hospital&name=shr&operationalSinceFrom=1975-01-01&orderBy=Name&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"organizations",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "Hospital",
									"description": "Search by type of organization"
								},
								{
									"key": "name",
									"value": "shr",
									"description": "Search by organization name"
								},
								{
									"key": "contactPhone",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by contact phone",
									"disabled": true
								},
								{
									"key": "contactEmail",
									"value": "123",
									"description": "Search by contact email",
									"disabled": true
								},
								{
									"key": "operationalSinceFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for operational since date based search"
								},
								{
									"key": "operationalSinceTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for operational since date based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "Name",
									"description": "The name of the parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Doctors",
			"item": [
				{
					"name": "Register doctor- with only a phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DOCTOR_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
									"    pm.environment.set(\"DOCTOR_PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
									"    pm.environment.set(\"DOCTOR_PERSON_ID_1\", jsonRes.Data.Doctor.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_3\", jsonRes.Data.Doctor.User.Person.id);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Doctor is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									"\r",
									"//Profile images\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text",
								"description": "API key for client app authentication"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/doctors",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"doctors"
							]
						},
						"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
					},
					"response": []
				},
				{
					"name": "Register doctor- with same phone number - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is failure\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"doctors",
								"{{DOCTOR_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register doctor- with phone and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DOCTOR_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
									"    pm.environment.set(\"CONTACT_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
									"    pm.environment.set(\"DOCTOR_PERSON_ID_2\", jsonRes.Data.Doctor.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Doctor.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_4\", jsonRes.Data.Doctor.User.Person.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Doctor is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									"\r",
									"//Profile images\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/doctors",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"doctors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Doctor log-in with password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DOCTOR_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Doctor login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{ROLE_DOCTOR}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get doctor by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Doctor is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{DOCTOR_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"doctors",
								"{{DOCTOR_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update doctor details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DOCTOR_FIRST_NAME\", jsonRes.Data.Doctor.User.Person.FirstName);\r",
									"    pm.environment.set(\"DOCTOR_PHONE\", jsonRes.Data.Doctor.User.Person.Phone);\r",
									"    pm.environment.set(\"DOCTOR_GENDER\", jsonRes.Data.Doctor.User.Person.Gender);\r",
									"    pm.environment.set(\"DOCTOR_EMAIL\", jsonRes.Data.Doctor.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Doctor.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"DOCTOR_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Doctor details are updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Doctor');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Doctor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{DOCTOR_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"doctors",
								"{{DOCTOR_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update doctor details - only email and first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DOCTOR_FIRST_NAME\", jsonRes.Data.Doctor.User.Person.FirstName);\r",
									"    pm.environment.set(\"DOCTOR_EMAIL\", jsonRes.Data.Doctor.User.Person.Email);\r",
									"    pm.environment.set(\"CONTACT_USER_ID\", jsonRes.Data.Doctor.User.id);\r",
									"    \r",
									"    var phone = jsonRes.Data.Doctor.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"DOCTOR_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{DOCTOR_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"Anand\",\r\n    \"Email\": \"Anand.doe@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/doctors/{{DOCTOR_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"doctors",
								"{{DOCTOR_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search doctors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of doctors is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Doctors');\r",
									"    pm.expect(jsonRes.Data.Doctors.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/doctors/search?phone={{DOCTOR_PHONE_NUMBER}}&birthdateFrom=1975-01-01&birthdateTo=2021-12-12&orderBy=Email&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"doctors",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{DOCTOR_PHONE_NUMBER}}",
									"description": "Search by patient phone"
								},
								{
									"key": "email",
									"value": "{{DOCTOR_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{DOCTOR_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{DOCTOR_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search"
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search"
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "Email",
									"description": "The name of the parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Donors",
			"item": [
				{
					"name": "Register donor- with only a phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DONOR_USER_ID\", jsonRes.Data.Donor.User.id);\r",
									"    pm.environment.set(\"DONOR_PERSON_ID\", jsonRes.Data.Donor.User.Person.id);\r",
									"    pm.environment.set(\"DONOR_PERSON_ID_1\", jsonRes.Data.Donor.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Donor.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_3\", jsonRes.Data.Donor.User.Person.id);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Donor is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Donor');\r",
									"    pm.expect(jsonRes.Data.Donor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									"\r",
									"//Profile images\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text",
								"description": "API key for client app authentication"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/donors",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"donors"
							]
						},
						"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
					},
					"response": []
				},
				{
					"name": "Register donor- with phone and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DONOR_USER_ID\", jsonRes.Data.Donor.User.id);\r",
									"    pm.environment.set(\"DONOR_PERSON_ID_2\", jsonRes.Data.Donor.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_2\", jsonRes.Data.Donor.User.Person.id);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Donor is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Donor');\r",
									"    pm.expect(jsonRes.Data.Donor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									"\r",
									"//Profile images\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/donors",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"donors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Donor log-in with password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DONOR_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"DoNOR login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": 11\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get donor by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Donor is retrived successfully!\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Donor');\r",
									"    pm.expect(jsonRes.Data.Donor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{DOCTOR_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/donors/{{DONOR_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"donors",
								"{{DONOR_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update donor details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"DONOR_FIRST_NAME\", jsonRes.Data.Donor.User.Person.FirstName);\r",
									"    pm.environment.set(\"DONOR_PHONE\", jsonRes.Data.Donor.User.Person.Phone);\r",
									"    pm.environment.set(\"DONOR_GENDER\", jsonRes.Data.Donor.User.Person.Gender);\r",
									"    pm.environment.set(\"DONOR_EMAIL\", jsonRes.Data.Donor.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Donor.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"DONOR_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Donor details are updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Donor');\r",
									"    pm.expect(jsonRes.Data.Donor).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Donor.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{DOCTOR_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"John\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Doe\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"BloodGroup\": \"O+ve\",\r\n    \"MedIssues\": [\"Over Weight\", \"Dibetic\"],\r\n    \"IsAvailable\": true,\r\n    \"HasDonatedEarlier\": false\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/donors/{{DONOR_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"donors",
								"{{DONOR_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search donors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of donors is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Donors');\r",
									"    pm.expect(jsonRes.Data.Donors.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{DOCTOR_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/donors/search?bloodGroup=O&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"donors",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{DONOR_PHONE_NUMBER}}",
									"description": "Search by patient phone",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{DONOR_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{DONOR_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{DONOR_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "bloodGroup",
									"value": "O",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search"
								},
								{
									"key": "medIssues",
									"value": "Over weight",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "The name of the parameter to order by",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "'ascending' or 'descending'",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "Email",
									"description": "Page index for pagination",
									"disabled": true
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "Items per page"
								},
								{
									"key": "pageIndex",
									"value": "0"
								},
								{
									"key": "itemsPerPage",
									"value": "25"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		},
		{
			"name": "Volunteer",
			"item": [
				{
					"name": "Register volunteer- with only a phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"VOLUNTEER_USER_ID\", jsonRes.Data.Volunteer.User.id);\r",
									"    pm.environment.set(\"VOLUNTEER_PERSON_ID\", jsonRes.Data.Volunteer.User.Person.id);\r",
									"    pm.environment.set(\"VOLUNTEER_PERSON_ID_1\", jsonRes.Data.Volunteer.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Volunteer.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_3\", jsonRes.Data.Volunteer.User.Person.id);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Volunteer is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Volunteer');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									"\r",
									"//Profile images\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text",
								"description": "API key for client app authentication"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/volunteers",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"volunteers"
							]
						},
						"description": "Registers patient. Phone number is the only mandatory field. The rest of the fields are optional. Phone number has to be specified in this format - 'country-code-phone-number'. e.g. \"+91-1234567890\".\n\nThe typical request body is as follows - \n`\n{\n    \"Phone\": \"+91-1234567890\",\n    \"Prefix\": \"Mr.\",\n    \"FirstName\": \"John\",\n    \"MiddleName\": \"X\",\n    \"LastName\": \"Doe\",\n    \"Email\": \"john.doe@gmail.com\",\n    \"Gender\": \"Male\",\n    \"BirthDate\": \"1979-01-01\",\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\"\n}\n`"
					},
					"response": []
				},
				{
					"name": "Register volunteer- with phone and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"VOLUNTEER_USER_ID\", jsonRes.Data.Volunteer.User.id);\r",
									"    pm.environment.set(\"VOLUNTEER_PERSON_ID_2\", jsonRes.Data.Volunteer.User.Person.id);\r",
									"    pm.environment.set(\"PERSON_ID_2\", jsonRes.Data.Volunteer.User.Person.id);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Volunteer is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Volunteer');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Randomly generated user details\r",
									"\r",
									"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
									"\r",
									"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
									"\r",
									"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
									"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
									"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"FIRST_NAME\", first);\r",
									"pm.environment.set(\"LAST_NAME\", last);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PHONE_COUNTRY_CODE\", \"+91\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									"\r",
									"//Profile images\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/volunteers",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"volunteers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Volunteer log-in with password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"VOLUNTEER_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Volunteer login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": 12\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get volunteer by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Volunteer is retrived successfully!\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Volunteer');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = \"Client-Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/volunteers/{{VOLUNTEER_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"volunteers",
								"{{VOLUNTEER_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update volunteer details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"VOLUNTEER_FIRST_NAME\", jsonRes.Data.Volunteer.User.Person.FirstName);\r",
									"    pm.environment.set(\"VOLUNTEER_PHONE\", jsonRes.Data.Volunteer.User.Person.Phone);\r",
									"    pm.environment.set(\"VOLUNTEER_GENDER\", jsonRes.Data.Volunteer.User.Person.Gender);\r",
									"    pm.environment.set(\"VOLUNTEER_EMAIL\", jsonRes.Data.Volunteer.User.Person.Email);\r",
									"\r",
									"    var phone = jsonRes.Data.Volunteer.User.Person.Phone;\r",
									"    var tokens = phone.split('-');\r",
									"    var phoneNumber = tokens[1];\r",
									"\r",
									"    pm.environment.set(\"VOLUNTEER_PHONE_NUMBER\", phoneNumber);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Volunteer details are updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Volunteer');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer).to.have.property('User');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Volunteer.User.Person).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"Garfield\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"Miller\",\r\n    \"Email\": \"john.doe@gmail.com\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"BloodGroup\": \"O+\",\r\n    \"LastDonationDate\": \"2022-07-18\",\r\n    \"MedIssues\": [\"Over Weight\", \"Dibetic\"],\r\n    \"IsAvailable\": true\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/volunteers/{{VOLUNTEER_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"volunteers",
								"{{VOLUNTEER_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search volunteers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of donors is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Volunteers');\r",
									"    pm.expect(jsonRes.Data.Volunteers.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/volunteers/search?order=ascending&pageIndex=0&itemsPerPage=25&phone={{VOLUNTEER_PHONE}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"volunteers",
								"search"
							],
							"query": [
								{
									"key": "email",
									"value": "{{VOLUNTEER_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{VOLUNTEER_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{VOLUNTEER_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "bloodGroup",
									"value": "O",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "medIssues",
									"value": "Over weight",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "The name of the parameter to order by",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "'ascending' or 'descending'",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "Email",
									"description": "Page index for pagination",
									"disabled": true
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "Items per page"
								},
								{
									"key": "pageIndex",
									"value": "0"
								},
								{
									"key": "itemsPerPage",
									"value": "25"
								},
								{
									"key": "phone",
									"value": "{{VOLUNTEER_PHONE}}"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Delete volunteer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Volunteer record is deleted\", function () {",
									"",
									"    var expectedValue = true;",
									"    ",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
									"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/volunteers/{{VOLUNTEER_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"volunteers",
								"{{VOLUNTEER_USER_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Addresses",
			"item": [
				{
					"name": "Create first address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ADDRESS_TYPE\", 'Home');\r",
									"pm.environment.set(\"ADDRESS_LINE\", '89/88, Sembudoss St, Parrys');\r",
									"pm.environment.set(\"ADDRESS_CITY\", 'Pune');\r",
									"pm.environment.set(\"ADDRESS_DISTRICT\", 'Greater Pune');\r",
									"pm.environment.set(\"ADDRESS_STATE\", 'Maharashtra');\r",
									"pm.environment.set(\"ADDRESS_COUNTRY\", 'India');\r",
									"pm.environment.set(\"ADDRESS_POSTAL_CODE\", '411001');\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE\", 36.732324);\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE\", 6.611966);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ADDRESS_ID\", jsonRes.Data.Address.id);\r",
									"    pm.environment.set(\"ADDRESS_ID_1\", jsonRes.Data.Address.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{ADDRESS_TYPE}}\",\r\n    \"AddressLine\": \"{{ADDRESS_LINE}}\",\r\n    \"City\": \"{{ADDRESS_CITY}}\",\r\n    \"District\": \"{{ADDRESS_DISTRICT}}\",\r\n    \"State\": \"{{ADDRESS_STATE}}\",\r\n    \"Country\": \"{{ADDRESS_COUNTRY}}\",\r\n    \"PostalCode\": \"{{ADDRESS_POSTAL_CODE}}\",\r\n    \"Longitude\": {{ADDRESS_LONGITUDE}},\r\n    \"Lattitude\": {{ADDRESS_LATTITUDE}}\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Create second address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ADDRESS_TYPE\", 'Home');\r",
									"pm.environment.set(\"ADDRESS_LINE\", '89/88, Sembudoss St, Parrys');\r",
									"pm.environment.set(\"ADDRESS_CITY\", 'Pune');\r",
									"pm.environment.set(\"ADDRESS_DISTRICT\", 'Greater Pune');\r",
									"pm.environment.set(\"ADDRESS_STATE\", 'Maharashtra');\r",
									"pm.environment.set(\"ADDRESS_COUNTRY\", 'India');\r",
									"pm.environment.set(\"ADDRESS_POSTAL_CODE\", '411001');\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE\", 36.732324);\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE\", 6.611966);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ADDRESS_ID\", jsonRes.Data.Address.id);\r",
									"    pm.environment.set(\"ADDRESS_ID_1\", jsonRes.Data.Address.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"{{ADDRESS_TYPE}}\",\r\n    \"AddressLine\": \"{{ADDRESS_LINE}}\",\r\n    \"City\": \"{{ADDRESS_CITY}}\",\r\n    \"Country\": \"{{ADDRESS_COUNTRY}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Add an address."
					},
					"response": []
				},
				{
					"name": "Get address by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Address is returned\", function () {\r",
									"\r",
									"    var expectedType = \"Home\";\r",
									"    var expectedAddressLine = pm.environment.get(\"ADDRESS_LINE\");\r",
									"    var expectedCity = pm.environment.get(\"ADDRESS_CITY\");\r",
									"    var expectedDistrict = null;\r",
									"    var expectedState = null;\r",
									"    var expectedCountry = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"    var expectedPostalCode = null;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/{{ADDRESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"{{ADDRESS_ID}}"
							]
						},
						"description": "Get an address by address id."
					},
					"response": []
				},
				{
					"name": "Update an address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated address is returned\", function () {\r",
									"\r",
									"    var expectedType = \"Official\";\r",
									"    var expectedAddressLine = \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\";\r",
									"    var expectedCity = \"Mumbai\";\r",
									"    var expectedDistrict = \"Greater Mumbai\";\r",
									"    var expectedState = \"Maharashtra\";\r",
									"    var expectedCountry = \"India\";\r",
									"    var expectedPostalCode = \"412407\";\r",
									"    var expectedLongitude = 23.45545;\r",
									"    var expectedLattitude = 54.65466;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Official\",\r\n    \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n    \"City\": \"Mumbai\",\r\n    \"District\": \"Greater Mumbai\",\r\n    \"State\": \"Maharashtra\",\r\n    \"Country\": \"India\",\r\n    \"PostalCode\": \"412407\",\r\n    \"Longitude\": 23.45545,\r\n    \"Lattitude\": 54.65466\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/{{ADDRESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"{{ADDRESS_ID}}"
							]
						},
						"description": "Update the details for an address."
					},
					"response": []
				},
				{
					"name": "Search addresses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var str = '';\r",
									"var search = '';\r",
									"var num = 0.0;\r",
									"\r",
									"var expectedType = pm.environment.get(\"ADDRESS_TYPE\");\r",
									"var expectedAddressLine = pm.environment.get(\"ADDRESS_LINE\");\r",
									"var expectedCity = pm.environment.get(\"ADDRESS_CITY\");\r",
									"var expectedDistrict = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"var expectedState = pm.environment.get(\"ADDRESS_STATE\");\r",
									"var expectedCountry = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"var expectedPostalCode = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"var expectedLongitude = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"var expectedLattitude = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_LINE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_LINE_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_CITY\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_CITY_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_DISTRICT\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_DISTRICT_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_STATE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_STATE_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_COUNTRY\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_COUNTRY_SEARCH_STRING\", search);\r",
									"\r",
									"str = pm.environment.get(\"ADDRESS_POSTAL_CODE\");\r",
									"search = str.substring(0, 3).toLowerCase();\r",
									"pm.environment.set(\"ADDRESS_POSTAL_CODE_SEARCH_STRING\", search);\r",
									"\r",
									"num = pm.environment.get(\"ADDRESS_LONGITUDE\");\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_FROM\", num - 1);\r",
									"pm.environment.set(\"ADDRESS_LONGITUDE_SEARCH_TO\", num + 1);\r",
									"\r",
									"num = pm.environment.get(\"ADDRESS_LATTITUDE\");\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_FROM\", num - 1);\r",
									"pm.environment.set(\"ADDRESS_LATTITUDE_SEARCH_TO\", num + 1);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of addresses is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
									"    pm.expect(jsonRes.Data.Addresses.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "Session token (JWT) for the user",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API client secret key",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses/search?type=Official&city=Mum&district={{ADDRESS_DISTRICT_SEARCH_STRING}}&state={{ADDRESS_STATE_SEARCH_STRING}}&country={{ADDRESS_COUNTRY_SEARCH_STRING}}&postalCode=412&orderBy=City&order=ascending&pageIndex=0&itemsPerPage=25",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "Official",
									"description": "Type of the address"
								},
								{
									"key": "addressLine",
									"value": "{{ADDRESS_LINE_SEARCH_STRING}}",
									"description": "Search string to match address line",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Mum",
									"description": "Search string for city"
								},
								{
									"key": "district",
									"value": "{{ADDRESS_DISTRICT_SEARCH_STRING}}",
									"description": "Search string for district"
								},
								{
									"key": "state",
									"value": "{{ADDRESS_STATE_SEARCH_STRING}}",
									"description": "Search string for state"
								},
								{
									"key": "country",
									"value": "{{ADDRESS_COUNTRY_SEARCH_STRING}}",
									"description": "Search string for country"
								},
								{
									"key": "postalCode",
									"value": "412",
									"description": "Search string for "
								},
								{
									"key": "longitudeFrom",
									"value": "{{ADDRESS_LONGITUDE_SEARCH_FROM}}",
									"description": "Format: float value. \nStart of the range for longitude based search",
									"disabled": true
								},
								{
									"key": "longitudeTo",
									"value": "{{ADDRESS_LONGITUDE_SEARCH_TO}}",
									"description": "Format: float value. \nEnd of the range for longitude based search",
									"disabled": true
								},
								{
									"key": "lattitudeFrom",
									"value": "{{ADDRESS_LATTITUDE_SEARCH_FROM}}",
									"description": "Format: float value.\nStart of the range for lattitude based search",
									"disabled": true
								},
								{
									"key": "lattitudeTo",
									"value": "{{ADDRESS_LATTITUDE_SEARCH_TO}}",
									"description": "Format: float value.\nEnd of the range for lattitude based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "City",
									"description": "The name of the Parameter to order by"
								},
								{
									"key": "order",
									"value": "ascending",
									"description": "'ascending' or 'descending'"
								},
								{
									"key": "pageIndex",
									"value": "0",
									"description": "Page index for pagination"
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"description": "Items per page"
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Create second address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"ADDRESS_ID\", jsonRes.Data.Address.id);\r",
									"    pm.environment.set(\"ADDRESS_ID_2\", jsonRes.Data.Address.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A new address is returned\", function () {\r",
									"\r",
									"    var expectedType = \"Official\";\r",
									"    var expectedAddressLine = \"120, XYZ Lane\";\r",
									"    var expectedCity = \"Pune\";\r",
									"    var expectedDistrict = \"Pune\";\r",
									"    var expectedState = \"Maharashtra\";\r",
									"    var expectedCountry = \"India\";\r",
									"    var expectedPostalCode = \"411001\";\r",
									"    var expectedLongitude = 23.43243;\r",
									"    var expectedLattitude = 80.24354;\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Address).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('AddressLine');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('City');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('District');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('State');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Country');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('PostalCode');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Address).to.have.property('Lattitude');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Address.Type).equals(expectedType);\r",
									"    pm.expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);\r",
									"    pm.expect(jsonRes.Data.Address.City).equals(expectedCity);\r",
									"    pm.expect(jsonRes.Data.Address.District).equals(expectedDistrict);\r",
									"    pm.expect(jsonRes.Data.Address.State).equals(expectedState);\r",
									"    pm.expect(jsonRes.Data.Address.Country).equals(expectedCountry);\r",
									"    pm.expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);\r",
									"\r",
									"    var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"    var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);\r",
									"    pm.expect(diffLong).to.be.lessThan(1.0); //difference less than 1%\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": \"Official\",\r\n    \"AddressLine\": \"120, XYZ Lane\",\r\n    \"City\": \"Pune\",\r\n    \"District\": \"Pune\",\r\n    \"State\": \"Maharashtra\",\r\n    \"Country\": \"India\",\r\n    \"PostalCode\": \"411001\",\r\n    \"Longitude\": 23.43243,\r\n    \"Lattitude\": 80.24354\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/addresses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Add an address."
					},
					"response": []
				}
			],
			"description": "## APIs to manage addresses\n\nThese set of APIs are used to manage addresses belonging to persons or organizations."
		},
		{
			"name": "Relationships",
			"item": [
				{
					"name": "organization-organization",
					"item": [
						{
							"name": "Set parent organization to organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Parent organization is set\", function () {\r",
											"\r",
											"    var expectedParentOrganizationId = pm.environment.get(\"PARENT_ORGANIZATION_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
											"    pm.expect(jsonRes.Data.Organization).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('ParentOrganization');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Organization.ParentOrganization.id).equals(expectedParentOrganizationId);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ParentOrganizationId\": \"{{PARENT_ORGANIZATION_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Person-organization",
					"item": [
						{
							"name": "Add person to organization (Doctor-to-Clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-person/{{DOCTOR_PERSON_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-person",
										"{{DOCTOR_PERSON_ID_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add another person to organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-person/{{DOCTOR_PERSON_ID_2}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-person",
										"{{DOCTOR_PERSON_ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get organizations by person id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Organizations for person are returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organizations');\r",
											"    pm.expect(jsonRes.Data.Organizations).to.not.be.empty;\r",
											"\r",
											"    var count = jsonRes.Data.Organizations.length;\r",
											"    pm.expect(count).to.be.greaterThan(0);\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('Type');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('ContactEmail');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('ContactPhone');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('OperationalSince');\r",
											"    pm.expect(jsonRes.Data.Organizations[0]).to.have.property('IsHealthFacility');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Organizations.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{DOCTOR_PERSON_ID_1}}/organizations",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{DOCTOR_PERSON_ID_1}}",
										"organizations"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Get persons for organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personCount = jsonRes.Data.Persons.length;\r",
											"    pm.environment.set(\"ORGANIZATION_PERSON_COUNT\", personCount);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Persons for organization are returned - Person count is increased\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Persons');\r",
											"    pm.expect(jsonRes.Data.Persons.length).to.be.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/persons",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove person from organization (Doctor-from-Clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person removed from organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/remove-person/{{DOCTOR_PERSON_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"remove-person",
										"{{DOCTOR_PERSON_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get persons for organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Persons for organization are returned - Person count is increased\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Persons');\r",
											"    var previousPersonCount = pm.environment.get(\"ORGANIZATION_PERSON_COUNT\");\r",
											"    var personCount = jsonRes.Data.Persons.length;\r",
											"    pm.expect(personCount).to.be.lessThan(previousPersonCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/persons",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set contact user to organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Contact user id for the organization is updated\", function () {\r",
											"\r",
											"    var expectedContactUserId = pm.environment.get(\"CONTACT_USER_ID\");\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Organization');\r",
											"    pm.expect(jsonRes.Data.Organization).to.have.property('ContactUser');\r",
											"    pm.expect(jsonRes.Data.Organization.ContactUser.id).equals(expectedContactUserId);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ContactUserId\": \"{{CONTACT_USER_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization-address",
					"item": [
						{
							"name": "Add an address to an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-address/{{ADDRESS_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-address",
										"{{ADDRESS_ID_1}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses by organization id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.environment.set(\"ORGANIZATION_ADDRESS_COUNT\", addressCount);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Add another address to an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/add-address/{{ADDRESS_ID_2}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"add-address",
										"{{ADDRESS_ID_2}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses by organization id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"\r",
											"    var previousAddressCount = pm.environment.get(\"ORGANIZATION_ADDRESS_COUNT\");\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.expect(addressCount).to.be.greaterThan(previousAddressCount);\r",
											"\r",
											"    pm.environment.set(\"ORGANIZATION_ADDRESS_COUNT\", addressCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Remove an address from an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address removed from organization\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/remove-address/{{ADDRESS_ID_1}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"remove-address",
										"{{ADDRESS_ID_1}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for organization is one less than previous count\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    var previousAddressCount = pm.environment.get(\"ORGANIZATION_ADDRESS_COUNT\");\r",
											"    var addressCount = jsonRes.Data.Addresses.length;\r",
											"    pm.expect(addressCount).to.be.lessThan(previousAddressCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/organizations/{{ORGANIZATION_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Person-address",
					"item": [
						{
							"name": "Add an address to a person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address added to person\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Added');\r",
											"    pm.expect(jsonRes.Data.Added).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonId\": \"{{PERSON_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/add-address/{{ADDRESS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"add-address",
										"{{ADDRESS_ID}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for person after addition",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personAddressesCount = jsonRes.Data.Addresses.length;\r",
											"    pm.environment.set(\"PERSON_ADDRESS_COUNT\", personAddressesCount);\r",
											"} catch(error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Addresses for person are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    pm.expect(jsonRes.Data.Addresses.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						},
						{
							"name": "Remove an address from person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Address removed from person\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Removed');\r",
											"    pm.expect(jsonRes.Data.Removed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonId\": \"{{PERSON_ID}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/remove-address/{{ADDRESS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"remove-address",
										"{{ADDRESS_ID}}"
									]
								},
								"description": "Update the details for an address."
							},
							"response": []
						},
						{
							"name": "Get addresses for person after removal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated addresses for person are returned after deletion\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Addresses');\r",
											"    var currentPersonAddressesCount = jsonRes.Data.Addresses.length;\r",
											"    var previousPersonAddressesCount = pm.environment.get(\"PERSON_ADDRESS_COUNT\");\r",
											"    pm.expect(currentPersonAddressesCount).lessThan(previousPersonAddressesCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/persons/{{PATIENT_PERSON_ID}}/addresses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"persons",
										"{{PATIENT_PERSON_ID}}",
										"addresses"
									]
								},
								"description": "Get an address by address id."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Patient specific routes",
			"item": [
				{
					"name": "Patient health profile",
					"item": [
						{
							"name": "Get severity list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
											"    for(var i = 0; i < personRoles.length; i++) {\r",
											"        var r = personRoles[i];\r",
											"        var name = r.RoleName;\r",
											"        var id = r.id;\r",
											"        var str = \"ROLE_\" + name.toUpperCase();\r",
											"        console.log(str);\r",
											"        console.log(id);\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person roles are retrieved\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Severities');\r",
											"    pm.expect(jsonRes.Data.Severities).to.not.be.empty;\r",
											"    var count = jsonRes.Data.Severities.length;\r",
											"    pm.expect(count).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/severities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"severities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get severity list Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
											"    for(var i = 0; i < personRoles.length; i++) {\r",
											"        var r = personRoles[i];\r",
											"        var name = r.RoleName;\r",
											"        var id = r.id;\r",
											"        var str = \"ROLE_\" + name.toUpperCase();\r",
											"        console.log(str);\r",
											"        console.log(id);\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person roles are retrieved\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Severities');\r",
											"    pm.expect(jsonRes.Data.Severities).to.not.be.empty;\r",
											"    var count = jsonRes.Data.Severities.length;\r",
											"    pm.expect(count).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/severities",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"severities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get blood-groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
											"    for(var i = 0; i < personRoles.length; i++) {\r",
											"        var r = personRoles[i];\r",
											"        var name = r.RoleName;\r",
											"        var id = r.id;\r",
											"        var str = \"ROLE_\" + name.toUpperCase();\r",
											"        console.log(str);\r",
											"        console.log(id);\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person roles are retrieved\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('BloodGroups');\r",
											"    pm.expect(jsonRes.Data.BloodGroups).to.not.be.empty;\r",
											"    var count = jsonRes.Data.BloodGroups.length;\r",
											"    pm.expect(count).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/blood-groups",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"blood-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get marital statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var personRoles = jsonRes.Data.PersonRoleTypes;\r",
											"    for(var i = 0; i < personRoles.length; i++) {\r",
											"        var r = personRoles[i];\r",
											"        var name = r.RoleName;\r",
											"        var id = r.id;\r",
											"        var str = \"ROLE_\" + name.toUpperCase();\r",
											"        console.log(str);\r",
											"        console.log(id);\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Person roles are retrieved\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('MaritalStatuses');\r",
											"    pm.expect(jsonRes.Data.MaritalStatuses).to.not.be.empty;\r",
											"    var count = jsonRes.Data.MaritalStatuses.length;\r",
											"    pm.expect(count).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client app authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/marital-statuses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"marital-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Default patient health profile is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('HealthProfile');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('BloodGroup');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDiabetic');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('HasHeartAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MaritalStatus');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SedentaryLifestyle');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsSmoker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDrinker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SubstanceAbuse');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-health-profiles/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-health-profiles",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Add an address."
							},
							"response": []
						},
						{
							"name": "Update health profile - 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated patient health profile is returned\", function () {\r",
											"\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('HealthProfile');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MajorAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('OtherConditions');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('BloodGroup');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDiabetic');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('HasHeartAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MaritalStatus');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Ethnicity');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Nationality');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Occupation');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SedentaryLifestyle');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsSmoker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDrinker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSeverity');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSince');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('ProcedureHistory');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SubstanceAbuse');\r",
											"\r",
											"    pm.expect(jsonRes.Data.HealthProfile.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.BloodGroup).equals(\"O+\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.MajorAilment).equals(\"\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.OtherConditions).equals(\"\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsDiabetic).equals(false);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.HasHeartAilment).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.MaritalStatus).equals(\"Single\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Ethnicity).equals(\"South-Asian\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Nationality).equals(\"Indian\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Occupation).equals(\"Software engineer\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.SedentaryLifestyle).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsSmoker).equals(false);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsDrinker).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.DrinkingSeverity).equals(\"Medium\");\r",
											"\r",
											"    var drinkingSince = jsonRes.Data.HealthProfile.DrinkingSince;\r",
											"    if(drinkingSince){\r",
											"        drinkingSince = drinkingSince.split('T')[0];\r",
											"    }\r",
											"    pm.expect(drinkingSince).equals(\"2010-01-01\");\r",
											"\r",
											"    pm.expect(jsonRes.Data.HealthProfile.SubstanceAbuse).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.ProcedureHistory).equals(\"Had a toncil operation\");\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BloodGroup\": \"O+\",\r\n    \"BloodTransfusionDate\": \"2022-09-30\",\r\n    \"BloodDonationCycle\": 20,\r\n    \"MajorAilment\": \"\",\r\n    \"OtherConditions\": \"\",\r\n    \"IsDiabetic\": false,\r\n    \"HasHeartAilment\": true,\r\n    \"MaritalStatus\": \"Single\",\r\n    \"Ethnicity\": \"South-Asian\",\r\n    \"Nationality\": \"Indian\",\r\n    \"Occupation\": \"Software engineer\",\r\n    \"SedentaryLifestyle\": true,\r\n    \"IsSmoker\": false,\r\n    \"IsDrinker\": true,\r\n    \"DrinkingSeverity\": \"Medium\",\r\n    \"DrinkingSince\": \"2010-01-01\",\r\n    \"SubstanceAbuse\": true,\r\n    \"ProcedureHistory\": \"Had a toncil operation\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-health-profiles/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-health-profiles",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Add an address."
							},
							"response": []
						},
						{
							"name": "Update health profile - 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated patient health profile is returned\", function () {\r",
											"\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('HealthProfile');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MajorAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('OtherConditions');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('BloodGroup');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDiabetic');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('HasHeartAilment');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('MaritalStatus');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Ethnicity');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Nationality');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('Occupation');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SedentaryLifestyle');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsSmoker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('IsDrinker');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSeverity');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('DrinkingSince');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('ProcedureHistory');\r",
											"    pm.expect(jsonRes.Data.HealthProfile).to.have.property('SubstanceAbuse');\r",
											"\r",
											"    pm.expect(jsonRes.Data.HealthProfile.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.BloodGroup).equals(\"O+\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.MajorAilment).equals(\"Heart failure\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.OtherConditions).equals(\"None\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsDiabetic).equals(false);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.HasHeartAilment).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.MaritalStatus).equals(\"Married\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Ethnicity).equals(\"South-Asian\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Nationality).equals(\"Indian\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.Occupation).equals(\"Software engineer\");\r",
											"    pm.expect(jsonRes.Data.HealthProfile.SedentaryLifestyle).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsSmoker).equals(false);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.IsDrinker).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.DrinkingSeverity).equals(\"Medium\");\r",
											"\r",
											"    var drinkingSince = jsonRes.Data.HealthProfile.DrinkingSince;\r",
											"    if(drinkingSince){\r",
											"        drinkingSince = drinkingSince.split('T')[0];\r",
											"    }\r",
											"    pm.expect(drinkingSince).equals(\"2010-01-01\");\r",
											"\r",
											"    pm.expect(jsonRes.Data.HealthProfile.SubstanceAbuse).equals(true);\r",
											"    pm.expect(jsonRes.Data.HealthProfile.ProcedureHistory).equals(\"Had a toncil operation\");\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BloodGroup\": \"O+\",\r\n    \"MajorAilment\": \"Heart failure\",\r\n    \"OtherConditions\": \"None\",\r\n    \"IsDiabetic\": false,\r\n    \"HasHeartAilment\": true,\r\n    \"MaritalStatus\": \"Married\",\r\n    \"Ethnicity\": \"South-Asian\",\r\n    \"Nationality\": \"Indian\",\r\n    \"Occupation\": \"Software engineer\",\r\n    \"SedentaryLifestyle\": true,\r\n    \"IsSmoker\": false,\r\n    \"IsDrinker\": true,\r\n    \"DrinkingSeverity\": \"Medium\",\r\n    \"DrinkingSince\": \"2010-01-01\",\r\n    \"SubstanceAbuse\": true,\r\n    \"ProcedureHistory\": \"Had a toncil operation\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-health-profiles/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-health-profiles",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Add an address."
							},
							"response": []
						}
					],
					"description": "## APIs to manage addresses\n\nThese set of APIs are used to manage addresses belonging to persons or organizations."
				},
				{
					"name": "Patient Emergency Contact",
					"item": [
						{
							"name": "Get contact person roles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact roles are returned.\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContactRoles');\r",
											"    pm.expect(jsonRes.Data.EmergencyContactRoles).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContactRoles.length).greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/roles",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"roles"
									]
								},
								"description": "Get an emergency contact by emergency contact id."
							},
							"response": []
						},
						{
							"name": "Create emergency contact with existing person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"let doctorId = pm.environment.get('DOCTOR_PERSON_ID');\r",
											"let addressId = pm.environment.get('ADDRESS_ID');\r",
											"let orgId = pm.environment.get('ORGANIZATION_ID');\r",
											"pm.environment.set(\"PATIENT_USER_ID\", patientUserId);\r",
											"pm.environment.set(\"CONTACT_PERSON_ID\", doctorId);\r",
											"pm.environment.set(\"CONTACT_RELATION\", 'Doctor');\r",
											"pm.environment.set(\"ADDRESS_ID\", addressId);\r",
											"pm.environment.set(\"ORGANIZATION_ID\", orgId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_EMERGENCY_CONTACT_ID\", jsonRes.Data.EmergencyContact.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact is created\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = pm.environment.get(\"CONTACT_RELATION\");\r",
											"    let expectedIsAvailableForEmergency = true;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM - 5:00 PM\";\r",
											"    let expectedDescription = \"Some description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-3243243334\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"ContactPersonId\":\"{{PERSON_ID}}\",\r\n    \"ContactRelation\":\"{{CONTACT_RELATION}}\",\r\n    \"AddressId\":\"{{ADDRESS_ID}}\",\r\n    \"IsAvailableForEmergency\":true,\r\n    \"TimeOfAvailability\":\"10:00 AM - 5:00 PM\",\r\n    \"Description\":\"Some description here\",\r\n    \"AdditionalPhoneNumbers\":\"+91-3243243334\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts"
									]
								},
								"description": "Add an emergency contact."
							},
							"response": []
						},
						{
							"name": "Create emergency contact with new person name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"let addressId = pm.environment.get('ADDRESS_ID');\r",
											"let orgId = pm.environment.get('ORGANIZATION_ID');\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_EMERGENCY_CONTACT_ID\", jsonRes.Data.EmergencyContact.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact is created\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = \"Patient family member\";\r",
											"    let expectedIsAvailableForEmergency = true;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM - 5:00 PM\";\r",
											"    let expectedDescription = \"Some description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-3243243334\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"ContactPerson\": {\r\n        \"Prefix\": \"Mrs.\",\r\n        \"FirstName\": \"Abc\",\r\n        \"LastName\": \"Xyz\",\r\n        \"Phone\": \"+91-9633699633\",\r\n        \"Email\": \"kiran.kharade@reanfoundation.org\"\r\n    },\r\n    \"ContactRelation\": \"Patient family member\",\r\n    \"Address\": {\r\n        \"AddressLine\": \"GSG Schlesische Straße, Gebäude 3, Schlesische Straße 27\",\r\n        \"City\": \"Berlin\",\r\n        \"Country\": \"Germany\",\r\n        \"PostalCode\": \"10997\"\r\n    },\r\n    \"IsAvailableForEmergency\": true,\r\n    \"TimeOfAvailability\": \"10:00 AM - 5:00 PM\",\r\n    \"Description\": \"Some description here\",\r\n    \"AdditionalPhoneNumbers\": \"+91-3243243334\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts"
									]
								},
								"description": "Add an emergency contact."
							},
							"response": []
						},
						{
							"name": "Get patient emergency contact by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Emergency contact is returned\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = \"Patient family member\";\r",
											"    let expectedIsAvailableForEmergency = true;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM - 5:00 PM\";\r",
											"    let expectedDescription = \"Some description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-3243243334\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/{{PATIENT_EMERGENCY_CONTACT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"{{PATIENT_EMERGENCY_CONTACT_ID}}"
									]
								},
								"description": "Get an emergency contact by emergency contact id."
							},
							"response": [
								{
									"name": "Get patient emergency contact by id",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/patient-emergency-contacts/{{PATIENT_EMERGENCY_CONTACT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patient-emergency-contacts",
												"{{PATIENT_EMERGENCY_CONTACT_ID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "Cross-Origin-Embedder-Policy",
											"value": "require-corp"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1626"
										},
										{
											"key": "ETag",
											"value": "W/\"65a-xG6tgiVIVVs8Vlboe3ijKy9vjyY\""
										},
										{
											"key": "Date",
											"value": "Mon, 19 Sep 2022 03:09:48 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Emergency contact retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"EmergencyContact\": {\n            \"id\": \"42ca3063-1ec3-466c-8e95-1a6ab71f49a6\",\n            \"PatientUserId\": \"2c49cc28-f7de-44a9-82d5-c5489b295e51\",\n            \"ContactPersonId\": \"f646221d-e359-4cb4-9095-bd3cbe11b167\",\n            \"ContactPerson\": {\n                \"id\": \"f646221d-e359-4cb4-9095-bd3cbe11b167\",\n                \"Prefix\": \"Mrs.\",\n                \"FirstName\": \"Abc\",\n                \"MiddleName\": null,\n                \"LastName\": \"Xyz\",\n                \"DisplayName\": \"Mrs. Abc Xyz\",\n                \"Gender\": \"Unknown\",\n                \"SelfIdentifiedGender\": null,\n                \"MaritalStatus\": null,\n                \"BirthDate\": null,\n                \"Age\": \"\",\n                \"Phone\": \"+91-9633699633\",\n                \"Email\": \"kiran.kharade@reanfoundation.org\",\n                \"ImageResourceId\": null,\n                \"ActiveSince\": \"2022-09-19T03:04:10.000Z\",\n                \"Roles\": [],\n                \"Addresses\": []\n            },\n            \"ContactRelation\": \"Patient family member\",\n            \"AddressId\": \"e89561e2-3692-417b-95da-2f01a3bf446f\",\n            \"Address\": {\n                \"id\": \"e89561e2-3692-417b-95da-2f01a3bf446f\",\n                \"Type\": \"Official\",\n                \"AddressLine\": \"\",\n                \"City\": null,\n                \"District\": null,\n                \"State\": null,\n                \"Location\": null,\n                \"Country\": null,\n                \"PostalCode\": null,\n                \"Longitude\": null,\n                \"Lattitude\": null\n            },\n            \"OrganizationId\": null,\n            \"Organization\": null,\n            \"IsAvailableForEmergency\": true,\n            \"TimeOfAvailability\": \"10:00 AM - 5:00 PM\",\n            \"Description\": \"Some description here\",\n            \"AdditionalPhoneNumbers\": \"+91-3243243334\"\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"2c49cc28-f7de-44a9-82d5-c5489b295e51\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-9652315285\",\n        \"Email\": null,\n        \"UserName\": \"kzteut0286\",\n        \"CurrentRoleId\": 2,\n        \"SessionId\": \"96d7de68-5430-46b8-aa59-5eb3e6811d2b\",\n        \"iat\": 1663556412,\n        \"exp\": 1666148412\n    },\n    \"Context\": \"Emergency.Contact.GetById\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.7.000\"\n}"
								}
							]
						},
						{
							"name": "Update an patient emergency contact",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_EMERGENCY_CONTACT_DESCRIPTION\", 'Speech issues');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"    let expectedContactRelation = \"Patient family member\";\r",
											"    let expectedIsAvailableForEmergency = false;\r",
											"    let expectedTimeOfAvailability = \"10:00 AM to 7:00 PM\";\r",
											"    let expectedDescription = \"Some another description here\";\r",
											"    let expectedAdditionalPhoneNumbers = \"+91-1231231233\";\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContact');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('ContactRelation');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('IsAvailableForEmergency');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('TimeOfAvailability');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('Description');\r",
											"    pm.expect(jsonRes.Data.EmergencyContact).to.have.property('AdditionalPhoneNumbers');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.ContactRelation).equals(expectedContactRelation);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.IsAvailableForEmergency).equals(expectedIsAvailableForEmergency);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.TimeOfAvailability).equals(expectedTimeOfAvailability);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.Description).equals(expectedDescription);\r",
											"    pm.expect(jsonRes.Data.EmergencyContact.AdditionalPhoneNumbers).equals(expectedAdditionalPhoneNumbers);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"IsAvailableForEmergency\": false,\r\n    \"TimeOfAvailability\": \"10:00 AM to 7:00 PM\",\r\n    \"Description\": \"Some another description here\",\r\n    \"AdditionalPhoneNumbers\": \"+91-1231231233\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/{{PATIENT_EMERGENCY_CONTACT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"{{PATIENT_EMERGENCY_CONTACT_ID}}"
									]
								},
								"description": "Update the details for an emergency contact."
							},
							"response": []
						},
						{
							"name": "Search patient emergency contact",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of Calorie Record is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyContacts');\r",
											"    pm.expect(jsonRes.Data.EmergencyContacts.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/search?patientUserId={{PATIENT_USER_ID}}&isAvailableForEmergency=true",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"search"
									],
									"query": [
										{
											"key": "createdDateFrom",
											"value": "2021-05-01",
											"disabled": true
										},
										{
											"key": "createdDateTo",
											"value": "2021-12-12",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "IsAvailableForEmergency",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										},
										{
											"key": "contactPersonId",
											"value": "",
											"disabled": true
										},
										{
											"key": "isAvailableForEmergency",
											"value": "true"
										},
										{
											"key": "contactRelation",
											"value": "Doctor",
											"disabled": true
										}
									]
								},
								"description": "Search emergency contact using query parameters."
							},
							"response": [
								{
									"name": "Search patient emergency contact",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/patient-emergency-contacts/search?patientUserId={{PATIENT_USER_ID}}&isAvailableForEmergency=true",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patient-emergency-contacts",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "IsAvailableForEmergency",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ascending",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0",
													"disabled": true
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"disabled": true
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												},
												{
													"key": "contactPersonId",
													"value": "",
													"disabled": true
												},
												{
													"key": "isAvailableForEmergency",
													"value": "true"
												},
												{
													"key": "contactRelation",
													"value": "Doctor",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy",
											"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
										},
										{
											"key": "Cross-Origin-Embedder-Policy",
											"value": "require-corp"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=0"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15552000; includeSubDomains"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "no-referrer"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1771"
										},
										{
											"key": "ETag",
											"value": "W/\"6eb-BzG+NEdZlY3q6q49Mb6qA5Uts4Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 19 Sep 2022 03:10:10 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Total 1 patientEmergencyContact records retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"EmergencyContacts\": {\n            \"TotalCount\": 1,\n            \"RetrievedCount\": 1,\n            \"PageIndex\": 0,\n            \"ItemsPerPage\": 25,\n            \"Order\": \"descending\",\n            \"OrderedBy\": \"CreatedAt\",\n            \"Items\": [\n                {\n                    \"id\": \"42ca3063-1ec3-466c-8e95-1a6ab71f49a6\",\n                    \"PatientUserId\": \"2c49cc28-f7de-44a9-82d5-c5489b295e51\",\n                    \"ContactPersonId\": \"f646221d-e359-4cb4-9095-bd3cbe11b167\",\n                    \"ContactPerson\": {\n                        \"id\": \"f646221d-e359-4cb4-9095-bd3cbe11b167\",\n                        \"Prefix\": \"Mrs.\",\n                        \"FirstName\": \"Abc\",\n                        \"MiddleName\": null,\n                        \"LastName\": \"Xyz\",\n                        \"DisplayName\": \"Mrs. Abc Xyz\",\n                        \"Gender\": \"Unknown\",\n                        \"SelfIdentifiedGender\": null,\n                        \"MaritalStatus\": null,\n                        \"BirthDate\": null,\n                        \"Age\": \"\",\n                        \"Phone\": \"+91-9633699633\",\n                        \"Email\": \"kiran.kharade@reanfoundation.org\",\n                        \"ImageResourceId\": null,\n                        \"ActiveSince\": \"2022-09-19T03:04:10.000Z\",\n                        \"Roles\": [],\n                        \"Addresses\": []\n                    },\n                    \"ContactRelation\": \"Patient family member\",\n                    \"AddressId\": \"e89561e2-3692-417b-95da-2f01a3bf446f\",\n                    \"Address\": {\n                        \"id\": \"e89561e2-3692-417b-95da-2f01a3bf446f\",\n                        \"Type\": \"Official\",\n                        \"AddressLine\": \"\",\n                        \"City\": null,\n                        \"District\": null,\n                        \"State\": null,\n                        \"Location\": null,\n                        \"Country\": null,\n                        \"PostalCode\": null,\n                        \"Longitude\": null,\n                        \"Lattitude\": null\n                    },\n                    \"OrganizationId\": null,\n                    \"Organization\": null,\n                    \"IsAvailableForEmergency\": true,\n                    \"TimeOfAvailability\": \"10:00 AM - 5:00 PM\",\n                    \"Description\": \"Some description here\",\n                    \"AdditionalPhoneNumbers\": \"+91-3243243334\"\n                }\n            ]\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"2c49cc28-f7de-44a9-82d5-c5489b295e51\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-9652315285\",\n        \"Email\": null,\n        \"UserName\": \"kzteut0286\",\n        \"CurrentRoleId\": 2,\n        \"SessionId\": \"96d7de68-5430-46b8-aa59-5eb3e6811d2b\",\n        \"iat\": 1663556412,\n        \"exp\": 1666148412\n    },\n    \"Context\": \"Emergency.Contact.Search\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.7.000\"\n}"
								}
							]
						},
						{
							"name": "Delete patient emergency contact record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-emergency-contacts/{{PATIENT_EMERGENCY_CONTACT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-emergency-contacts",
										"{{PATIENT_EMERGENCY_CONTACT_ID}}"
									]
								},
								"description": "Deletes emergency contact using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Goal",
					"item": [
						{
							"name": "Add Goal record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"GOAL_ID\", jsonRes.Data.Goal.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New Goal record is created\", function () {",
											"",
											"    var expectedPatientUserId = pm.environment.get(\"GOAL_PATIENTUSERID\");",
											"    var expectedGoalAchieved = pm.environment.get(\"GOAL_GOALACHIEVED\");",
											"    var expectedGoalAbandoned = pm.environment.get(\"GOAL_GOALABANDONED\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Goal');",
											"    pm.expect(jsonRes.Data.Goal).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAchieved');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAbandoned');",
											"",
											"    pm.expect(jsonRes.Data.Goal.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Goal.GoalAchieved).equals(expectedGoalAchieved);",
											"    pm.expect(jsonRes.Data.Goal.GoalAbandoned).equals(expectedGoalAbandoned);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"pm.environment.set(\"GOAL_PATIENTUSERID\", userId);\r",
											"pm.environment.set(\"GOAL_CAREPLANID\", 1);\r",
											"pm.environment.set(\"GOAL_TYPECODE\", 1);\r",
											"pm.environment.set(\"GOAL_TYPENAME\", \"Name\");\r",
											"pm.environment.set(\"GOAL_GOALACHIEVED\", true);\r",
											"pm.environment.set(\"GOAL_GOALABANDONED\",false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{GOAL_PATIENTUSERID}}\",\n    \"Title\": \"Daily walk\",\n    \"CarePlanId\": {{GOAL_CAREPLANID}},\n    \"TypeCode\": {{GOAL_TYPECODE}},\n    \"TypeName\": \"{{GOAL_TYPENAME}}\",\n    \"GoalAchieved\": {{GOAL_GOALACHIEVED}},\n    \"GoalAbandoned\": {{GOAL_GOALABANDONED}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-goals",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals"
									]
								},
								"description": "Create new Goal record"
							},
							"response": []
						},
						{
							"name": "Get Goal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New Goal record is created\", function () {",
											"",
											"    var expectedPatientUserId = pm.environment.get(\"GOAL_PATIENTUSERID\");",
											"    var expectedGoalAchieved = pm.environment.get(\"GOAL_GOALACHIEVED\");",
											"    var expectedGoalAbandoned = pm.environment.get(\"GOAL_GOALABANDONED\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Goal');",
											"    pm.expect(jsonRes.Data.Goal).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAchieved');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAbandoned');",
											"",
											"    pm.expect(jsonRes.Data.Goal.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Goal.GoalAchieved).equals(expectedGoalAchieved);",
											"    pm.expect(jsonRes.Data.Goal.GoalAbandoned).equals(expectedGoalAbandoned);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"{{GOAL_ID}}"
									]
								},
								"description": "Gets list of Goal records"
							},
							"response": []
						},
						{
							"name": "Update Goal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New Goal record is created\", function () {",
											"",
											"    var expectedTitle = \"Daily walk for 25 min.\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Goal');",
											"    pm.expect(jsonRes.Data.Goal).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAchieved');",
											"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAbandoned');",
											"",
											"    pm.expect(jsonRes.Data.Goal.Title).equals(expectedTitle);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"GOAL_TYPENAME\", \"Better\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Title\": \"Daily walk for 25 min.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"{{GOAL_ID}}"
									]
								},
								"description": "Update Goal record with id"
							},
							"response": []
						},
						{
							"name": "Search Goal record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of Goal records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('GoalRecords');",
											"    pm.expect(jsonRes.Data.GoalRecords.Items.length).greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/search?createdDateFrom=2021-09-01&createdDateTo=2023-12-30&orderBy=&order=ascending&pageIndex=0&itemsPerPage=25&goalAbandoned=false&goalAchieved=true",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"search"
									],
									"query": [
										{
											"key": "createdDateFrom",
											"value": "2021-09-01"
										},
										{
											"key": "createdDateTo",
											"value": "2023-12-30"
										},
										{
											"key": "orderBy",
											"value": ""
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "goalAbandoned",
											"value": "false"
										},
										{
											"key": "goalAchieved",
											"value": "true"
										},
										{
											"key": "PatientUserId",
											"value": "",
											"disabled": true
										},
										{
											"key": "CarePlanId",
											"value": "",
											"disabled": true
										},
										{
											"key": "TypeCode",
											"value": "",
											"disabled": true
										},
										{
											"key": "TypeName",
											"value": "",
											"disabled": true
										},
										{
											"key": "GoalId",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Search Goal records with filters"
							},
							"response": []
						},
						{
							"name": "Delete Goal record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Goal record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-goals/{{GOAL_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-goals",
										"{{GOAL_ID}}"
									]
								},
								"description": "Delete Goal record with id"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient custom tasks",
					"item": [
						{
							"name": "Add custom task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"CUSTOM_TASK_ID\", jsonRes.Data.UserTask.Action.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New custom task is created\", function () {",
											"",
											"    var userId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.not.be.null;",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property('Action');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Task');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Description');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Category');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Details');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('ScheduledStartTime');",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Action.UserId).equals(userId);",
											"    pm.expect(jsonRes.Data.UserTask.Action.Task).equals(\"Take a walk\");",
											"    pm.expect(jsonRes.Data.UserTask.Action.Description).equals(\"Take a walk 30 min. in morning\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"UserId\": \"{{PATIENT_USER_ID}}\",\n    \"Task\": \"Take a walk\",\n    \"Description\": \"Take a walk 30 min. in morning\",\n    \"Category\": \"Exercise\",\n    \"Details\": {\n        \"ExerciseType\": \"Brisk walk\",\n        \"IntensityLevel\": \"Moderate\"\n    },\n    \"ScheduledStartTime\": \"2022-07-01\",\n    \"IsRecurrent\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/custom-tasks",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"custom-tasks"
									]
								},
								"description": "Create new Goal record"
							},
							"response": []
						},
						{
							"name": "Get custom task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Custom task is retrieved\", function () {",
											"",
											"    var userId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.not.be.null;",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property('Action');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Task');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Description');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Category');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Details');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('ScheduledStartTime');",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Action.UserId).equals(userId);",
											"    pm.expect(jsonRes.Data.UserTask.Action.Task).equals(\"Take a walk\");",
											"    pm.expect(jsonRes.Data.UserTask.Action.Description).equals(\"Take a walk 30 min. in morning\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/custom-tasks/{{CUSTOM_TASK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"custom-tasks",
										"{{CUSTOM_TASK_ID}}"
									]
								},
								"description": "Gets list of Goal records"
							},
							"response": []
						},
						{
							"name": "Update custom task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Custom task is updated\", function () {",
											"",
											"    var userId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.not.be.null;",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property('Action');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Task');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Description');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Category');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('Details');",
											"    pm.expect(jsonRes.Data.UserTask.Action).to.have.property('ScheduledStartTime');",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Action.UserId).equals(userId);",
											"    pm.expect(jsonRes.Data.UserTask.Action.Task).equals(\"Take a jog\");",
											"    pm.expect(jsonRes.Data.UserTask.Action.Description).equals(\"Jog for 30 min. in morning\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"UserId\": \"{{PATIENT_USER_ID}}\",\n    \"Task\": \"Take a jog\",\n    \"Description\": \"Jog for 30 min. in morning\",\n    \"Category\": \"Exercise\",\n    \"Details\": {\n        \"ExerciseType\": \"Jog\",\n        \"IntensityLevel\": \"Hard\"\n    },\n    \"ScheduledStartTime\": \"2022-07-01\",\n    \"IsRecurrent\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/custom-tasks/{{CUSTOM_TASK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"custom-tasks",
										"{{CUSTOM_TASK_ID}}"
									]
								},
								"description": "Update Goal record with id"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient document",
					"item": [
						{
							"name": "Get document types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonRes = pm.response.json();",
											"    var documentType = jsonRes.Data.PatientDocumentTypes[0];",
											"    pm.environment.set(\"DOCUMENT_TYPE\", documentType);",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Document types are returned\", function () {",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDocumentTypes');",
											"    pm.expect(jsonRes.Data.PatientDocumentTypes).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.PatientDocumentTypes.length).greaterThan(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PATIENT_DOCUMENT_ID\", jsonRes.Data.PatientDocument.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Document is uploaded\", function () {\r",
											"\r",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDocument');\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('MedicalPractitionerUserId');\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('ResourceId');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.PatientDocument.ResourceId).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.PatientDocument.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);\r",
											"    pm.expect(jsonRes.Data.PatientDocument.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "enc",
										"value": "multipart/form-data",
										"type": "text"
									},
									{
										"key": "authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Name",
											"type": "file",
											"src": "documents/lab_order_x.pdf"
										},
										{
											"key": "PatientUserId",
											"value": "{{PATIENT_USER_ID}}",
											"contentType": "",
											"description": "User id of the patient - Mandatory",
											"type": "text"
										},
										{
											"key": "DocumentType",
											"value": "Lab report",
											"description": "The type of the document - \n1. \"Lab report\"\n2.\"Imaging study\"\n3.\"Drug prescription\"\n4.\"Diagnostic prescription\"\n5.\"Doctor notes\"\n6.\"Discharge summary\"\n7.\"OPD paper\"\n8\"Unknown\"\n",
											"type": "text"
										},
										{
											"key": "MedicalPractitionerUserId",
											"value": "{{DOCTOR_USER_ID}}",
											"contentType": "",
											"description": "The id of the medical practioner who has created/approved the document",
											"type": "text"
										},
										{
											"key": "MedicalPractionerRole",
											"value": "Doctor",
											"description": "Order related to this document",
											"type": "text",
											"disabled": true
										},
										{
											"key": "AssociatedVisitId",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "AssociatedVisitType",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "AssociatedOrderId",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "AssociatedOrderType",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get document by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Document record is returned\", function () {",
											"",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDocument');",
											"    pm.expect(jsonRes.Data.PatientDocument).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('id');",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('MedicalPractitionerUserId');",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('ResourceId');",
											"    ",
											"    pm.expect(jsonRes.Data.PatientDocument.ResourceId).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.PatientDocument.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.PatientDocument.PatientUserId).equals(expectedPatientUserId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated document record is returned\", function () {",
											"",
											"    var expectedDocumentType = \"Drug prescription\";",
											"    var expectedRecordDate = \"2021-09-24T00:00:00.000Z\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDocument');",
											"    pm.expect(jsonRes.Data.PatientDocument).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('id');",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('RecordDate');",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('ResourceId');",
											"    pm.expect(jsonRes.Data.PatientDocument.DocumentType).equals(expectedDocumentType);",
											"    pm.expect(jsonRes.Data.PatientDocument.RecordDate).equals(expectedRecordDate);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"DocumentType\": \"Drug prescription\",\n    \"MedicalPractitionerUserId\": \"{{DOCTOR_USER_ID}}\",\n    \"MedicalPractionerRole\": \"Doctor\",\n    \"RecordDate\": \"2021-09-24\"\n}\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename document with different file ext",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is failure\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('failure');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"NewName\": \"abc.jpg\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}/rename",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename document with same file ext",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Document is renamed with new file name\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDocument');\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.PatientDocument).to.have.property('FileName');\r",
											"    pm.expect(jsonRes.Data.PatientDocument.FileName).equals('abc.pdf');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"NewName\": \"abc.pdf\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}/rename",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get shareable link for document",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Document is renamed with new file name\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDocumentLink');\r",
											"    pm.expect(jsonRes.Data.PatientDocumentLink).to.not.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{PATIENT_USER_JWT}}"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}/share?durationMinutes=2",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}",
										"share"
									],
									"query": [
										{
											"key": "documentType",
											"value": "PATIENT_LAB_REPORTS",
											"disabled": true
										},
										{
											"key": "durationMinutes",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search documents for patient",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"Date.prototype.addDays = function(days) {\r",
											"    var date = new Date(this.valueOf());\r",
											"    date.setDate(date.getDate() + days);\r",
											"    return date;\r",
											"}\r",
											"\r",
											"function formatDate(date) {\r",
											"    var d = new Date(date),\r",
											"        month = '' + (d.getMonth() + 1),\r",
											"        day = '' + d.getDate(),\r",
											"        year = d.getFullYear();\r",
											"\r",
											"    if (month.length < 2) \r",
											"        month = '0' + month;\r",
											"    if (day.length < 2) \r",
											"        day = '0' + day;\r",
											"\r",
											"    return [year, month, day].join('-');\r",
											"}\r",
											"\r",
											"var d = new Date();\r",
											"\r",
											"var fromDate = formatDate(d);\r",
											"var toDate = formatDate((new Date()).addDays(10));\r",
											"\r",
											"pm.environment.set(\"FROM_DATE\", fromDate);\r",
											"pm.environment.set(\"TO_DATE\", toDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of patient documents is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDocuments');\r",
											"    pm.expect(jsonRes.Data.PatientDocuments.Items.length).greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{PATIENT_USER_JWT}}"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/search?documentType=dru",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"search"
									],
									"query": [
										{
											"key": "documentType",
											"value": "dru",
											"description": "Search by document type. Uses closest matching document types of entered value."
										},
										{
											"key": "medicalPractitionerUserId",
											"value": "{{DOCTOR_USER_ID}}",
											"disabled": true
										},
										{
											"key": "uploadedDateFrom",
											"value": "{{FROM_DATE}}",
											"disabled": true
										},
										{
											"key": "uploadedDateTo",
											"value": "{{TO_DATE}}",
											"disabled": true
										},
										{
											"key": "associatedOrderId",
											"value": "{{ORDER_ID}}",
											"disabled": true
										},
										{
											"key": "associatedVisitId",
											"value": "{{VISIT_ID}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete document by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Document record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/patient-documents/{{PATIENT_DOCUMENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"patient-documents",
										"{{PATIENT_DOCUMENT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User specific routes",
			"item": [
				{
					"name": "User device details",
					"item": [
						{
							"name": "Add user device details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"try {",
											"    pm.environment.set(\"USER_DEVICE_DETAILS_ID\", jsonRes.Data.UserDeviceDetails.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New user device details is created\", function () {",
											"",
											"    var expectedDeviceName = \"Iphone13\";",
											"    var expectedUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedAppVersion = \"1.2.0\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetails');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('id');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('DeviceName');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('UserId');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('AppVersion');",
											"",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.DeviceName).equals(expectedDeviceName);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.UserId).equals(expectedUserId);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.AppVersion).equals(expectedAppVersion);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Token\": \"abcds\",\n    \"UserId\": \"{{PATIENT_USER_ID}}\",\n    \"DeviceName\": \"Iphone13\",\n    \"OSType\": \"aaa\",\n    \"OSVersion\": \"14.2\",\n    \"AppName\": \"Reancare\",\n    \"AppVersion\": \"1.2.0\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-device-details",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user device details by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User device details is returned\", function () {",
											"    var expectedDeviceName = \"Iphone13\";",
											"    var expectedUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedAppVersion = \"1.2.0\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetails');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('id');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('DeviceName');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('UserId');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('AppVersion');",
											"",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.DeviceName).equals(expectedDeviceName);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.UserId).equals(expectedUserId);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.AppVersion).equals(expectedAppVersion);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/{{USER_DEVICE_DETAILS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"{{USER_DEVICE_DETAILS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user device details by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"pm.test(\"Updated user device details is returned\", function () {",
											"    var expectedDeviceName = \"Iphone13\";",
											"    var expectedAppVersion = \"1.3.0\";",
											"",
											"     var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetails');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('id');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('DeviceName');",
											"    pm.expect(jsonRes.Data.UserDeviceDetails).to.have.property('AppVersion');",
											"",
											"",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.DeviceName).equals(expectedDeviceName);",
											"    pm.expect(jsonRes.Data.UserDeviceDetails.AppVersion).equals(expectedAppVersion);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Token\": \"abcds\",\n    \"UserId\": \"237d4b82-d682-43cb-8688-3ec19ee9f2ea\",\n    \"DeviceName\": \"Iphone13\",\n    \"OSType\": \"aaa\",\n    \"OSVersion\": \"14.2\",\n    \"AppName\": \"Rean Health\",\n    \"AppVersion\": \"1.3.0\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/{{USER_DEVICE_DETAILS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"{{USER_DEVICE_DETAILS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search user device details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of user device details is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserDeviceDetailsRecords');",
											"    pm.expect(jsonRes.Data.UserDeviceDetailsRecords.Items.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/search?deviceName=Iphone13&oSType=aaa&oSVersion=14.2&orderBy=DeviceName&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"search"
									],
									"query": [
										{
											"key": "deviceName",
											"value": "Iphone13"
										},
										{
											"key": "oSType",
											"value": "aaa"
										},
										{
											"key": "oSVersion",
											"value": "14.2"
										},
										{
											"key": "orderBy",
											"value": "DeviceName"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "appName",
											"value": "Rean Health",
											"disabled": true
										},
										{
											"key": "appVersion",
											"value": "1.3.0",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "{{PATIENT_USER_ID}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user device details by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User device details is deleted\", function () {",
											"    var expectedValue = true;",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-device-details/{{USER_DEVICE_DETAILS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-device-details",
										"{{USER_DEVICE_DETAILS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User tasks",
					"item": [
						{
							"name": "Get user task categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User action categories are returned\", function () {",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTaskCategories');",
											"    pm.expect(jsonRes.Data.UserTaskCategories).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTaskCategories.length).greaterThan(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/categories",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"categories"
									]
								},
								"description": "Gets list of User Task records"
							},
							"response": []
						},
						{
							"name": "Get user action types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User action types is returned\", function () {",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserActionTypes');",
											"    pm.expect(jsonRes.Data.UserActionTypes).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserActionTypes.length).greaterThan(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/action-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"action-types"
									]
								},
								"description": "Gets list of User Task records"
							},
							"response": []
						},
						{
							"name": "Create task with associated action id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New User Task is created\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Task).eqls(\"Take medication\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"UserId\": \"{{PATIENT_USER_ID}}\",\n    \"Task\": \"Take medication\",\n    \"Category\": \"Custom\",\n    \"ActionType\": \"Medication\",\n    \"ActionId\": \"3dab5783-2b20-4e17-ae88-ef4562c85772\",\n    \"ScheduledStartTime\": \"2021-10-11T05:30:00.000Z\",\n    \"ScheduledEndTime\": \"2021-10-11T07:30:00.000Z\",\n    \"IsRecurrent\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user-tasks",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks"
									]
								},
								"description": "Create new User Task record"
							},
							"response": []
						},
						{
							"name": "Create task without associated action id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
											"    pm.environment.set(\"USER_TASK_DISPLAY_ID\", jsonRes.Data.UserTask.DisplayId);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New User Task is created\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Task).eqls(\"Take a dog for walk\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"UserId\": \"{{PATIENT_USER_ID}}\",\n    \"Task\": \"Take a dog for walk\",\n    \"Category\": \"Custom\",\n    \"ScheduledStartTime\": \"2021-10-11T05:30:00.000Z\",\n    \"ScheduledEndTime\": \"2021-10-11T07:30:00.000Z\",\n    \"IsRecurrent\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user-tasks",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks"
									]
								},
								"description": "Create new User Task record"
							},
							"response": []
						},
						{
							"name": "Get task by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User Task is created\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Task).eqls(\"Take a dog for walk\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"{{USER_TASK_ID}}"
									]
								},
								"description": "Gets list of User Task records"
							},
							"response": []
						},
						{
							"name": "Get task by display id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User Task is created\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Task).eqls(\"Take a dog for walk\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/display-id/{{USER_TASK_DISPLAY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"display-id",
										"{{USER_TASK_DISPLAY_ID}}"
									]
								},
								"description": "Gets list of User Task records"
							},
							"response": []
						},
						{
							"name": "Update task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User Task is updated\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Task).eqls(\"Run a mile\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"USER_TASK_ISRECURRENT\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Task\": \"Run a mile\",\n    \"Category\": \"Exercise\",\n    \"ScheduledStartTime\": \"2021-10-15T09:30:00.000Z\",\n    \"ScheduledEndTime\": \"2021-10-15T12:30:00.000Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"{{USER_TASK_ID}}"
									]
								},
								"description": "Update User Task record with id"
							},
							"response": []
						},
						{
							"name": "Start task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User Task is started\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Status).eqls(\"In-progress\");",
											"    pm.expect(jsonRes.Data.UserTask.Started).eqls(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}/start",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"{{USER_TASK_ID}}",
										"start"
									]
								},
								"description": "Starts User Task record with id"
							},
							"response": []
						},
						{
							"name": "Finish task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User Task is finished\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Status).eqls(\"Completed\");",
											"    pm.expect(jsonRes.Data.UserTask.Finished).eqls(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"USER_TASK_FINISHED\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}/finish",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"{{USER_TASK_ID}}",
										"finish"
									]
								},
								"description": "Finishes User Task record with id"
							},
							"response": []
						},
						{
							"name": "Create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
											"    pm.environment.set(\"USER_TASK_DISPLAY_ID\", jsonRes.Data.UserTask.DisplayId);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"UserId\": \"{{PATIENT_USER_ID}}\",\n    \"Task\": \"Take a dog for walk\",\n    \"Category\": \"Custom\",\n    \"ScheduledStartTime\": \"2021-10-11T05:30:00.000Z\",\n    \"ScheduledEndTime\": \"2021-10-11T07:30:00.000Z\",\n    \"IsRecurrent\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user-tasks",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks"
									]
								},
								"description": "Create new User Task record"
							},
							"response": []
						},
						{
							"name": "Cancel task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User Task is cancelled\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
											"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
											"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
											"",
											"    pm.expect(jsonRes.Data.UserTask.Status).eqls(\"Cancelled\");",
											"    pm.expect(jsonRes.Data.UserTask.Cancelled).eqls(true);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"USER_TASK_FINISHED\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}/cancel",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"{{USER_TASK_ID}}",
										"cancel"
									]
								},
								"description": "Finishes User Task record with id"
							},
							"response": []
						},
						{
							"name": "Search user tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of User task records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTasks');",
											"    pm.expect(jsonRes.Data.UserTasks.Items.length).greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/search?userId={{PATIENT_USER_ID}}&orderBy=ScheduledStartTime&order=descending&scheduledFrom=2022-06-06&scheduledTo=2023-06-06",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"search"
									],
									"query": [
										{
											"key": "task",
											"value": "",
											"disabled": true
										},
										{
											"key": "actionType",
											"value": "",
											"disabled": true
										},
										{
											"key": "status",
											"value": "completed",
											"description": "The other possible options are - \n1) inProgress : Tasks which are currently in progress\n2) pending / upcoming- Upcoming tasks\n3) completed- Finished tasks\n4) delayed / overdue- Tasks which are delayed beyond their scheduled duration\n5) cancelled- Tasks which have been cancelled\n",
											"disabled": true
										},
										{
											"key": "actionId",
											"value": "{{MEDICATION_CONSUMPTION_ID}}",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "{{PATIENT_USER_ID}}"
										},
										{
											"key": "category",
											"value": "Medication",
											"disabled": true
										},
										{
											"key": "dateFrom",
											"value": "2022-02-16",
											"disabled": true
										},
										{
											"key": "dateTo",
											"value": "2022-02-16",
											"disabled": true
										},
										{
											"key": "createdDateTo",
											"value": "2021-10-14",
											"disabled": true
										},
										{
											"key": "createdDateFrom",
											"value": "2021-09-01",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "ScheduledStartTime"
										},
										{
											"key": "order",
											"value": "descending"
										},
										{
											"key": "scheduledFrom",
											"value": "2022-06-06"
										},
										{
											"key": "scheduledTo",
											"value": "2023-06-06"
										}
									]
								},
								"description": "Search User Task records with filters"
							},
							"response": []
						},
						{
							"name": "Get task summary for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Task summary for the day is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('UserTaskSummaryForDay');",
											"    pm.expect(jsonRes.Data.UserTaskSummaryForDay).to.have.property('TotalCount');",
											"    pm.expect(jsonRes.Data.UserTaskSummaryForDay).to.have.property('CompletedCount');",
											"    pm.expect(jsonRes.Data.UserTaskSummaryForDay).to.have.property('InProgressCount');",
											"    pm.expect(jsonRes.Data.UserTaskSummaryForDay).to.have.property('PendingCount');",
											"    pm.expect(jsonRes.Data.UserTaskSummaryForDay).to.have.property('CompletedTasks');",
											"    pm.expect(jsonRes.Data.UserTaskSummaryForDay).to.have.property('InProgressTasks');",
											"    pm.expect(jsonRes.Data.UserTaskSummaryForDay).to.have.property('PendingTasks');",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/users/{{PATIENT_USER_ID}}/summary-for-day/2022-02-16",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"users",
										"{{PATIENT_USER_ID}}",
										"summary-for-day",
										"2022-02-16"
									]
								},
								"description": "Get Summary of User Task record"
							},
							"response": []
						},
						{
							"name": "Delete task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"User Task record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user-tasks",
										"{{USER_TASK_ID}}"
									]
								},
								"description": "Delete User Task record with id"
							},
							"response": []
						}
					]
				}
			],
			"description": "## APIs to manage users\n\nThese set of APIs are meant to add/retrieve/update/delete/search users for different types, such as patients' doctors, lab-users and pharmacists."
		},
		{
			"name": "Wellness",
			"item": [
				{
					"name": "Nutrition",
					"item": [
						{
							"name": "Water consumption",
							"item": [
								{
									"name": "Add water consumption record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"try {",
													"    pm.environment.set(\"NUTRITION_WATER_CONSUMPTION_ID\", jsonRes.Data.WaterConsumption.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"New water consumption record is created\", function () {",
													"    var expectedValue = 7;",
													"    var expectedTime = \"2021-09-21T00:00:00.000Z\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumption');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Volume');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('PatientUserId');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Time');",
													"",
													"",
													"    pm.expect(jsonRes.Data.WaterConsumption.Volume).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.WaterConsumption.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(jsonRes.Data.WaterConsumption.Time).equals(expectedTime);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Volume\": 7,\n    \"Time\": \"2021-09-21\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get water consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"Water consumption record is returned\", function () {",
													"    var expectedValue = 7;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumption');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Volume');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.WaterConsumption.Volume).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.WaterConsumption.PatientUserId).equals(expectedPatientUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/{{NUTRITION_WATER_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"{{NUTRITION_WATER_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update water consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"Updated water consumption record is returned\", function () {",
													"    var expectedValue = 10;",
													"    var expectedTime= \"2021-09-21T00:00:00.000Z\";",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumption');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Volume');",
													"    pm.expect(jsonRes.Data.WaterConsumption).to.have.property('Time');",
													"",
													"    pm.expect(jsonRes.Data.WaterConsumption.Volume).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.WaterConsumption.Time).equals(expectedTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Volume\": 10,\n    \"Time\": \"2021-09-21\"\n\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/{{NUTRITION_WATER_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"{{NUTRITION_WATER_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search water consumption records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"List of water consumption records is returned\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('WaterConsumptionRecords');",
													"    pm.expect(jsonRes.Data.WaterConsumptionRecords.Items.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/search?dailyVolumeFrom=5&dailyVolumeTo=12&order=ascending&pageIndex=0&itemsPerPage=25&orderBy=volume&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"search"
											],
											"query": [
												{
													"key": "dailyVolumeFrom",
													"value": "5"
												},
												{
													"key": "dailyVolumeTo",
													"value": "12"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "orderBy",
													"value": "volume"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete water consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"pm.test(\"Water consumption record is deleted\", function () {",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/water-consumptions/{{NUTRITION_WATER_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"water-consumptions",
												"{{NUTRITION_WATER_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Food Consumption",
							"item": [
								{
									"name": "Add food consumption record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"NUTRITION_FOOD_CONSUMPTION_ID\", jsonRes.Data.FoodConsumption.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is created\", function () {",
													"",
													"    var expectedValue = \"roti\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumption');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.FoodConsumption.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Food\": \"roti\",\n    \"Description\": \"mins\",\n    \"ConsumedAs\": \"Lunch\",\n    \"Calories\": 100,\n    \"StartTime\": \"2021-09-16\",\n    \"EndTime\": \"2021-09-16\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get food consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is returned\", function () {",
													"",
													"    var expectedValue = \"roti\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumption');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('id');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.FoodConsumption.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get food consumption records by event name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is returned\", function () {",
													"",
													"    var expectedValue = \"Lunch\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumptionEvent');",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.have.property('Foods');",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent.Foods.length).greaterThan(0);",
													"    pm.expect(jsonRes.Data.FoodConsumptionEvent.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{PATIENT_USER_ID}}/consumed-as/lunch",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{PATIENT_USER_ID}}",
												"consumed-as",
												"lunch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get nutrition questionnaire",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is returned\", function () {",
													"",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('NutritionQuestionnaire');",
													"    pm.expect(jsonRes.Data.NutritionQuestionnaire).to.not.be.empty;",
													"    ",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/questionnaire",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"questionnaire"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update food consumption record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated food consumption record is returned\", function () {",
													"",
													"    var expectedFood = \"Rice\";",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumption');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('Food');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('StartTime');",
													"    pm.expect(jsonRes.Data.FoodConsumption).to.have.property('EndTime');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumption.Food).equals(expectedFood);",
													"    pm.expect(jsonRes.Data.FoodConsumption.ConsumedAs).equals(\"Dinner\");",
													"   ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Food\": \"Rice\",\n    \"Description\": \"mins\",\n    \"ConsumedAs\": \"Dinner\",\n    \"Calories\": 200,\n    \"StartTime\": \"2021-09-16T09:45:00.000Z\",\n    \"EndTime\": \"2021-09-16T09:50:00.000Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search food consumption records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of food consumption records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumptionRecords');",
													"    pm.expect(jsonRes.Data.FoodConsumptionRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/search?pageIndex=0&itemsPerPage=25&orderBy=Food&order=ascending",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"search"
											],
											"query": [
												{
													"key": "food",
													"value": "Basundi",
													"disabled": true
												},
												{
													"key": "consumedAs",
													"value": "Lunch",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "dateFrom",
													"value": "2021-09-16",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "2021-09-17",
													"disabled": true
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "Food"
												},
												{
													"key": "order",
													"value": "ascending"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get food consumption records for day",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption records are returned\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('FoodConsumptionForDay');",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('Events');",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('PatientUserId');",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay).to.have.property('Date');",
													"",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay.Events.length).greaterThan(0);",
													"    pm.expect(jsonRes.Data.FoodConsumptionForDay.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{PATIENT_USER_ID}}/for-day/2021-09-16",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{PATIENT_USER_ID}}",
												"for-day",
												"2021-09-16"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete food consumption by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Food consumption record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/nutrition/food-consumptions/{{NUTRITION_FOOD_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"nutrition",
												"food-consumptions",
												"{{NUTRITION_FOOD_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Exercise",
					"item": [
						{
							"name": "Meditation",
							"item": [
								{
									"name": "Add meditation record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"EXERCISE_MEDITATION_ID\", jsonRes.Data.Meditation.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New meditation record is created\", function () {",
													"",
													"    var expectedValue = \"Breathing\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.Meditation.Meditation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Meditation.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Meditation\": \"Breathing\",\n    \"Description\": \"\",\n    \"Category\": \"\",\n    \"StartTime\": \"2021-09-21T05:30:00.000Z\",\n    \"EndTime\": \"2021-09-21T05:45:00.000Z\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get meditation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Meditation record is returned\", function () {",
													"",
													"    var expectedValue = \"Breathing\";",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.Meditation.Meditation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Meditation.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/{{EXERCISE_MEDITATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"{{EXERCISE_MEDITATION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update meditation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated meditation record is returned\", function () {",
													"",
													"    var expectedValue = \"Breathing\";",
													"    var expectedStartTime = \"2021-09-22T06:30:00.000Z\";",
													"    var expectedEndTime = \"2021-09-22T06:45:00.000Z\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('Meditation');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('StartTime');",
													"    pm.expect(jsonRes.Data.Meditation).to.have.property('EndTime');",
													"",
													"    pm.expect(jsonRes.Data.Meditation.Meditation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Meditation.StartTime).equals(expectedStartTime);",
													"    pm.expect(jsonRes.Data.Meditation.EndTime).equals(expectedEndTime);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Meditation\": \"Breathing\",\n    \"Description\": \"\",\n    \"Category\": \"Mindfulness\",\n    \"StartTime\": \"2021-09-22T06:30:00.000Z\",\n    \"EndTime\": \"2021-09-22T06:45:00.000Z\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/{{EXERCISE_MEDITATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"{{EXERCISE_MEDITATION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search meditation records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of meditation records are returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MeditationRecords');",
													"    pm.expect(jsonRes.Data.MeditationRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/search?meditation=Breathing&orderBy=meditation&order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"search"
											],
											"query": [
												{
													"key": "meditation",
													"value": "Breathing"
												},
												{
													"key": "orderBy",
													"value": "meditation"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete meditation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Meditation record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/meditations/{{EXERCISE_MEDITATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"meditations",
												"{{EXERCISE_MEDITATION_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Physical activity",
							"item": [
								{
									"name": "Add physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"EXERCISE_PHYSICAL_ACTIVITY_ID\", jsonRes.Data.PhysicalActivity.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New physical activity record is created\", function () {\r",
													"\r",
													"    var expectedExercise = \"Dead lift\";\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivity');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Exercise');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Category');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Exercise).equals(expectedExercise);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Exercise\": \"Dead lift\",\r\n    \"Description\": \"30 kg\",\r\n    \"Category\": \"Strength training\",\r\n    \"CaloriesBurned\": 120,\r\n    \"Intensity\": \"Moderate\",\r\n    \"StartTime\": \"2021-09-20T00:00:00.000Z\",\r\n    \"EndTime\": \"2021-09-20T00:15:00.000Z\",\r\n    \"DurationInMin\": 15\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get physical activity by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Physical activity record is returned\", function () {\r",
													"\r",
													"    var expectedExercise = \"Dead lift\";\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivity');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Exercise');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Category');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Exercise).equals(expectedExercise);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/{{EXERCISE_PHYSICAL_ACTIVITY_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"{{EXERCISE_PHYSICAL_ACTIVITY_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated physical activity record is returned\", function () {\r",
													"\r",
													"    var expectedExercise = \"Push up\";\r",
													"    var expectedIntensity = \"Vigorous\";\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivity');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Exercise');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('Category');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Exercise).equals(expectedExercise);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.Intensity).equals(expectedIntensity);\r",
													"    pm.expect(jsonRes.Data.PhysicalActivity.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Exercise\": \"Push up\",\r\n    \"Description\": \"Straight\",\r\n    \"Category\": \"Strength training\",\r\n    \"CaloriesBurned\": 40,\r\n    \"Intensity\": \"Vigorous\",\r\n    \"StartTime\": \"2021-09-20T00:00:00.000Z\",\r\n    \"EndTime\": \"2021-09-20T00:00:05.000Z\",\r\n    \"DurationInMin\": 5\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/{{EXERCISE_PHYSICAL_ACTIVITY_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"{{EXERCISE_PHYSICAL_ACTIVITY_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of physical activity is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PhysicalActivities');\r",
													"    pm.expect(jsonRes.Data.PhysicalActivities.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/search?orderBy=Category&order=ascending&pageIndex=0&itemsPerPage=25",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"search"
											],
											"query": [
												{
													"key": "exercise",
													"value": "Dead lift",
													"disabled": true
												},
												{
													"key": "category",
													"value": "Strength training",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "Category"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete physical activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Physical activity record is deleted\", function () {\r",
													"\r",
													"    var expectedValue = true;\r",
													"    var jsonRes = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/exercise/physical-activities/{{EXERCISE_PHYSICAL_ACTIVITY_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"exercise",
												"physical-activities",
												"{{EXERCISE_PHYSICAL_ACTIVITY_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Daily records",
					"item": [
						{
							"name": "Heart points records",
							"item": [
								{
									"name": "Create heart points record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let personId = pm.environment.get('PERSON_ID');\r",
													"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
													"pm.environment.set(\"HEART_POINT_PERSONID\", personId);\r",
													"pm.environment.set(\"HEART_POINT_PATIENTUSERID\", patientUserId);\r",
													"pm.environment.set(\"HEART_POINT_VALUE\", 120);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"HEART_POINT_ID\", jsonRes.Data.HeartPoints.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New Heart point record is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"HEART_POINT_PATIENTUSERID\");\r",
													"    var expectedHeartPoints = pm.environment.get(\"HEART_POINT_VALUE\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('HeartPoints');\r",
													"\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.HeartPoints).equals(120);\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{HEART_POINT_PERSONID}}\",\r\n    \"PatientUserId\": \"{{HEART_POINT_PATIENTUSERID}}\",\r\n    \"HeartPoints\": {{HEART_POINT_VALUE}},\r\n    \"Unit\": \"{{HEART_POINT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points"
											]
										},
										"description": "Add A HeartPoint."
									},
									"response": []
								},
								{
									"name": "Get heart points record by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Calorie record should have correct data\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"HEART_POINT_PATIENTUSERID\");\r",
													"    var expectedHeartPoints = pm.environment.get(\"HEART_POINT_VALUE\");\r",
													"    var expectedHeartPointUnit = pm.environment.get(\"HEART_POINT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.HeartPoints).equals(120);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.Unit).equals(expectedHeartPointUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/{{HEART_POINT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"{{HEART_POINT_ID}}"
											]
										},
										"description": "Get an HeartPoint by HeartPoint id."
									},
									"response": []
								},
								{
									"name": "Update a heart points record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"HEART_POINT_Value\", 150);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Correct updates should be reflected\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"HEART_POINT_PATIENTUSERID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('HeartPoints');\r",
													"    pm.expect(jsonRes.Data.HeartPoints).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.HeartPoints.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.HeartPoints.HeartPoints).equals(150);\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{HEART_POINT_PERSONID}}\",\r\n    \"PatientUserId\": \"{{HEART_POINT_PATIENTUSERID}}\",\r\n    \"HeartPoints\": 150,\r\n    \"Unit\": \"{{HEART_POINT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/{{HEART_POINT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"{{HEART_POINT_ID}}"
											]
										},
										"description": "Update the details for an HeartPoint."
									},
									"response": []
								},
								{
									"name": "Search heart points records",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of heart point records is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('HeartPointsRecords');\r",
													"    pm.expect(jsonRes.Data.HeartPointsRecords.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/search?pageIndex=0&itemsPerPage=25&minValue=10",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "CaloriesBurned",
													"description": "The name of the Parameter to order by",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "personId",
													"value": "",
													"description": "Person ID to filter",
													"disabled": true
												},
												{
													"key": "patientUserId",
													"value": "",
													"description": "Patient User ID to filter",
													"disabled": true
												},
												{
													"key": "minValue",
													"value": "10",
													"description": "filter using heartpoint minimum value"
												},
												{
													"key": "maxValue",
													"value": "100",
													"description": "filter using heartpoint maximum value",
													"disabled": true
												}
											]
										},
										"description": "Search HeartPoints using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete a heart points record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/heart-points/{{HEART_POINT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"heart-points",
												"{{HEART_POINT_ID}}"
											]
										},
										"description": "Deletes Heart points using ID"
									},
									"response": []
								}
							]
						},
						{
							"name": "Calorie balance records",
							"item": [
								{
									"name": "Create calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let personId = pm.environment.get('PERSON_ID');\r",
													"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
													"pm.environment.set(\"CALORIE_BALANCE_PATIENTUSERID\", patientUserId);\r",
													"pm.environment.set(\"CALORIE_BALANCE_CALORIESCONSUMED\", 120);\r",
													"pm.environment.set(\"CALORIE_BALANCE_CALORIESBURNED\", 100);\r",
													"pm.environment.set(\"CALORIE_BALANCE_UNIT\", 'kcal');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"CALORIE_BALANCE_ID\", jsonRes.Data.CalorieBalance.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New Calorie Balance record is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"CALORIE_BALANCE_PATIENTUSERID\");\r",
													"    var expectedCalorieConsumed = pm.environment.get(\"CALORIE_BALANCE_CALORIESCONSUMED\");\r",
													"    var expectedCalorieBurned = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");\r",
													"    var expectedCalorieUnit = pm.environment.get(\"CALORIE_BALANCE_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalance');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesConsumed');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesConsumed).equals(expectedCalorieConsumed);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesBurned).equals(expectedCalorieBurned);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.Unit).equals(expectedCalorieUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{CALORIE_BALANCE_PERSONID}}\",\r\n    \"PatientUserId\": \"{{CALORIE_BALANCE_PATIENTUSERID}}\",\r\n    \"CaloriesConsumed\": {{CALORIE_BALANCE_CALORIESCONSUMED}},\r\n    \"CaloriesBurned\": {{CALORIE_BALANCE_CALORIESBURNED}},\r\n    \"Unit\": \"{{CALORIE_BALANCE_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances"
											]
										},
										"description": "Add an address."
									},
									"response": []
								},
								{
									"name": "Get calorie balance record by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Calorie record should have correct data\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"CALORIE_BALANCE_PATIENTUSERID\");\r",
													"    var expectedCalorieConsumed = pm.environment.get(\"CALORIE_BALANCE_CALORIESCONSUMED\");\r",
													"    var expectedCalorieBurned = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");\r",
													"    var expectedCalorieUnit = pm.environment.get(\"CALORIE_BALANCE_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalance');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesConsumed');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesConsumed).equals(Number(expectedCalorieConsumed));\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.CaloriesBurned).equals(Number(expectedCalorieBurned));\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.Unit).equals(expectedCalorieUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/{{CALORIE_BALANCE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"{{CALORIE_BALANCE_ID}}"
											]
										},
										"description": "Get an address by address id."
									},
									"response": []
								},
								{
									"name": "Update an calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let height = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");",
													"pm.environment.set(\"CALORIE_BALANCE_CALORIESBURNED\", Number(height) + 10);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Correct updates should be reflected\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"CALORIE_BALANCE_PATIENTUSERID\");\r",
													"    var expectedCalorieConsumed = pm.environment.get(\"CALORIE_BALANCE_CALORIESCONSUMED\");\r",
													"    var expectedCalorieBurned = pm.environment.get(\"CALORIE_BALANCE_CALORIESBURNED\");\r",
													"    var expectedCalorieUnit = pm.environment.get(\"CALORIE_BALANCE_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalance');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesConsumed');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('CaloriesBurned');\r",
													"    pm.expect(jsonRes.Data.CalorieBalance).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.CalorieBalance.CaloriesConsumed)).equals(Number(expectedCalorieConsumed));\r",
													"    pm.expect(Number(jsonRes.Data.CalorieBalance.CaloriesBurned)).equals(Number(expectedCalorieBurned));\r",
													"    pm.expect(jsonRes.Data.CalorieBalance.Unit).equals(expectedCalorieUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PersonId\": \"{{CALORIE_BALANCE_PERSONID}}\",\r\n    \"PatientUserId\": \"{{CALORIE_BALANCE_PATIENTUSERID}}\",\r\n    \"CaloriesConsumed\": {{CALORIE_BALANCE_CALORIESCONSUMED}},\r\n    \"CaloriesBurned\": {{CALORIE_BALANCE_CALORIESBURNED}},\r\n    \"Unit\": \"{{CALORIE_BALANCE_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/{{CALORIE_BALANCE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"{{CALORIE_BALANCE_ID}}"
											]
										},
										"description": "Update the details for an address."
									},
									"response": []
								},
								{
									"name": "Search calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of Calorie Record is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CalorieBalanceRecords');\r",
													"    pm.expect(jsonRes.Data.CalorieBalanceRecords.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/search?pageIndex=0&itemsPerPage=25",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "CaloriesBurned",
													"description": "The name of the Parameter to order by",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "patientUserId",
													"value": "",
													"description": "Patient User ID to filter",
													"disabled": true
												},
												{
													"key": "minCaloriesConsumedValue",
													"value": "",
													"description": "Min calories consumed",
													"disabled": true
												},
												{
													"key": "maxCaloriesConsumedValue",
													"value": "",
													"description": "Max calories consumed",
													"disabled": true
												},
												{
													"key": "minCaloriesBurnedValue",
													"value": "",
													"description": "Min calories burned",
													"disabled": true
												},
												{
													"key": "maxCaloriesBurnedValue",
													"value": "",
													"description": "Max calories burned",
													"disabled": true
												},
												{
													"key": "minCalorieBalanceValue",
													"value": "",
													"description": "Min calories balance value",
													"disabled": true
												},
												{
													"key": "maxCalorieBalanceValue",
													"value": "",
													"description": "Max calories balance value",
													"disabled": true
												}
											]
										},
										"description": "Search addresses using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete calorie balance record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/calorie-balances/{{CALORIE_BALANCE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"calorie-balances",
												"{{CALORIE_BALANCE_ID}}"
											]
										},
										"description": "Search addresses using query parameters."
									},
									"response": []
								}
							]
						},
						{
							"name": "Move minutes",
							"item": [
								{
									"name": "Add move minutes record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"DAILY_MOVE_MINUTES_ID\", jsonRes.Data.MoveMinutes.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New move minutes record is created\", function () {",
													"",
													"    var expectedValue = 50;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('id');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.MoveMinutes.MoveMinutes).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.MoveMinutes.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"MoveMinutes\": 50,\n    \"Unit\": \"mins\",\n    \"RecordDate\": \"2021-09-15\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get move minutes record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Move minutes record is returned\", function () {",
													"",
													"    var expectedValue = 50;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('id');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.MoveMinutes.MoveMinutes).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.MoveMinutes.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/{{DAILY_MOVE_MINUTES_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"{{DAILY_MOVE_MINUTES_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update move minutes record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated move minutes record is returned\", function () {",
													"",
													"    var expectedMoveMinutes = 85;",
													"    var expectedRecordDate = \"2021-09-14T00:00:00.000Z\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('MoveMinutes');",
													"    pm.expect(jsonRes.Data.MoveMinutes).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.MoveMinutes.MoveMinutes).equals(expectedMoveMinutes);",
													"    pm.expect(jsonRes.Data.MoveMinutes.RecordDate).equals(expectedRecordDate);    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"MoveMinutes\": 85,\n    \"Unit\": \"mins\",\n    \"RecordDate\": \"2021-09-14\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/{{DAILY_MOVE_MINUTES_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"{{DAILY_MOVE_MINUTES_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search move minutes records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of move minutes records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('MoveMinutesRecords');",
													"    pm.expect(jsonRes.Data.MoveMinutesRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/search?orderBy=MoveMinutes&order=ascending&pageIndex=0&itemsPerPage=25&minValue=60&maxValue=90&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-09-14",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-15",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "MoveMinutes"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "60"
												},
												{
													"key": "maxValue",
													"value": "90"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete move minutes record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Move minutes record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/move-minutes/{{DAILY_MOVE_MINUTES_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"move-minutes",
												"{{DAILY_MOVE_MINUTES_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step count",
							"item": [
								{
									"name": "Add step count record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"DAILY_STEP_COUNT_ID\", jsonRes.Data.StepCount.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New step count record is created\", function () {",
													"",
													"    var expectedValue = 1590;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('id');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.StepCount.StepCount).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.StepCount.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"StepCount\": 1590,\n    \"RecordDate\": \"2021-09-15\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get step count record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Step count record is returned\", function () {",
													"",
													"    var expectedValue = 1590;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('id');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.StepCount.StepCount).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.StepCount.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/{{DAILY_STEP_COUNT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"{{DAILY_STEP_COUNT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update step count record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated step count record is returned\", function () {",
													"",
													"    var expectedStepCount = 10000;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('StepCount');",
													"    pm.expect(jsonRes.Data.StepCount).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.StepCount.StepCount).equals(expectedStepCount);",
													"    var recordDate = jsonRes.Data.StepCount.RecordDate;",
													"    if (recordDate) {",
													"        recordDate = recordDate.split('T')[0];",
													"    } ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"StepCount\": 10000,\n    \"RecordDate\": \"2021-09-14\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/{{DAILY_STEP_COUNT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"{{DAILY_STEP_COUNT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search step count records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of move minutes records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('StepCountRecords');",
													"    pm.expect(jsonRes.Data.StepCountRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/search?orderBy=StepCount&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=25000&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-09-14",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-15",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "StepCount"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "25000"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete step count record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Step count record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/step-counts/{{DAILY_STEP_COUNT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"step-counts",
												"{{DAILY_STEP_COUNT_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Sleep",
							"item": [
								{
									"name": "Add Sleep record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"SLEEP_RECORD_ID\", jsonRes.Data.SleepRecord.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Sleep record is created\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedSleepDuration = pm.environment.get(\"SLEEP_DURATION\");",
													"    var expectedUnit = pm.environment.get(\"SLEEP_UNIT\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecord');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('id');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('Unit');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);",
													"    pm.expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"SLEEP_DURATION\", 8);",
													"pm.environment.set(\"SLEEP_UNIT\", 'hrs');",
													"pm.environment.set(\"SLEEP_RECORDDATE\", '2021-09-20');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"SleepDuration\": \"{{SLEEP_DURATION}}\",\n    \"Unit\": \"{{SLEEP_UNIT}}\",\n    \"RecordDate\": \"{{SLEEP_RECORDDATE}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Sleep record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Sleep record is returned\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedSleepDuration = pm.environment.get(\"SLEEP_DURATION\");",
													"    var expectedUnit = pm.environment.get(\"SLEEP_UNIT\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecord');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('id');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('Unit');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);",
													"    pm.expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/{{SLEEP_RECORD_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"{{SLEEP_RECORD_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Sleep record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated sleep record is returned\", function () {",
													"",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedSleepDuration = 10;",
													"    var expectedUnit = pm.environment.get(\"SLEEP_UNIT\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecord');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('id');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('Unit');",
													"    pm.expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);",
													"    pm.expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"SleepDuration\": \"10\",\n    \"Unit\": \"{{SLEEP_UNIT}}\",\n    \"RecordDate\": \"{{SLEEP_RECORDDATE}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/{{SLEEP_RECORD_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"{{SLEEP_RECORD_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Sleep records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of daily sleep records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('SleepRecords');",
													"    pm.expect(jsonRes.Data.SleepRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/search?orderBy=RecordDate&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=15&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-09-14",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-15",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "RecordDate"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "15"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Sleep record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Sleep record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/wellness/daily-records/sleep/{{SLEEP_RECORD_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"wellness",
												"daily-records",
												"sleep",
												"{{SLEEP_RECORD_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Food component monitoring",
					"item": [
						{
							"name": "Add food compenent monitoring record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"try {",
											"    pm.environment.set(\"FOOD_COMPONENT_MONITORING_ID\", jsonRes.Data.FoodComponentMonitoring.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"pm.test(\"New food component monitoring record is created\", function () {",
											"    var expectedAmount = 4;",
											"    var expectedTypeOfFood = \"Sugar\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('FoodComponentMonitoring');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('id');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('Amount');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('MonitoredFoodComponent');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('PatientUserId');",
											"",
											"",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring.Amount).equals(expectedAmount);",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring.MonitoredFoodComponent).equals(expectedTypeOfFood);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"MonitoredFoodComponent\": \"Sugar\",\n    \"Amount\": 4,\n    \"Unit\": \"grms\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/wellness/food-components-monitoring/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"wellness",
										"food-components-monitoring",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get food component monitoring record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"pm.test(\"Food component monitoring record is returned\", function () {",
											"    var expectedAmount = 4;",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('FoodComponentMonitoring');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('id');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('Amount');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('PatientUserId');",
											"",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring.Amount).equals(expectedAmount);",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring.PatientUserId).equals(expectedPatientUserId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/wellness/food-components-monitoring/{{FOOD_COMPONENT_MONITORING_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"wellness",
										"food-components-monitoring",
										"{{FOOD_COMPONENT_MONITORING_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update food component record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"pm.test(\"Updated food component monitoring record is returned\", function () {",
											"    var expectedAmount = 10;",
											"    var expectedTypeOfFood= \"Sodium salt\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('FoodComponentMonitoring');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('Amount');",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring).to.have.property('MonitoredFoodComponent');",
											"",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring.Amount).equals(expectedAmount);",
											"    pm.expect(jsonRes.Data.FoodComponentMonitoring.MonitoredFoodComponent).equals(expectedTypeOfFood);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"MonitoredFoodComponent\": \"Sodium salt\",\n    \"Amount\": 10,\n    \"Unit\": \"mg\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/wellness/food-components-monitoring/{{FOOD_COMPONENT_MONITORING_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"wellness",
										"food-components-monitoring",
										"{{FOOD_COMPONENT_MONITORING_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search food component monitoring records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"pm.test(\"List of food component monitoring records is returned\", function () {",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('FoodComponentMonitoringRecords');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/wellness/food-components-monitoring/search?amountFrom=4&amountTo=12&order=ascending&pageIndex=0&itemsPerPage=25&orderBy=amount&patientUserId={{PATIENT_USER_ID}}&monitoredFoodComponent=Sugar",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"wellness",
										"food-components-monitoring",
										"search"
									],
									"query": [
										{
											"key": "amountFrom",
											"value": "4"
										},
										{
											"key": "amountTo",
											"value": "12"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "orderBy",
											"value": "amount"
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										},
										{
											"key": "monitoredFoodComponent",
											"value": "Sugar"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete food component monitoring record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"pm.test(\"Food component monitoring record is deleted\", function () {",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/wellness/food-components-monitoring/{{FOOD_COMPONENT_MONITORING_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"wellness",
										"food-components-monitoring",
										"{{FOOD_COMPONENT_MONITORING_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Educational",
			"item": [
				{
					"name": "Knowledge nuggets",
					"item": [
						{
							"name": "Add knowledge nugget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"KNOWLEDGE_NUGGET_ID\", jsonRes.Data.KnowledgeNugget.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Knowledge nugget record is created\", function () {",
											"",
											"    var expectedValue = \"Some topic\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"    ",
											"    pm.expect(jsonRes.Data.KnowledgeNugget.TopicName).equals(expectedValue);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TopicName\": \"Some topic\",\n    \"BriefInformation\": \"Brief information for topic\",\n    \"DetailedInformation\": \"Detailed information for the topic\",\n    \"AdditionalResources\": [],\n    \"Tags\": [\n        \"BP\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get knowledge nugget by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Knowledge nugget record is returned\", function () {",
											"",
											"    var expectedValue = \"Some topic\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"",
											"    pm.expect(jsonRes.Data.KnowledgeNugget.TopicName).equals(expectedValue);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/{{KNOWLEDGE_NUGGET_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"{{KNOWLEDGE_NUGGET_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update knowledge nugget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated knowledge nugget record is returned\", function () {",
											"",
											"    var expectedValue = \"Hypertension\";",
											" ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"",
											"    pm.expect(jsonRes.Data.KnowledgeNugget.TopicName).equals(expectedValue);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TopicName\": \"Hypertension\"   \n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/{{KNOWLEDGE_NUGGET_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"{{KNOWLEDGE_NUGGET_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search knowledge nugget by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of knowledge nugget records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNuggetRecords');",
											"    pm.expect(jsonRes.Data.KnowledgeNuggetRecords.Items.length).to.be.greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/search?TopicName=Heart failure&Tag=Heart&orderBy=TopicName&order=ascending&pageIndex=0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"search"
									],
									"query": [
										{
											"key": "TopicName",
											"value": "Heart failure"
										},
										{
											"key": "Tag",
											"value": "Heart"
										},
										{
											"key": "orderBy",
											"value": "TopicName"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete knowledge nugget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Knowledge nugget record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/{{KNOWLEDGE_NUGGET_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"{{KNOWLEDGE_NUGGET_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get today's topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Random knowledge nugget record is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('KnowledgeNugget');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('id');",
											"    pm.expect(jsonRes.Data.KnowledgeNugget).to.have.property('TopicName');",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/knowledge-nuggets/today/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"knowledge-nuggets",
										"today",
										"{{PATIENT_USER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "Add course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New course is returned\", function () {\r",
											"\r",
											"    var expectedName = \"English\";\r",
											"    var expectedStartDate = \"2022-08-11T00:00:00.000Z\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
											"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"English\",\r\n    \"Description\": \"Learning course\",\r\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\r\n    \"DurationInDays\": \"30\",\r\n    \"StartDate\": \"2022-08-11\",\r\n    \"EndDate\": \"2022-09-11\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get course by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course is returned\", function () {",
											"",
											"    var expectedName = \"English\";",
											"    var expectedStartDate = \"2022-08-11T00:00:00.000Z\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Course');",
											"    pm.expect(jsonRes.Data.Course).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Course).to.have.property('Name');",
											"    ",
											"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/courses/{{COURSE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"courses",
										"{{COURSE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update course by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated course is returned\", function () {",
											"",
											"    var expectedName = \"Maths\";",
											"    var expectedStartDate = \"2022-08-11T00:00:00.000Z\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Course');",
											"    pm.expect(jsonRes.Data.Course).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Course).to.have.property('Name');",
											"    ",
											"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Maths\",\n    \"Description\": \"Learning course\",\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\n    \"DurationInDays\": \"30\",\n    \"StartDate\": \"2022-08-11\",\n    \"EndDate\": \"2022-09-11\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/courses/{{COURSE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"courses",
										"{{COURSE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of courses is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Courses');",
											"    pm.expect(jsonRes.Data.Courses.Items.length).greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/courses/search",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"courses",
										"search"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "Name",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "name",
											"value": "English",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete course by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/courses/{{COURSE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"courses",
										"{{COURSE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course module",
					"item": [
						{
							"name": "Add course module",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New course module is returned\", function () {\r",
											"\r",
											"    var expectedName = \"English\";\r",
											"    var expectedDurationInMins = 90;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
											"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
											"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CourseId\": \"23c2fbf7-024d-4ee3-9a95-e63418b782d1\",\r\n    \"Name\": \"English\",\r\n    \"Description\": \"Learning course\",\r\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\r\n    \"DurationInMins\": 90\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/course-modules",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-modules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get course module by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module is returned\", function () {",
											"",
											"    var expectedName = \"English\";",
											"    var expectedDurationInMins = 90;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModule');",
											"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');",
											"    ",
											"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);",
											"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-modules/{{COURSE_MODULE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-modules",
										"{{COURSE_MODULE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update course module by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated course module is returned\", function () {",
											"",
											"    var expectedName = \"Maths\";",
											"    var expectedDurationInMins = 45;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModule');",
											"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');",
											"    ",
											"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);",
											"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);",
											"    ",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Maths\",\n    \"Description\": \"Learning course\",\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\n    \"DurationInMins\": 45\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/course-modules/{{COURSE_MODULE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-modules",
										"{{COURSE_MODULE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search course modules",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of course modules is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModules');",
											"    pm.expect(jsonRes.Data.CourseModules.Items.length).greaterThan(0);",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-modules/search",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-modules",
										"search"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "Name",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "name",
											"value": "English",
											"disabled": true
										},
										{
											"key": "courseId",
											"value": "39f03a3b-61f1-4e9b-bdda-c5ff7f244af8",
											"disabled": true
										},
										{
											"key": "durationInMins",
											"value": "45",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete course module by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-modules/{{COURSE_MODULE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-modules",
										"{{COURSE_MODULE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course content",
					"item": [
						{
							"name": "Add course content",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"COURSE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New course content is returned\", function () {\r",
											"\r",
											"    var expectedTitle = \"English Grammer\";\r",
											"    var expectedDurationInMins = 90;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
											"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
											"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleId\": \"{{COURSE_MODULE_ID}}\",\r\n    \"Title\": \"English Grammer \",\r\n    \"Description\": \"Learning course\",\r\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\r\n    \"DurationInMins\": 90,\r\n    \"ContentType\":\"Text\",\r\n    \"ResourceLink\":\"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\r\n    \"Sequence\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/course-contents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-contents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get course content by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course content is returned\", function () {",
											"",
											"   var expectedTitle = \"English Grammer\";",
											"    var expectedDurationInMins = 90;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseContent');",
											"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');",
											"    ",
											"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );",
											"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-contents/{{COURSE_CONTENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-contents",
										"{{COURSE_CONTENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update course content by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated course module is returned\", function () {",
											"",
											"    var expectedTitle = \"Maths Tutorials\";",
											"    var expectedDurationInMins = 45;",
											"    var expectedSequence = 2;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseContent');",
											"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Sequence');",
											"    ",
											"    ",
											"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );",
											"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);",
											"    pm.expect(jsonRes.Data.CourseContent.Sequence).equals(expectedSequence);",
											"    ",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Title\": \"Maths Tutorials\",\n    \"Description\": \"Learning course\",\n    \"ImageUrl\": \"https://docs.google.com/spreadsheets/d/1FcQMxJJAIVZtyuAKJHjSgI0qr86GVttGzm65Azzm8XM/edit#gid=0\",\n    \"DurationInMins\": 45,\n    \"ContentType\":\"Text\",\n    \"Sequence\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/course-contents/{{COURSE_CONTENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-contents",
										"{{COURSE_CONTENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search course content",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of course contents is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseContents');",
											"    pm.expect(jsonRes.Data.CourseContents.Items.length).greaterThan(0);",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-contents/search?moduleId=8b5fdb2e-71c8-47c7-8941-a160cd4a4df4",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-contents",
										"search"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "Title",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "name",
											"value": "English",
											"disabled": true
										},
										{
											"key": "courseId",
											"value": "",
											"disabled": true
										},
										{
											"key": "durationfrom",
											"value": "45",
											"disabled": true
										},
										{
											"key": "durationTo",
											"value": "90",
											"disabled": true
										},
										{
											"key": "moduleId",
											"value": "8b5fdb2e-71c8-47c7-8941-a160cd4a4df4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete course content by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-contents/{{COURSE_CONTENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-contents",
										"{{COURSE_CONTENT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course enrollment",
					"item": [
						{
							"name": "Enroll to course",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"COURSE_ENROLLMENT_ID\", jsonRes.Data.CourseEnrollment.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Course enrollment enroll successfully\", function () {\r",
											"\r",
											"    var expectedEnrollmentDate = \"2022-08-11T00:00:00.000Z\";\r",
											"    var expectedProgressStatus = \"Pending\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('CourseEnrollment');\r",
											"    pm.expect(jsonRes.Data.CourseEnrollment).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.CourseEnrollment).to.have.property('EnrollmentDate');\r",
											"    pm.expect(jsonRes.Data.CourseEnrollment).to.have.property('ProgressStatus');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.CourseEnrollment.EnrollmentDate).equals(expectedEnrollmentDate);\r",
											"    pm.expect(jsonRes.Data.CourseEnrollment.ProgressStatus).equals(expectedProgressStatus);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"CourseId\": \"{{COURSE_ID}}\",\r\n   \"UserId\": \"c82eecb5-bae0-4515-885e-c711b45f51a4\",\r\n   \"EnrollmentDate\":\"2022-08-11\",\r\n   \"ProgressStatus\":\"Pending\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/course-enrollments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-enrollments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start course module",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"USER_COURSE_MODULE_ID\", jsonRes.Data.courseModule.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Start course module successfully\", function () {\r",
											"\r",
											"    \r",
											"    var expectedStartDate = \"2022-08-26T00:00:00.000Z\";\r",
											"    // var expectedProgressStatus = \"Pending\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('courseModule');\r",
											"    pm.expect(jsonRes.Data.courseModule).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.courseModule).to.have.property('StartDate');\r",
											"    pm.expect(jsonRes.Data.courseModule).to.have.property('ProgressStatus');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.courseModule.StartDate ).equals(expectedStartDate);\r",
											"    // pm.expect(jsonRes.Data.courseModule.ProgressStatus).equals(expectedProgressStatus);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"UserId\": \"c82eecb5-bae0-4515-885e-c711b45f51a4\",\r\n    \"CourseEnrollmentId\":\"{{COURSE_ENROLLMENT_ID}} \",\r\n    \"ModuleId\":\"{{COURSE_MODULE_ID}}\",\r\n   \"StartDate\": \"2022-08-26\",\r\n   \"ProgressStatus\":\"Completed\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/course-enrollments/{{COURSE_ENROLLMENT_ID}}/modules/{{COURSE_MODULE_ID}}/start",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-enrollments",
										"{{COURSE_ENROLLMENT_ID}}",
										"modules",
										"{{COURSE_MODULE_ID}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start course content",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"USER_COURSE_CONTENT_ID\", jsonRes.Data.courseContent.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Start course content successfully\", function () {\r",
											"\r",
											"    var expectedProgressStatus = \"Completed\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('courseContent');\r",
											"    pm.expect(jsonRes.Data.courseContent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.courseContent).to.have.property('ProgressStatus');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.courseContent.ProgressStatus).equals(expectedProgressStatus);\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"UserId\": \"c82eecb5-bae0-4515-885e-c711b45f51a4\",\r\n    \"CourseEnrollmentId\":\"{{COURSE_ENROLLMENT_ID}} \",\r\n    \"CourseModuleId\":\"{{USER_COURSE_MODULE_ID}}\",\r\n    \"ModuleId\":\"{{COURSE_MODULE_ID}}\",\r\n    \"ContentId\":\"{{COURSE_CONTENT_ID}}\",\r\n    \"ProgressStatus\":\"Completed\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/educational/course-enrollments/{{COURSE_ENROLLMENT_ID}}/modules/{{COURSE_MODULE_ID}}/content/{{COURSE_CONTENT_ID}}/start",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-enrollments",
										"{{COURSE_ENROLLMENT_ID}}",
										"modules",
										"{{COURSE_MODULE_ID}}",
										"content",
										"{{COURSE_CONTENT_ID}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get content progress",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course content progress is returned\", function () {",
											"",
											"    ",
											"    var expectedProgressStatus = \"Completed\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseContent');",
											"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseContent).to.have.property('ProgressStatus');",
											"    ",
											"    pm.expect(jsonRes.Data.CourseContent.ProgressStatus).equals(expectedProgressStatus);",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-enrollments/{{COURSE_ENROLLMENT_ID}}/modules/{{COURSE_MODULE_ID}}/content/{{COURSE_CONTENT_ID}}/progress",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-enrollments",
										"{{COURSE_ENROLLMENT_ID}}",
										"modules",
										"{{COURSE_MODULE_ID}}",
										"content",
										"{{COURSE_CONTENT_ID}}",
										"progress"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get module progress",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course module progress retrieved successfully\", function () {",
											"",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseModule');",
											"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('StartDate');",
											"    pm.expect(jsonRes.Data.CourseModule).to.have.property('ProgressStatus');",
											"    ",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-enrollments/{{COURSE_ENROLLMENT_ID}}/modules/{{COURSE_MODULE_ID}}/progress",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-enrollments",
										"{{COURSE_ENROLLMENT_ID}}",
										"modules",
										"{{COURSE_MODULE_ID}}",
										"progress"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get course progress",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Course enrollment retrieved successfully\", function () {",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('CourseEnrollment');",
											"    pm.expect(jsonRes.Data.CourseEnrollment).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.CourseEnrollment).to.have.property('EnrollmentDate');",
											"    pm.expect(jsonRes.Data.CourseEnrollment).to.have.property('ProgressStatus');",
											"    ",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/educational/course-enrollments/{{COURSE_ENROLLMENT_ID}}/course/{{COURSE_ID}}/progress",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"educational",
										"course-enrollments",
										"{{COURSE_ENROLLMENT_ID}}",
										"course",
										"{{COURSE_ID}}",
										"progress"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sneha-Rahi-Courses",
					"item": [
						{
							"name": "Growing  up",
							"item": [
								{
									"name": "Add journey - Growing up",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys/svg/growing-up.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey - Growing Up",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Growing Up\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 1. Manav Vikas Ki Avasthaein",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Manav Vikas Ki Avasthaein.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course- 1 - Manav Vikas Ki Avasthaein",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Manav Vikas Ki Avasthaein\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Manav Vikas Ki Avasthaein\";\r",
															"    var expectedDurationInMins = 5.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Manav Vikas Ki Avasthaein\",\r\n    \"Sequence\": 1,\r\n    \"DurationInMins\": 5.19\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Manav Vikas Ki Avasthaein\";\r",
															"    var expectedDurationInMins = 5.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIRST_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Manav Vikas Ki Avasthaein\",\r\n    \"Description\": \"Between the moment we are born we pass through diffrent stages of physical, emotional and mental maturity. This module will give you an overview of each of these stages of development.\",\r\n    \"DurationInMins\": 5.19,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=aYCBdZLCDBQ&t=194s\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 2. Safarnama: Kishoravastha se Yuvavastha",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Safarnama- Kishoravastha se Yuvavastha.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Safarnama: Kishoravastha se Yuvavastha\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Safarnama: Kishoravastha se Yuvavastha\";\r",
															"    var expectedDurationInMins = 4.16;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Safarnama: Kishoravastha se Yuvavastha\",\r\n    \"Sequence\": 2,\r\n    \"DurationInMins\": 4.16\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Safarnama: Kishoravastha se Yuvavastha\";\r",
															"    var expectedDurationInMins = 4.16;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SECOND_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Safarnama: Kishoravastha se Yuvavastha\",\r\n    \"Description\": \"The path from adolescence to adulthood has become a complicated journey filled with uncertainty, shifting social and cultural expectations, growing social, etc. This module give you a broad understanding of what are some of the changes one can expect.\",\r\n    \"DurationInMins\": 4.16,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=8KQoZrquwrg\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 3. My rights and responsibilities : Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/My rights and responsibilities - overview.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"My rights and responsibilities : Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add third module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"My rights and responsibilities : Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"My rights and responsibilities : Overview\",\r\n    \"Sequence\": 3,\r\n    \"DurationInMins\": 2.45\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  third module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"My rights and responsibilities : Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{THIRD_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"My rights and responsibilities : Overview\",\r\n    \"Description\": \"All citizens of this country enjoy certain right and are expected to fulfil thier responsibilities. These are not just limited to adults. Adolescent and youth also enjoy certain rights. This module will take you through your rights and responsibilities.\",\r\n    \"DurationInMins\": 2.45,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=mJggYdw3I0k\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 4. Physical changes to expect: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Physical changes to expect - overview.jpg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Physical changes to expect: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fourth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FOURTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Physical changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 4.4;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Physical changes to expect: Overview\",\r\n    \"Sequence\": 4,\r\n    \"DurationInMins\": 4.4\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fourth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Physical changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 4.4;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FOURTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Physical changes to expect: Overview\",\r\n    \"Description\": \"During adolescents our body goes though many changes. Let's learn at the most obvious changes in this module.\",\r\n    \"DurationInMins\": 4.4,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=vMRHCYq7oBU\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 5. Emotional changes to expect: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-home/svg/emotions.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Emotional changes to expect: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fifth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Emotional changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Emotional changes to expect: Overview\",\r\n    \"Sequence\": 5,\r\n    \"DurationInMins\": 3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fifth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Emotional changes to expect: Overview\";\r",
															"    var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIFTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Emotional changes to expect: Overview\",\r\n    \"Description\": \"Learn the emotional social changes that you go through during puberty. Being a step ahead of the game will help you manage yourself for the better.\",\r\n    \"DurationInMins\": 3,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=Bjee0QgqC10\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 6. Reproductive health: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-home/png/female-reproductive-health.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Reproductive health: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add sixth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SIXTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Reproductive health: Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Reproductive health: Overview\",\r\n    \"Sequence\": 6,\r\n    \"DurationInMins\": 2.45\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  sixth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Reproductive health: Overview\";\r",
															"    var expectedDurationInMins = 2.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SIXTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Reproductive health: Overview\",\r\n    \"Description\": \"As you grow you will notice many changes in your body. In this Module we will learn about menstrual health and why it is important for both girls and boys to maintain hygiene.\",\r\n    \"DurationInMins\": 2.45,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=00BYyDr8Xdg&t=103s\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 7. Taking care of nutrition: Overview",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Taking care of nutrition.jpg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Taking care of nutrition: Overview\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add seventh module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Taking care of nutrition: Overview\";\r",
															"    var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Taking care of nutrition: Overview\",\r\n    \"Sequence\": 7,\r\n    \"DurationInMins\": 2.49\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  seventh module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Taking care of nutrition: Overview\";\r",
															"    var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SEVENTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Taking care of nutrition: Overview\",\r\n    \"Description\": \"Why does a growing body needs the right kind of nutrition? Get answers to these and more in this module.\",\r\n    \"DurationInMins\": 2.49,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=W3eXoKmL-M0\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 8. Accepting my body",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys-details/svg/accepting-body.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Accepting my body\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add eighth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"EIGHTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Accepting my body\";\r",
															"    var expectedDurationInMins = 4.37;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Accepting my body\",\r\n    \"Sequence\": 8,\r\n    \"DurationInMins\": 4.37\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  eighth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"EIGHTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Accepting my body\";\r",
															"    var expectedDurationInMins = 4.37;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{EIGHTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Accepting my body\",\r\n    \"Description\": \"When you feel good about your body, you're more likely to have good self-esteem and mental health as well as a balanced attitude to eating and physical activity. In this module we will discuss ways in which we can become more comfortable with our bodies\",\r\n    \"DurationInMins\": 4.37,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=F661OcQ8WOk\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 9. Dealing with peer pressure",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/peer pressure.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Dealing with peer pressure\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add ninth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"NINTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Dealing with peer pressure\";\r",
															"    var expectedDurationInMins = 2.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Dealing with peer pressure\",\r\n    \"Sequence\": 9,\r\n    \"DurationInMins\": 2.19\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  ninth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"NINTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Dealing with peer pressure\";\r",
															"    var expectedDurationInMins = 2.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{NINTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Dealing with peer pressure\",\r\n    \"Description\": \"As young people we face different pressures from the people around us. This module will teach you how you can cope with these pressure.\",\r\n    \"DurationInMins\": 2.19,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=a6_8zBcm7xk&t=46s\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 10. Together against bullying",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Together against bullying.jpg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Together against bullying\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add tenth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"TENTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Together against bullying\",\r\n    \"Sequence\": 10,\r\n    \"DurationInMins\": 4.3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  tenth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"TENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Together against bullying\";\r",
															"    var expectedDurationInMins = 4.3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{TENTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Together against bullying\",\r\n    \"Description\": \"If you know someone who has been bullied or you have been a victim of bullying then this module will help you understand the effects and the steps you can take to stop bullying.\",\r\n    \"DurationInMins\": 4.3,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=4mrE5zgEvt4\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Sex, Gender and Identity",
							"item": [
								{
									"name": "Add journey - Sex, Gender and Identity",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys/svg/gender-identity.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Sex, Gender and Identity\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 1. What is the Difference between sex & gender",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys-details/svg/pressure.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is the Difference between sex & gender\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"What is the Difference between sex & gender\";\r",
															"    var expectedDurationInMins = 5.19;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is the Difference between sex & gender\",\r\n    \"Sequence\": 1,\r\n    \"DurationInMins\": 5.19\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add first module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIRST_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"What is the Difference between sex & gender\";\r",
															"    var expectedDurationInMins = 3.45;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIRST_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"What is the Difference between sex & gender\",\r\n    \"Description\": \"Did you think sex and gender means the same thing? Well it isn't. This module will help you understand the difference between sex and gender.\",\r\n    \"DurationInMins\": 3.45,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=Y19kYh6k7ls\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 2. What are gender stereotypes?",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/gender-stereotypes.jpeg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What are gender stereotypes?\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"What are gender stereotypes?\";\r",
															"    var expectedDurationInMins = 2.56;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What are gender stereotypes?\",\r\n    \"Sequence\": 2,\r\n    \"DurationInMins\": 2.56\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add second module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SECOND_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"What are gender stereotypes?\";\r",
															"    var expectedDurationInMins = 2.56;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SECOND_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"What are gender stereotypes?\",\r\n    \"Description\": \"People have occasionally felt pressure to act or look a certain way based on their gender. In this module we will learn about the various gender related assumptions.\",\r\n    \"DurationInMins\": 2.56,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=HdHSDaJNQSg\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 3. What is identity",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Gender identity.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is identity?\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add third module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"What is identity\";\r",
															"    var expectedDurationInMins = 2.29;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"What is identity?\",\r\n    \"Sequence\": 3,\r\n    \"DurationInMins\": 2.29\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  third module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"THIRD_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"What is identity\";\r",
															"    var expectedDurationInMins = 2.29;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{THIRD_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"What is identity\",\r\n    \"Description\": \"Who are you? What makes you, you? Your gender identity is how you see yourself, boy or girl, and everything in between. This module will teach you a litlle more about understanding yourself and people around you.\",\r\n    \"DurationInMins\": 2.29,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=FFZtHu_DXi4\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 4. Undertstanding the gender spectrum",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Gender spectrum.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Undertstanding the gender spectrum\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fourth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FOURTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Undertstanding the gender spectrum\";\r",
															"    var expectedDurationInMins = 7.14;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Undertstanding the gender spectrum\",\r\n    \"Sequence\": 4,\r\n    \"DurationInMins\": 7.14\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fourth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FOURTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Undertstanding the gender spectrum\";\r",
															"    var expectedDurationInMins = 7.14;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FOURTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Undertstanding the gender spectrum\",\r\n    \"Description\": \"Know your LGBTIQ+ terms! Using the genderbread person, we explain what's meant by sexual orientation, gender identity, gender expression and sex characteristics.\",\r\n    \"DurationInMins\": 7.14,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=-cdsGFnNp6Q\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 5. Section 377",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Section 377.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Section 377\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fifth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Section 377\";\r",
															"    // var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    // pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Section 377\",\r\n    \"Sequence\": 5\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  fifth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Section 377\";\r",
															"    // var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    // pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    // pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{FIFTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Section 377\",\r\n    \"Description\": \"What is section 377 and what does it mean to the LGBTQIA community\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 6. Coming out to others",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/Coming out to others.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Coming out to others\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add sixth module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Section 377\";\r",
															"    // var expectedDurationInMins = 3;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    // pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Coming out to others\",\r\n    \"Sequence\": 6\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  sixth module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"FIFTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Coming out to others\";\r",
															"    var expectedDurationInMins = 2.38;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SIXTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Coming out to others\",\r\n    \"Description\": \"Here are some tips that will help you openly declare your sexual orientation or gender identity if you want to\",\r\n    \"DurationInMins\": 2.38,\r\n    \"ContentType\": \"Video\",\r\n    \"ResourceLink\": \"https://www.youtube.com/watch?v=7YXcg8HJs18\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add course 7. Important numbers",
									"item": [
										{
											"name": "Upload image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-course/png/phone-icon.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add course",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"COURSE_ID\", jsonRes.Data.Course.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Important numbers\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/courses",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add seventh module",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_COURSE_MODULE_ID\", jsonRes.Data.CourseModule.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course module is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Important numbers\";\r",
															"    // var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseModule');\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseModule).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.CourseModule).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseModule.Name).equals(expectedName);\r",
															"    // pm.expect(jsonRes.Data.CourseModule.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"Name\": \"Important numbers\",\r\n    \"Sequence\": 7\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-modules",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload pdf",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"PDF_FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/documents/lab_order_x.pdf"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  seventh module content",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Important numbers\";\r",
															"    // var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    // pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    // pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"{{COURSE_ID}}\",\r\n    \"LearningPathId\": \"{{LEARNING_PATH_ID}}\",\r\n    \"ModuleId\": \"{{SEVENTH_COURSE_MODULE_ID}}\",\r\n    \"Title\": \"Important numbers \",\r\n    \"ContentType\": \"Pdf\",\r\n    \"ResourceLink\": \"{{PDF_FILE_RESOURCE_URL}}\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  seventh module content Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"SEVENTH_MODULE_CONTENT_ID\", jsonRes.Data.CourseContent.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course content is returned\", function () {\r",
															"\r",
															"    var expectedTitle = \"Important numbers\";\r",
															"    // var expectedDurationInMins = 2.49;\r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('CourseContent');\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.CourseContent).to.have.property('Title');\r",
															"    // pm.expect(jsonRes.Data.CourseContent).to.have.property('DurationInMins');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.CourseContent.Title).equals(expectedTitle );\r",
															"    // pm.expect(jsonRes.Data.CourseContent.DurationInMins).equals(expectedDurationInMins);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"CourseId\": \"7053720c-8718-478a-a9e6-9a334eb1954d\",\r\n    \"LearningPathId\": \"2415333e-8e59-4bd3-a20d-e70cf86d4910\",\r\n    \"ModuleId\": \"4e386876-c049-42b9-8f13-9f28c87cec68\",\r\n    \"Title\": \"Important numbers \",\r\n    \"ContentType\": \"Pdf\",\r\n    \"ResourceLink\": \"{{PDF_FILE_RESOURCE_URL}}\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\",\r\n    \"Sequence\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/course-contents",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"course-contents"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Health & Nutrition",
							"item": [
								{
									"name": "Add journey - Health and Nutrition",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys/svg/eat-healthy.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Health and Nutrition\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Mental health",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys/svg/feeling.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Mental Health\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Reproductive Health",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys/svg/sexual-reproductive.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Reproductive Health\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Conception, Contraception and Abortion",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-home/png/female-reproductive-health.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Conception, Contraception and Abortion\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Child Abuse",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-home/png/child-abuse.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Child Abuse\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Substance Abuse",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-home/png/substance-abuse.png"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Substance Abuse\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Domestic Violence",
							"item": [
								{
									"name": "Add journey",
									"item": [
										{
											"name": "Upload learning path image",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"FILE_RESOURCE_URL\", jsonRes.Data.FileResources[0].Url);\r",
															"}\r",
															"catch(error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"File is uploaded as public resource\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
															"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
															"\r",
															"    var resource = jsonRes.Data.FileResources[0];\r",
															"\r",
															"    pm.expect(resource).to.have.property('id');\r",
															"    pm.expect(resource).to.have.property('FileName');\r",
															"    pm.expect(resource).to.have.property('Url');\r",
															"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
															"    pm.expect(resource).to.have.property('MimeType');\r",
															"    pm.expect(resource).to.have.property('Versions');\r",
															"    pm.expect(resource).to.have.property('Tags');\r",
															"    pm.expect(resource).to.have.property('References');\r",
															"    pm.expect(resource).to.have.property('IsPublicResource');\r",
															"    pm.expect(resource).to.have.property('DefaultVersion');\r",
															"\r",
															"    pm.expect(resource.Versions.length).greaterThan(0);\r",
															"    pm.expect(resource.IsPublicResource).equals(true);\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "enc",
														"value": "multipart/form-data",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"type": "file",
															"src": "/D:/current_projects/rean/code/reancare-service/postman/test.data/sneha-rahi/learning-journeys/svg/domestic-violence.svg"
														},
														{
															"key": "IsPublicResource",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{BASE_URL}}/file-resources/upload/",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"file-resources",
														"upload",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add learning path - journey",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"LEARNING_PATH_ID\", jsonRes.Data.LearningPath.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New course is returned\", function () {\r",
															"\r",
															"    var expectedName = \"Growing Up\";\r",
															"   \r",
															"    \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Course');\r",
															"    pm.expect(jsonRes.Data.Course).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.Course).to.have.property('Name');\r",
															"    // pm.expect(jsonRes.Data.Course).to.have.property('StartDate');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.Course.Name).equals(expectedName);\r",
															"   \r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Name\": \"Domestic Violence\",\r\n    \"ImageUrl\": \"{{FILE_RESOURCE_URL}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/educational/learning-paths",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"educational",
														"learning-paths"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "File resource management",
			"item": [
				{
					"name": "Upload file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jasonRes = pm.response.json();\r",
									"    var resources = jasonRes.Data.FileResources;\r",
									"    var resource = resources[0];\r",
									"    var resourceId = resource.id;\r",
									"\r",
									"    pm.environment.set(\"PATIENT_PROFILE_IMAGE_RESOURCE_ID\", resourceId);\r",
									"    pm.environment.set(\"UPLOADED_RESOURCE_ID\", resourceId);\r",
									"    pm.environment.set(\"RESOURCE_ID\", resourceId);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is uploaded\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
									"\r",
									"    var resource = jsonRes.Data.FileResources[0];\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).greaterThan(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"type": "file",
									"src": "profile.images/female/1.jpg"
								},
								{
									"key": "IsPublicResource",
									"value": "true",
									"type": "text"
								},
								{
									"key": "IsMultiResolutionImage",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/upload",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload file as public resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is uploaded as public resource\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
									"\r",
									"    var resource = jsonRes.Data.FileResources[0];\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).greaterThan(0);\r",
									"    pm.expect(resource.IsPublicResource).equals(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"type": "file",
									"src": "profile.images/female/2.jpg"
								},
								{
									"key": "IsPublicResource",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/upload/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"upload",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload multi-resolution image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is uploaded as multi-resolution image\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
									"\r",
									"    var resource = jsonRes.Data.FileResources[0];\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).equals(3);\r",
									"\r",
									"    var firstVersion = resource.Versions[0];\r",
									"    var secondVersion = resource.Versions[1];\r",
									"    var thirdVersion = resource.Versions[2];\r",
									"    \r",
									"    pm.expect(firstVersion).to.have.property('VersionId');\r",
									"    pm.expect(firstVersion).to.have.property('ResourceId');\r",
									"    pm.expect(firstVersion).to.have.property('Version');\r",
									"    pm.expect(firstVersion).to.have.property('Url');\r",
									"    \r",
									"    pm.expect(secondVersion).to.have.property('VersionId');\r",
									"    pm.expect(secondVersion).to.have.property('ResourceId');\r",
									"    pm.expect(secondVersion).to.have.property('Version');\r",
									"    pm.expect(secondVersion).to.have.property('Url');\r",
									"    \r",
									"    pm.expect(thirdVersion).to.have.property('VersionId');\r",
									"    pm.expect(thirdVersion).to.have.property('ResourceId');\r",
									"    pm.expect(thirdVersion).to.have.property('Version');\r",
									"    pm.expect(thirdVersion).to.have.property('Url');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"type": "file",
									"src": "profile.images/female/4.jpg"
								},
								{
									"key": "IsPublicResource",
									"value": "true",
									"type": "text"
								},
								{
									"key": "IsMultiResolutionImage",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/upload/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"upload",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update file resource - references and tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jasonRes = pm.response.json();\r",
									"    var resource = jasonRes.Data.FileResource;\r",
									"\r",
									"    var reference = resource.References[0];\r",
									"    var referenceId = reference.ItemId;\r",
									"    var referenceType = reference.ItemType;\r",
									"    var referenceKeyword = reference.Keyword;\r",
									"    pm.environment.set(\"RESOURCE_REFERENCE_ID\", referenceId);\r",
									"    pm.environment.set(\"RESOURCE_REFERENCE_TYPE\", referenceType);\r",
									"    pm.environment.set(\"RESOURCE_REFERENCE_KEYWORD\", referenceKeyword);\r",
									"\r",
									"    var tag = resource.Tags[0];\r",
									"    pm.environment.set(\"RESOURCE_TAG\", tag);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"References and tags are added to resource\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResource');\r",
									"\r",
									"    var resource = jsonRes.Data.FileResource;\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.References.length).greaterThan(0);\r",
									"    pm.expect(resource.Tags.length).greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"References\": [\n        {\n            \"ItemId\": \"{{BIOMETRICS_BLOOD_PRESSURE_ID}}\",\n            \"ItemType\": \"Biometrics\",\n            \"Keyword\": \"Blood pressure\"\n        }\n    ],\n    \"Tags\": [\n        \"First tag\",\n        \"Second tag\"\n    ]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload file version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jasonRes = pm.response.json();\r",
									"    var resource = jasonRes.Data.FileResource;\r",
									"    var version = resource.DefaultVersion;\r",
									"\r",
									"    pm.environment.set(\"RESOURCE_VERSION\", version.Version);\r",
									"    pm.environment.set(\"RESOURCE_VERSION_ID\", version.VersionId);\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A new file version is uploaded\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResource');\r",
									"\r",
									"    var resource = jsonRes.Data.FileResource;\r",
									"\r",
									"    pm.expect(resource).to.have.property('id');\r",
									"    pm.expect(resource).to.have.property('FileName');\r",
									"    pm.expect(resource).to.have.property('Url');\r",
									"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
									"    pm.expect(resource).to.have.property('MimeType');\r",
									"    pm.expect(resource).to.have.property('Versions');\r",
									"    pm.expect(resource).to.have.property('Tags');\r",
									"    pm.expect(resource).to.have.property('References');\r",
									"    pm.expect(resource).to.have.property('IsPublicResource');\r",
									"    pm.expect(resource).to.have.property('DefaultVersion');\r",
									"\r",
									"    pm.expect(resource.Versions.length).greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "enc",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"type": "file",
									"src": "profile.images/female/6.jpg"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/upload-version/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"upload-version",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"File is renamed with new namee\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Renamed');\r",
									"    var status = jsonRes.Data.Renamed;\r",
									"    pm.expect(status).equals(true);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"RESOURCE_NEW_FILE_NAME\", \"2_new_name.jpg\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/rename/{{RESOURCE_NEW_FILE_NAME}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"rename",
								"{{RESOURCE_NEW_FILE_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get resource by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A file resource by id is returned with new name\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResource');\r",
									"    var resource = jsonRes.Data.FileResource;\r",
									"    var expectedNewFileName = pm.environment.get(\"RESOURCE_NEW_FILE_NAME\");\r",
									"    pm.expect(resource.FileName).equals(expectedNewFileName);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by resource id as an attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download?disposition=attachment",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download"
							],
							"query": [
								{
									"key": "disposition",
									"value": "attachment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by resource id as an attachment Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/16ce41ae-b575-4d9c-b5f9-586b4d145173/download?disposition=attachment",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"16ce41ae-b575-4d9c-b5f9-586b4d145173",
								"download"
							],
							"query": [
								{
									"key": "disposition",
									"value": "attachment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by respurce id for inline display",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download?disposition=inline",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download"
							],
							"query": [
								{
									"key": "disposition",
									"value": "inline"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by version name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download-by-version-name/{{RESOURCE_VERSION}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download-by-version-name",
								"{{RESOURCE_VERSION}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download by version id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/download-by-version-id/{{RESOURCE_VERSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"download-by-version-id",
								"{{RESOURCE_VERSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search and download",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/search-download?referenceId={{RESOURCE_REFERENCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"search-download"
							],
							"query": [
								{
									"key": "referenceId",
									"value": "{{RESOURCE_REFERENCE_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Searched resources are returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
									"    pm.expect(jsonRes.Data.FileResources.TotalCount).greaterThan(0);\r",
									"    pm.expect(jsonRes.Data.FileResources.Items.length).greaterThan(0);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/search?referenceId={{RESOURCE_REFERENCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"search"
							],
							"query": [
								{
									"key": "referenceId",
									"value": "{{RESOURCE_REFERENCE_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get version by version id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A file resource version is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResourceVersion');\r",
									"    var version = jsonRes.Data.FileResourceVersion;\r",
									"    pm.expect(version).to.have.property('VersionId');\r",
									"    pm.expect(version).to.have.property('ResourceId');\r",
									"    pm.expect(version).to.have.property('Version');\r",
									"    pm.expect(version).to.have.property('FileName');\r",
									"    pm.expect(version).to.have.property('MimeType');\r",
									"    pm.expect(version).to.have.property('OriginalName');\r",
									"    pm.expect(version).to.have.property('Url');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/versions/{{RESOURCE_VERSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"versions",
								"{{RESOURCE_VERSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A list of file resource versions is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResourceVersions');\r",
									"    var versions = jsonRes.Data.FileResourceVersions;\r",
									"    pm.expect(versions.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/versions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete version by version id",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}/versions/{{RESOURCE_VERSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}",
								"versions",
								"{{RESOURCE_VERSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete resource",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/file-resources/{{RESOURCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"file-resources",
								"{{RESOURCE_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorization checks",
			"item": [
				{
					"name": "Add blood pressure record for first patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonRes = pm.response.json();",
									"",
									"// try {",
									"//     pm.environment.set(\"BIOMETRICS_BLOOD_PRESSURE_ID\", jsonRes.Data.BloodPressure.id);",
									"// }",
									"// catch (error) {",
									"//     console.log(error.message);",
									"// }",
									"",
									"// pm.test(\"Request is successfull\", function () {",
									"//     pm.response.to.have.status(201);",
									"//     var jsonRes = pm.response.json();",
									"//     pm.expect(jsonRes.Status).to.eql('success');",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Systolic\": 160,\n    \"Diastolic\": 180,\n    \"Unit\": \"mm Hg\",\n    \"RecordDate\": \"2021-09-22\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clinical",
								"biometrics",
								"blood-pressures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register second patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// try {\r",
									"//     var jsonRes = pm.response.json();\r",
									"//     pm.environment.set(\"SECOND_PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
									"//     pm.environment.set(\"SECOND_PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
									"// }\r",
									"// catch (error) {\r",
									"//     console.log(error.message);\r",
									"// }\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var password = \"Test@123\";\r",
									"\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/patients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log-in second patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// try {\r",
									"//     var jsonRes = pm.response.json();\r",
									"//     pm.environment.set(\"SECOND_PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"// }\r",
									"// catch (error) {\r",
									"//     console.log(error.message);\r",
									"// }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-with-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-with-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second patient tries to get blood pressure of first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// pm.test(\"Request is failure\", function () {",
									"//     pm.response.to.have.status(403);",
									"//     var jsonRes = pm.response.json();",
									"//     pm.expect(jsonRes.Status).to.eql('failure');",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{SECOND_PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clinical",
								"biometrics",
								"blood-pressures",
								"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second patient tries to update blood pressure of first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// pm.test(\"Request is failure\", function () {",
									"//     pm.response.to.have.status(403);",
									"//     var jsonRes = pm.response.json();",
									"//     pm.expect(jsonRes.Status).to.eql('failure');",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{SECOND_PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Systolic\": 100,\n    \"Diastolic\": 80,\n    \"Unit\": \"mm Hg\",\n    \"RecordDate\": \"2021-09-22\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clinical",
								"biometrics",
								"blood-pressures",
								"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Second patient tries to delete blood pressure of first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// pm.test(\"Request is failure\", function () {",
									"//     pm.response.to.have.status(403);",
									"//     var jsonRes = pm.response.json();",
									"//     pm.expect(jsonRes.Status).to.eql('failure');",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{SECOND_PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clinical",
								"biometrics",
								"blood-pressures",
								"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "The set of requests in this folder are mean to test the authorization logic such as ownership authorization and consent authorization.\n\nWe will be testing following scenarios.\n\n1. One patient account should not be able to access the biometrics data of another patient's account.\n\n1. Without consent authorization, a doctor cannot access the patient data."
		},
		{
			"name": "Clinical",
			"item": [
				{
					"name": "Emergency event",
					"item": [
						{
							"name": "Create patient emergency event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"pm.environment.set(\"EMERGENCY_EHRID\", undefined);\r",
											"pm.environment.set(\"EMERGENCY_PATIENTUSERID\", patientUserId);\r",
											"pm.environment.set(\"EMERGENCY_DETAILS\", 'Allergy reaction and Difficulty breathing');\r",
											"pm.environment.set(\"EMERGENCY_EMERGENCYDATE\", new Date());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"EMERGENCY_EVENT_ID\", jsonRes.Data.EmergencyEvent.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New PATIENT EMERGENCY Event record is created\", function () {\r",
											"\r",
											"    let expectedEhrId = pm.environment.get(\"EMERGENCY_EHRID\");\r",
											"    let expectedPatientUserId = pm.environment.get(\"EMERGENCY_PATIENTUSERID\");\r",
											"    let expectedDetails = pm.environment.get(\"EMERGENCY_DETAILS\");\r",
											"    let expectedEmergencyDate = pm.environment.get(\"EMERGENCY_EMERGENCYDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvent');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.EmergencyDate).equals(expectedEmergencyDate);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"EhrId\":\"{{EMERGENCY_EHRID}}\",\r\n    \"PatientUserId\":\"{{PATIENT_USER_ID}}\",\r\n    \"Details\":\"{{EMERGENCY_DETAILS}}\",\r\n    \"EmergencyDate\":\"{{EMERGENCY_EMERGENCYDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events"
									]
								},
								"description": "Add an emergency event."
							},
							"response": []
						},
						{
							"name": "Get patient emergency event by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient Allergy should have correct data\", function () {\r",
											"\r",
											"    let expectedEhrId = pm.environment.get(\"EMERGENCY_EHRID\");\r",
											"    let expectedPatientUserId = pm.environment.get(\"EMERGENCY_PATIENTUSERID\");\r",
											"    let expectedDetails = pm.environment.get(\"EMERGENCY_DETAILS\");\r",
											"    let expectedEmergencyDate = pm.environment.get(\"EMERGENCY_EMERGENCYDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvent');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/{{EMERGENCY_EVENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"{{EMERGENCY_EVENT_ID}}"
									]
								},
								"description": "Get an emergency event by emergency event id."
							},
							"response": []
						},
						{
							"name": "Update an patient emergency event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"EMERGENCY_DETAILS\", 'Insomnia');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedEhrId = pm.environment.get(\"EMERGENCY_EHRID\");\r",
											"    let expectedPatientUserId = pm.environment.get(\"EMERGENCY_PATIENTUSERID\");\r",
											"    let expectedDetails = pm.environment.get(\"EMERGENCY_DETAILS\");\r",
											"    let expectedEmergencyDate = pm.environment.get(\"EMERGENCY_EMERGENCYDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvent');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('Details');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent).to.have.property('EmergencyDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.Details).equals(expectedDetails);\r",
											"    pm.expect(jsonRes.Data.EmergencyEvent.EmergencyDate).equals(expectedEmergencyDate);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"EhrId\":\"{{EMERGENCY_EHRID}}\",\r\n    \"PatientUserId\":\"{{EMERGENCY_PATIENTUSERID}}\",\r\n    \"Details\":\"{{EMERGENCY_DETAILS}}\",\r\n    \"EmergencyDate\":\"{{EMERGENCY_EMERGENCYDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/{{EMERGENCY_EVENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"{{EMERGENCY_EVENT_ID}}"
									]
								},
								"description": "Update the details for an emergency event."
							},
							"response": []
						},
						{
							"name": "Search patient emergency event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of Calorie Record is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('EmergencyEvents');\r",
											"    pm.expect(jsonRes.Data.EmergencyEvents.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/search?orderBy=EmergencyDate&order=ascending&pageIndex=0&itemsPerPage=25",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"search"
									],
									"query": [
										{
											"key": "EmergencyDateFrom",
											"value": "2021-05-01",
											"disabled": true
										},
										{
											"key": "EmergencyDateTo",
											"value": "2021-12-12",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "EmergencyDate"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "PatientUserId",
											"value": "",
											"disabled": true
										},
										{
											"key": "MedicalPractitionerUserId",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Search emergency event using query parameters."
							},
							"response": []
						},
						{
							"name": "Delete patient emergency event record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/emergency-events/{{EMERGENCY_EVENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"emergency-events",
										"{{EMERGENCY_EVENT_ID}}"
									]
								},
								"description": "Deletes emergency event using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Medication",
					"item": [
						{
							"name": "Drugs",
							"item": [
								{
									"name": "Add drug",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"DRUG_ID\", jsonRes.Data.Drug.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New drug record is created\", function () {",
													"",
													"    var expectedDrugName = \"aciloc\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drug');",
													"    pm.expect(jsonRes.Data.Drug).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('DrugName');",
													"    ",
													"    pm.expect(jsonRes.Data.Drug.DrugName).equals(expectedDrugName);    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"DrugName\": \"aciloc\",\n    \"GenericName\": \"Paracetamol\",\n    \"Ingredients\": \"levocetrizine\",\n    \"Strength\": \"high\",\n    \"OtherCommercialNames\":\"LP\",\n    \"Manufacturer\": \"abc lab\",\n    \"OtherInformation\": \"aaaa\"  \n}\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get drug details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Drug record is returned\", function () {",
													"",
													"    var expectedDrugName = \"aciloc\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drug');",
													"    pm.expect(jsonRes.Data.Drug).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('DrugName');",
													"    ",
													"    pm.expect(jsonRes.Data.Drug.DrugName).equals(expectedDrugName);    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/{{DRUG_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"{{DRUG_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update drug details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated drug record is returned\", function () {",
													"",
													"    var expectedDrugName = \"sinarest\";",
													"    var expectedGenericName = \"crocin\";",
													"    var expectedStrength = \"high\";",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drug');",
													"    pm.expect(jsonRes.Data.Drug).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('DrugName');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('GenericName');",
													"    pm.expect(jsonRes.Data.Drug).to.have.property('Strength');",
													"",
													"    pm.expect(jsonRes.Data.Drug.DrugName).equals(expectedDrugName);",
													"    pm.expect(jsonRes.Data.Drug.GenericName).equals(expectedGenericName);",
													"    pm.expect(jsonRes.Data.Drug.Strength).equals(expectedStrength);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"DrugName\": \"sinarest\",\n    \"GenericName\": \"crocin\",\n    \"Ingredients\": \"parac\",\n    \"Strength\": \"high\",\n    \"OtherCommercialNames\":\"LP\",\n    \"Manufacturer\": \"abc lab\",\n    \"OtherInformation\": \"llll\"  \n}\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/{{DRUG_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"{{DRUG_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search drug details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of drug records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Drugs');",
													"    pm.expect(jsonRes.Data.Drugs.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/search?order=ascending&pageIndex=0&itemsPerPage=25",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"search"
											],
											"query": [
												{
													"key": "name",
													"value": "sinarest",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete drug details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Drug record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/{{DRUG_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"{{DRUG_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Medication",
							"item": [
								{
									"name": "Get a list of drugs from database",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"DRUG_ID\", jsonRes.Data.Drugs.Items[0].id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Drugs are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Drugs');\r",
													"    pm.expect(jsonRes.Data.Drugs).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Drugs).to.have.property('TotalCount');\r",
													"    pm.expect(jsonRes.Data.Drugs).to.have.property('Items');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Drugs.TotalCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Drugs.Items.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/drugs/search?name=cres",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"drugs",
												"search"
											],
											"query": [
												{
													"key": "name",
													"value": "cres"
												}
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of drug-dose-units",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication dosage units are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationDosageUnits');\r",
													"    pm.expect(jsonRes.Data.MedicationDosageUnits).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationDosageUnits.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/dosage-units",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"dosage-units"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of medication-routes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication administration routes are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationAdministrationRoutes');\r",
													"    pm.expect(jsonRes.Data.MedicationAdministrationRoutes).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationAdministrationRoutes.length).greaterThan(0);    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/administration-routes/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"administration-routes",
												""
											]
										},
										"description": "Returns the list of medication routes for administration stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of medication-duration-units",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication duration units are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationDurationUnits');\r",
													"    pm.expect(jsonRes.Data.MedicationDurationUnits).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationDurationUnits.length).greaterThan(0);    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/duration-units",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"duration-units"
											],
											"query": [
												{
													"key": "name",
													"value": "da",
													"disabled": true
												}
											]
										},
										"description": "Returns the list of medication duration units stored in the system."
									},
									"response": []
								},
								{
									"name": "Get a list of medication-frequency units",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication frequency units are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationFrequencyUnits');\r",
													"    pm.expect(jsonRes.Data.MedicationFrequencyUnits).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationFrequencyUnits.length).greaterThan(0);    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/frequency-units/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"frequency-units",
												""
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get medication stock images",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.MedicationStockImages[1].id;\r",
													"    var resourceId = jsonData.Data.MedicationStockImages[1].ResourceId;\r",
													"    pm.environment.set(\"STOCK_MEDICATION_IMAGE_ID\", id);\r",
													"    pm.environment.set(\"STOCK_MEDICATION_IMAGE_RESOURCE_ID\", resourceId);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication medication stock image list is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationStockImages');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImages).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.MedicationStockImages.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/stock-images",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"stock-images"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get medication stock image by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication stock image details are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationStockImage');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('Code');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('FileName');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('ResourceId');\r",
													"    pm.expect(jsonRes.Data.MedicationStockImage).to.have.property('PublicUrl');\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/stock-images/{{STOCK_MEDICATION_IMAGE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"stock-images",
												"{{STOCK_MEDICATION_IMAGE_ID}}"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Download medication stock image by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/stock-images/{{STOCK_MEDICATION_IMAGE_ID}}/download",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"stock-images",
												"{{STOCK_MEDICATION_IMAGE_ID}}",
												"download"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Add new medication by drug name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Medication.id;\r",
													"    pm.environment.set(\"MEDICATION_ID\", id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"A newly created medication is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugName = \"Tylenol 8 HR Arthritis Pain: 650 mg\";\r",
													"    pm.expect(jsonRes.Data.Medication.DrugName).equals(expectedDrugName);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var start_date = formatDate((new Date()).addDays(1));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_START_DATE\", start_date);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"DrugName\": \"Tylenol 8 HR Arthritis Pain: 650 mg\",\n    \"Dose\": 1,\n    \"DosageUnit\": \"Tablet\",\n    \"TimeSchedules\": [\n        \"Morning\", \n        \"Afternoon\", \n        \"Evening\", \n        \"Night\"\n    ],\n    \"Frequency\": 2,\n    \"FrequencyUnit\": \"Daily\",\n    \"Route\": \"Oral\",\n    \"Duration\": 2,\n    \"DurationUnit\": \"Days\",\n    \"StartDate\": \"2022-07-01\",\n    \"RefillNeeded\": false,\n    \"Instructions\": \"If there is reaction or allergy, please contact immediately.\",\n    \"ImageResourceId\": \"{{STOCK_MEDICATION_IMAGE_RESOURCE_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												""
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Add new medication by drug id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Medication.id;\r",
													"    pm.environment.set(\"MEDICATION_ID\", id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"A newly created medication is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugId = pm.environment.get(\"DRUG_ID\");\r",
													"    pm.expect(jsonRes.Data.Medication.DrugId).equals(expectedDrugId);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var start_date = formatDate((new Date()).addDays(-2));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_START_DATE\", start_date);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"DrugId\": \"{{DRUG_ID}}\",\n    \"Dose\": 1.5,\n    \"DosageUnit\": \"Tablet\",\n    \"TimeSchedules\": [\n        \"Morning\", \n        \"Afternoon\"\n    ],\n    \"FrequencyUnit\": \"Daily\",\n    \"Route\": \"Oral\",\n    \"Duration\": 2,\n    \"DurationUnit\": \"Months\",\n    \"StartDate\": \"{{MEDICATION_START_DATE}}\",\n    \"RefillNeeded\": true,\n    \"RefillCount\": 2,\n    \"Instructions\": \"If there is reaction or allergy, please contact immediately.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												""
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Search patient medications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"DRUG_ID\", jsonRes.Data.DrugRecords.Items[3].id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Searched medications are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medications');\r",
													"    pm.expect(jsonRes.Data.Medications).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medications).to.have.property('TotalCount');\r",
													"    pm.expect(jsonRes.Data.Medications).to.have.property('Items');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medications.TotalCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medications.Items.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/search?patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"search"
											],
											"query": [
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get current patient medications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Current medications for the patient are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('CurrentMedications');\r",
													"    pm.expect(jsonRes.Data.CurrentMedications).to.not.be.empty; \r",
													"    pm.expect(jsonRes.Data.CurrentMedications.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/current/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"current",
												"{{PATIENT_USER_ID}}"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Get medication by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication with given id is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugId = pm.environment.get(\"DRUG_ID\");\r",
													"    pm.expect(jsonRes.Data.Medication.DrugId).equals(expectedDrugId);    \r",
													"  \r",
													"    var expectedDuration = 2;\r",
													"    pm.expect(jsonRes.Data.Medication.Duration).equals(expectedDuration);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"{{MEDICATION_ID}}"
											]
										},
										"description": "Returns the list of drugs/medicines stored in the system."
									},
									"response": []
								},
								{
									"name": "Update medication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated medication is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Medication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DosageUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('TimeSchedules');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Frequency');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('FrequencyUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Route');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('Duration');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('DurationUnit');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('StartDate');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('RefillNeeded');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('IsExistingMedication');\r",
													"    pm.expect(jsonRes.Data.Medication).to.have.property('ConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('TotalDoseCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingConsumptionCount');\r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary).to.have.property('PendingDoseCount');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.Medication.ConsumptionSummary.TotalConsumptionCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.Medication.TimeSchedules.length).greaterThan(0); \r",
													"\r",
													"    var expectedDrugId = pm.environment.get(\"DRUG_ID\");\r",
													"    pm.expect(jsonRes.Data.Medication.DrugId).equals(expectedDrugId);    \r",
													"  \r",
													"    var expectedDuration = 10;\r",
													"    pm.expect(jsonRes.Data.Medication.Duration).equals(expectedDuration);    \r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Duration\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"{{MEDICATION_ID}}"
											]
										},
										"description": "Update the already existing drug order."
									},
									"response": []
								}
							]
						},
						{
							"name": "Medication consumption",
							"item": [
								{
									"name": "Get medication consumption list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var d = new Date();\r",
													"\r",
													"var fromDate = formatDate(d.addDays(2));\r",
													"var toDate = formatDate((new Date()).addDays(7));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_FROM\", fromDate);\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_TO\", toDate);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var medication_consumption_id = jsonData.Data.MedicationConsumptions.Items[0].id;\r",
													"    pm.environment.set(\"MEDICATION_CONSUMPTION_ID\", medication_consumption_id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumptions for patient are returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.have.property('TotalCount');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.have.property('Items');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.TotalCount).greaterThan(0);    \r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.Items.length).greaterThan(0);    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/search-for-patient/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"search-for-patient",
												"{{PATIENT_USER_ID}}"
											],
											"query": [
												{
													"key": "drugOrderId",
													"value": "{{DRUG_ORDER_ID}}",
													"disabled": true
												},
												{
													"key": "medicationId",
													"value": "{{MEDICATION_ID}}",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "{{MEDICATION_CONSUMPTION_SCHEDULE_FROM}}",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "{{MEDICATION_CONSUMPTION_SCHEDULE_TO}}",
													"disabled": true
												},
												{
													"key": "fromDate",
													"value": "2021-10-21",
													"disabled": true
												},
												{
													"key": "toDate",
													"value": "2021-06-21",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get medication consumption by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumption');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('MedicationId');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('DrugName');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('DrugId');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('Dose');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('Details');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.have.property('Status');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.MedicationConsumption.Dose).greaterThan(0);    \r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/{{MEDICATION_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"{{MEDICATION_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med schedule for duration in future",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var d = new Date();\r",
													"\r",
													"var fromDate = formatDate(d);\r",
													"var toDate = formatDate((new Date()).addDays(10));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_FROM\", fromDate);\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_TO\", toDate);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption for duration is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).greaterThan(0);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"\r",
													"    pm.expect(firstMed).to.have.property('id');\r",
													"    pm.expect(firstMed).to.have.property('DrugName');\r",
													"    pm.expect(firstMed).to.have.property('Details');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(firstMed).to.have.property('Status');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/schedule-for-duration/{{PATIENT_USER_ID}}?duration=1w&when=past",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"schedule-for-duration",
												"{{PATIENT_USER_ID}}"
											],
											"query": [
												{
													"key": "duration",
													"value": "1w"
												},
												{
													"key": "when",
													"value": "past"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med schedule for duration in past",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var d = new Date();\r",
													"\r",
													"var fromDate = formatDate(d);\r",
													"var toDate = formatDate((new Date()).addDays(10));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_FROM\", fromDate);\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_SCHEDULE_TO\", toDate);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var consumptions = jsonData.Data.MedicationConsumptions;\r",
													"\r",
													"    var count = 1;\r",
													"    for(var c of consumptions) {\r",
													"        var name = \"MEDICATION_CONSUMPTION_ID_\" + String(count).padStart(2, '0');\r",
													"        pm.environment.set(name, c.id);\r",
													"        if(count > 5) {\r",
													"            break;\r",
													"        }\r",
													"        count++;\r",
													"    }\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption for duration is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).greaterThan(0);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"\r",
													"    pm.expect(firstMed).to.have.property('id');\r",
													"    pm.expect(firstMed).to.have.property('DrugName');\r",
													"    pm.expect(firstMed).to.have.property('Details');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(firstMed).to.have.property('Status');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/schedule-for-duration/{{PATIENT_USER_ID}}?duration=1w&when=past",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"schedule-for-duration",
												"{{PATIENT_USER_ID}}"
											],
											"query": [
												{
													"key": "duration",
													"value": "1w"
												},
												{
													"key": "when",
													"value": "past"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med summary for day",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var date = formatDate((new Date()).addDays(4));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_FOR_DATE\", date);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedule for day is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary).to.have.property('SummaryForDay');    \r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary.SummaryForDay.length).greaterThan(0);\r",
													"\r",
													"    var firstDrugSummary = jsonRes.Data.MedicationConsumptionSummary.SummaryForDay[0];\r",
													"\r",
													"    pm.expect(firstDrugSummary).to.have.property('Drug');\r",
													"    pm.expect(firstDrugSummary).to.have.property('SummaryForDrug');\r",
													"    pm.expect(firstDrugSummary).to.have.property('Schedules');\r",
													"    pm.expect(firstDrugSummary.Schedules.length).greaterThan(0);\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/summary-for-day/{{PATIENT_USER_ID}}/{{MEDICATION_CONSUMPTION_FOR_DATE}}?groupByDrug=true",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"summary-for-day",
												"{{PATIENT_USER_ID}}",
												"{{MEDICATION_CONSUMPTION_FOR_DATE}}"
											],
											"query": [
												{
													"key": "date",
													"value": "2021-10-14",
													"disabled": true
												},
												{
													"key": "groupByDrug",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med schedules for day",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var date = formatDate((new Date()).addDays(4));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_FOR_DATE\", date);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedule for day is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationSchedulesForDay');\r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay).to.have.property('Day');\r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay).to.have.property('Schedules');    \r",
													"    pm.expect(jsonRes.Data.MedicationSchedulesForDay.Schedules.length).greaterThan(0);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationSchedulesForDay.Schedules[0];\r",
													"\r",
													"    pm.expect(firstMed).to.have.property('id');\r",
													"    pm.expect(firstMed).to.have.property('DrugName');\r",
													"    pm.expect(firstMed).to.have.property('Details');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleStart');\r",
													"    pm.expect(firstMed).to.have.property('TimeScheduleEnd');\r",
													"    pm.expect(firstMed).to.have.property('Status');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/schedule-for-day/{{PATIENT_USER_ID}}/{{MEDICATION_CONSUMPTION_FOR_DATE}}?groupByDrug=true&date={{MEDICATION_CONSUMPTION_FOR_DATE}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"schedule-for-day",
												"{{PATIENT_USER_ID}}",
												"{{MEDICATION_CONSUMPTION_FOR_DATE}}"
											],
											"query": [
												{
													"key": "groupByDrug",
													"value": "true"
												},
												{
													"key": "date",
													"value": "{{MEDICATION_CONSUMPTION_FOR_DATE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get med consumption summary for calendar months",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var date = formatDate((new Date()).addDays(4));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_CONSUMPTION_FOR_DATE\", date);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption summary for calendar months is returned\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptionSummary');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptionSummary.length).greaterThan(0);\r",
													"\r",
													"    var monthSummary = jsonRes.Data.MedicationConsumptionSummary[0];\r",
													"\r",
													"    pm.expect(monthSummary).to.have.property('Month');\r",
													"    pm.expect(monthSummary).to.have.property('DaysInMonth');\r",
													"    pm.expect(monthSummary).to.have.property('SummaryForMonth');\r",
													"\r",
													"    var monthSummaryForDrug = monthSummary.SummaryForMonth[0];\r",
													"\r",
													"    pm.expect(monthSummaryForDrug).to.have.property('Drug');\r",
													"    pm.expect(monthSummaryForDrug).to.have.property('SummaryForDrug');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Missed');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Taken');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Unknown');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Upcoming');\r",
													"    pm.expect(monthSummaryForDrug.SummaryForDrug).to.have.property('Overdue');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/summary-for-calendar-months/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"summary-for-calendar-months",
												"{{PATIENT_USER_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark as taken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedule marked as taken\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumption');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption.Status).eqls('Taken');\r",
													"  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-as-taken/{{MEDICATION_CONSUMPTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-as-taken",
												"{{MEDICATION_CONSUMPTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark list of med consumptions as taken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedules in list are marked as taken\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).equals(2);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"    var secondMed = jsonRes.Data.MedicationConsumptions[1];\r",
													"\r",
													"    pm.expect(firstMed.Status).equals(\"Taken\");\r",
													"    pm.expect(secondMed.Status).equals(\"Taken\");\r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"MedicationConsumptionIds\": [\r\n        \"{{MEDICATION_CONSUMPTION_ID_03}}\",\r\n        \"{{MEDICATION_CONSUMPTION_ID_05}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-list-as-taken",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-list-as-taken"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark as missed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedule marked as missed\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumption');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumption.Status).eqls('Missed');\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-as-missed/{{MEDICATION_CONSUMPTION_ID_02}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-as-missed",
												"{{MEDICATION_CONSUMPTION_ID_02}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mark list of med consumptions as missed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication consumption schedules in list are marked as missed\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('MedicationConsumptions');\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.MedicationConsumptions.length).equals(2);\r",
													"\r",
													"    var firstMed = jsonRes.Data.MedicationConsumptions[0];\r",
													"    var secondMed = jsonRes.Data.MedicationConsumptions[1];\r",
													"\r",
													"    pm.expect(firstMed.Status).equals(\"Missed\");\r",
													"    pm.expect(secondMed.Status).equals(\"Missed\");\r",
													"  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"MedicationConsumptionIds\": [\r\n        \"{{MEDICATION_CONSUMPTION_ID_04}}\",\r\n        \"{{MEDICATION_CONSUMPTION_ID_06}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/mark-list-as-missed",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"mark-list-as-missed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add another medication by drug id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Medication.id;\r",
													"    pm.environment.set(\"MEDICATION_ID\", id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {\r",
													"    var date = new Date(this.valueOf());\r",
													"    date.setDate(date.getDate() + days);\r",
													"    return date;\r",
													"}\r",
													"\r",
													"function formatDate(date) {\r",
													"    var d = new Date(date),\r",
													"        month = '' + (d.getMonth() + 1),\r",
													"        day = '' + d.getDate(),\r",
													"        year = d.getFullYear();\r",
													"\r",
													"    if (month.length < 2) \r",
													"        month = '0' + month;\r",
													"    if (day.length < 2) \r",
													"        day = '0' + day;\r",
													"\r",
													"    return [year, month, day].join('-');\r",
													"}\r",
													"\r",
													"var start_date = formatDate((new Date()).addDays(-2));\r",
													"\r",
													"pm.environment.set(\"MEDICATION_START_DATE\", start_date);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"DrugId\": \"{{DRUG_ID}}\",\n    \"Dose\": 1.5,\n    \"DosageUnit\": \"Tablet\",\n    \"TimeSchedules\": [\n        \"Morning\", \n        \"Afternoon\"\n    ],\n    \"FrequencyUnit\": \"Daily\",\n    \"Route\": \"Oral\",\n    \"Duration\": 2,\n    \"DurationUnit\": \"Weeks\",\n    \"StartDate\": \"{{MEDICATION_START_DATE}}\",\n    \"RefillNeeded\": true,\n    \"RefillCount\": 2,\n    \"Instructions\": \"If there is reaction or allergy, please contact immediately.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												""
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Delete future medication consumptions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Future medication consumption schedules are deleted\", function () {\r",
													"   \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data).to.have.property('DeletedCount');\r",
													"    pm.expect(jsonRes.Data.DeletedCount).greaterThan(0);\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/medication-consumptions/delete-future-schedules/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medication-consumptions",
												"delete-future-schedules",
												"{{MEDICATION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete medication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Medication is deleted\", function () {\r",
													"\r",
													"    var expectedValue = true;\r",
													"    \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/medications/{{MEDICATION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"medications",
												"{{MEDICATION_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Drug prescriptions: Active and past",
							"item": [
								{
									"name": "Get active drug prescriptions for patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/drug-order/active-for-patient/{{PATIENT_ROLE_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"drug-order",
												"active-for-patient",
												"{{PATIENT_ROLE_USER_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get past drug prescriptions for patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/drug-order/past-for-patient/{{PATIENT_ROLE_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"drug-order",
												"past-for-patient",
												"{{PATIENT_ROLE_USER_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Diagnosis",
					"item": [
						{
							"name": "Add diagnosis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"DIAGNOSIS_ID\", jsonRes.Data.Diagnosis.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New diagnosis record is created\", function () {\r",
											"\r",
											"    var expectedValue = false;\r",
											"    var expectedDiagnosisId = pm.environment.get(\"DIAGNOSIS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('IsClinicallyActive');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('Interpretation');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Diagnosis.IsClinicallyActive).equals(expectedValue);\r",
											"    pm.expect(jsonRes.Data.Diagnosis.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"MedicalPractitionerUserId\": \"{{DOCTOR_USER_ID}}\",\r\n    \"MedicalConditionId\": null,\r\n    \"Comments\": \"better than earlier\",\r\n    \"IsClinicallyActive\": false,\r\n    \"ValidationStatus\": \"Confirmed\",\r\n    \"Interpretation\": \"Significant change up\",\r\n    \"OnsetDate\": \"2021-09-15\",\r\n    \"EndDate\": \"2021-09-25\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get diagnosis by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Diagnosis record is returned\", function () {\r",
											"\r",
											"    var expectedValue = false;\r",
											"    var expectedDiagnosisId = pm.environment.get(\"DIAGNOSIS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('IsClinicallyActive');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('Interpretation');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Diagnosis.IsClinicallyActive).equals(expectedValue);\r",
											"    pm.expect(jsonRes.Data.Diagnosis.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/{{DIAGNOSIS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"{{DIAGNOSIS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update diagnosis record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated Diagnosis record is returned\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    var expectedDiagnosisId = pm.environment.get(\"DIAGNOSIS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('IsClinicallyActive');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('Interpretation');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Diagnosis.IsClinicallyActive).equals(expectedValue);\r",
											"    pm.expect(jsonRes.Data.Diagnosis.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"MedicalPractitionerUserId\": \"0652a79e-c549-478d-bc99-42187dd91d30\",\r\n    \"MedicalConditionId\": \"06fbc6fd-b819-416e-8dc9-e20bb59c11c9\",\r\n    \"Comments\": \"Condition becomes worse day by day\",\r\n    \"IsClinicallyActive\": true,\r\n    \"ValidationStatus\": \"Negated\",\r\n    \"Interpretation\": \"Critically abnormal\",\r\n    \"OnsetDate\": \"2021-09-05\",\r\n    \"EndDate\": \"2021-09-12\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/{{DIAGNOSIS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"{{DIAGNOSIS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search diagnosis records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of diagnosis records is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/search?onSetDateFrom=2021-09-14&onSetDateTo=2021-10-15&orderBy=IsClinicallyActive&order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"search"
									],
									"query": [
										{
											"key": "onSetDateFrom",
											"value": "2021-09-14"
										},
										{
											"key": "onSetDateTo",
											"value": "2021-10-15"
										},
										{
											"key": "orderBy",
											"value": "IsClinicallyActive"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete diagnosis records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Diagnosis record is deleted\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/diagnoses/{{DIAGNOSIS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"diagnoses",
										"{{DIAGNOSIS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "Add order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();",
											"",
											"try {",
											"    pm.environment.set(\"ORDER_ID\", jsonRes.Data.Order.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"New order record is created\", function () {",
											"",
											"    var expectedType = \"Drug order\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedCurrentState = \"Raised query\";",
											"",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Order');",
											"    pm.expect(jsonRes.Data.Order).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Order).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('Type');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('MedicalPractitionerUserId');",
											"",
											"    ",
											"    pm.expect(jsonRes.Data.Order.Type).equals(expectedType);",
											"    pm.expect(jsonRes.Data.Order.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Order.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.Order.CurrentState).equals(expectedCurrentState);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Type\": \"DrugOrder\",\n    \"DisplayId\": \"1234\",\n    \"MedicalPractitionerUserId\": \"{{DOCTOR_USER_ID}}\",\n    \"CurrentState\": \"RaisedQuery\",\n    \"OrderDate\": \"2021-09-23\",\n    \"AdditionalInformation\": \"Nothing\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"order record is returned\", function () {",
											"",
											"    var expectedType = \"Drug order\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedMedicalPractitionerUserId = pm.environment.get(\"DOCTOR_USER_ID\");",
											"    var expectedCurrentState = \"Raised query\";",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Order');",
											"    pm.expect(jsonRes.Data.Order).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Order).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('Type');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('MedicalPractitionerUserId');",
											"",
											"    ",
											"    pm.expect(jsonRes.Data.Order.Type).equals(expectedType);",
											"    pm.expect(jsonRes.Data.Order.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Order.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserId);",
											"    pm.expect(jsonRes.Data.Order.CurrentState).equals(expectedCurrentState);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/{{ORDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"{{ORDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated order record is returned\", function () {",
											"",
											"    var expectedType = \"Drug order\";",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
											"    var expectedCurrentState = \"Initiated\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Order');",
											"    pm.expect(jsonRes.Data.Order).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Order).to.have.property('id');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('Type');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('PatientUserId');",
											"    pm.expect(jsonRes.Data.Order).to.have.property('MedicalPractitionerUserId');",
											" ",
											"    pm.expect(jsonRes.Data.Order.Type).equals(expectedType);",
											"    pm.expect(jsonRes.Data.Order.PatientUserId).equals(expectedPatientUserId);",
											"    pm.expect(jsonRes.Data.Order.CurrentState).equals(expectedCurrentState);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"CurrentState\": \"Initiated\",\n    \"OrderDate\": \"2021-09-23\",\n    \"AdditionalInformation\": \"Some additional information\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/{{ORDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"{{ORDER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search order records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of order records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('OrderRecords');",
											"    pm.expect(jsonRes.Data.OrderRecords.Items.length).to.be.greaterThan(0);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/search?type=DrugOrder&orderBy=Type&order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"search"
									],
									"query": [
										{
											"key": "type",
											"value": "DrugOrder"
										},
										{
											"key": "orderDateFrom",
											"value": "2021-09-22",
											"disabled": true
										},
										{
											"key": "orderDateFrom",
											"value": "2021-10-23",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "Type"
										},
										{
											"key": "order",
											"value": "ascending"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "currentState",
											"value": "RaisedQuery",
											"disabled": true
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Order record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/orders/{{ORDER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"orders",
										"{{ORDER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dooctor Note",
					"item": [
						{
							"name": "Add doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"DOCTOR_NOTE_ID\", jsonRes.Data.DoctorNote.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"A New doctor note record is created\", function () {\r",
											"\r",
											"    var expectedValidationStatus = \"Confirmed\";\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNote');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('Notes');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('RecordDate');\r",
											"    \r",
											"\r",
											"    pm.expect(jsonRes.Data.DoctorNote.ValidationStatus).equals(expectedValidationStatus);\r",
											"    pm.expect(jsonRes.Data.DoctorNote.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"pm.environment.set(\"DOCTOR_NOTE_VISIT_ID\", userId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"VisitId\": \"{{DOCTOR_NOTE_VISIT_ID}}\",\r\n    \"ValidationStatus\": \"Confirmed\",\r\n    \"Notes\": \"Prescribing two days bed rest and more liquid no fried food\",\r\n    \"RecordDate\": \"2021-09-22\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get doctor note by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor note record is returned\", function () {\r",
											"\r",
											"    var expectedValidationStatus = \"Confirmed\";\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNote');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('Notes');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('RecordDate');\r",
											"    \r",
											"\r",
											"    pm.expect(jsonRes.Data.DoctorNote.ValidationStatus).equals(expectedValidationStatus);\r",
											"    pm.expect(jsonRes.Data.DoctorNote.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/{{DOCTOR_NOTE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"{{DOCTOR_NOTE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated doctor note record is returned\", function () {\r",
											"\r",
											"    var expectedValidationStatus = \"Preliminary\";\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNote');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('Notes');\r",
											"    pm.expect(jsonRes.Data.DoctorNote).to.have.property('RecordDate');\r",
											"    \r",
											"\r",
											"    pm.expect(jsonRes.Data.DoctorNote.ValidationStatus).equals(expectedValidationStatus);\r",
											"    pm.expect(jsonRes.Data.DoctorNote.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"VisitId\": \"{{DOCTOR_NOTE_VISIT_ID}}\",\r\n    \"ValidationStatus\": \"Preliminary\",\r\n    \"Notes\": \"Prescribing rest at home and light food\",\r\n    \"RecordDate\": \"2021-09-16\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/{{DOCTOR_NOTE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"{{DOCTOR_NOTE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of doctor note is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('DoctorNotes');\r",
											"    pm.expect(jsonRes.Data.DoctorNotes.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/search/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"search",
										"{{PATIENT_USER_ID}}"
									],
									"query": [
										{
											"key": "recordDateFrom",
											"value": "2021-09-01",
											"disabled": true
										},
										{
											"key": "recordDateTo",
											"value": "2021-10-14",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "RecordDate",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete doctor note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Doctor note record is deleted\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    var jsonRes = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{DOCTOR_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/doctor-notes/{{DOCTOR_NOTE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"doctor-notes",
										"{{DOCTOR_NOTE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PatientDonorsBridge",
					"item": [
						{
							"name": "Add patient donors bridge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_DONORS_ID\", jsonRes.Data.PatientDonors.id);\r",
											"    pm.environment.set(\"BLOOD_BRIDGE_NAME\", jsonRes.Data.PatientDonors.Name);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New patient donor bridge record is created\", function () {\r",
											"\r",
											"    var expectedDiagnosisId = pm.environment.get(\"PATIENT_DONORS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDonors');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('Status');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('DonorUserId');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('BloodGroup');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.PatientDonors.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"DonorUserId\": \"{{DONOR_USER_ID}}\",\r\n    \"VolunteerUserId\": \"{{VOLUNTEER_USER_ID}}\",\r\n    \"Name\": \"DEF0007\",\r\n    \"DonorType\": \"Blood bridge\",\r\n    \"BloodGroup\": \"AB+\",\r\n    \"QuantityRequired\": 2,\r\n    \"NextDonationDate\": \"2022-11-15\",\r\n    \"LastDonationDate\": \"2022-09-15\",\r\n    \"Status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/patient-donors",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"patient-donors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get patient donors bridge by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Diagnosis record is returned\", function () {\r",
											"\r",
											"    var expectedValue = false;\r",
											"    var expectedDiagnosisId = pm.environment.get(\"DIAGNOSIS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Diagnosis');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('IsClinicallyActive');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('ValidationStatus');\r",
											"    pm.expect(jsonRes.Data.Diagnosis).to.have.property('Interpretation');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Diagnosis.IsClinicallyActive).equals(expectedValue);\r",
											"    pm.expect(jsonRes.Data.Diagnosis.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/patient-donors/{{PATIENT_DONORS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"patient-donors",
										"{{PATIENT_DONORS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update patient donors bridge record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated patient donor bridge record is created\", function () {\r",
											"\r",
											"    var expectedDiagnosisId = pm.environment.get(\"PATIENT_DONORS_ID\");\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDonors');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('Status');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('DonorUserId');\r",
											"    pm.expect(jsonRes.Data.PatientDonors).to.have.property('BloodGroup');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.PatientDonors.id).equals(expectedDiagnosisId);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"DonorUserId\": \"{{DONOR_USER_ID}}\",\r\n    \"VolunteerUserId\": \"{{VOLUNTEER_USER_ID}}\",\r\n    \"Name\": \"ABC0001\",\r\n    \"DonorType\": \"Blood bridge\",\r\n    \"BloodGroup\": \"O+\",\r\n    \"QuantityRequired\": 1,\r\n    \"NextDonationDate\": \"2021-09-15\",\r\n    \"LastDonationDate\": \"2021-09-15\",\r\n    \"Status\": \"Active\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/patient-donors/{{PATIENT_DONORS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"patient-donors",
										"{{PATIENT_DONORS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search patient donors bridge record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of patient dodnor bridge records is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('PatientDonors');\r",
											"    pm.expect(jsonRes.Data.PatientDonors.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/patient-donors/search?patientUserId={{PATIENT_USER_ID}}&onlyElligible=true",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"patient-donors",
										"search"
									],
									"query": [
										{
											"key": "nextDonationDateFrom",
											"value": "2021-09-14",
											"disabled": true
										},
										{
											"key": "nextDonationDateTo",
											"value": "2021-10-15",
											"disabled": true
										},
										{
											"key": "orderedBy",
											"value": "NextDonationDate",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										},
										{
											"key": "donorUserId",
											"value": "{{DONOR_USER_ID}}",
											"disabled": true
										},
										{
											"key": "volunteerUserId",
											"value": "{{VOLUNTEER_USER_ID}}",
											"disabled": true
										},
										{
											"key": "name",
											"value": "{{BLOOD_BRIDGE_NAME}}",
											"disabled": true
										},
										{
											"key": "bloodGroup",
											"value": "O+",
											"disabled": true
										},
										{
											"key": "status",
											"value": "Active",
											"disabled": true
										},
										{
											"key": "onlyElligible",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete patient donors bridge record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient donor bridge record is deleted\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/patient-donors/{{PATIENT_DONORS_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"patient-donors",
										"{{PATIENT_DONORS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Symptom",
					"item": [
						{
							"name": "Symptom types",
							"item": [
								{
									"name": "Add new symptom again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    var id = jsonRes.Data.SymptomType.id;\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_ID\", id);\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_HEADACHE_ID\", id);\r",
													"    console.log(id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New symptom type is created\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('ImageResourceId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Symptom).equals(\"Headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Severe to moderate headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{DOCTOR_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Symptom\": \"Headache\",\n    \"Description\": \"Severe to moderate headache\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Migrain\"\n    ],\n    \"Language\": \"en-US\",\n    \"ImageResourceId\": \"92313a9e-0eb0-46fa-ac24-c137f28c33d4\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types"
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								},
								{
									"name": "Symptom types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom type by id is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('ImageResourceId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Symptom).equals(\"Headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Severe to moderate headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/{{SYMPTOM_TYPE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"{{SYMPTOM_TYPE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a list of symptoms from database",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    var symptomTypes = jsonRes.Data.SymptomTypes.Items;\r",
													"    \r",
													"    if (symptomTypes.length > 0) {\r",
													"        var symptomTypeIds = symptomTypes.map((x) => { return x.id; });\r",
													"        console.log(symptomTypeIds);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_1\", symptomTypeIds[0]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_2\", symptomTypeIds[1]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_3\", symptomTypeIds[2]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_4\", symptomTypeIds[3]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_5\", symptomTypeIds[4]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_6\", symptomTypeIds[5]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_7\", symptomTypeIds[6]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_8\", symptomTypeIds[7]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_9\", symptomTypeIds[8]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_10\", symptomTypeIds[9]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_11\", symptomTypeIds[10]);\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_12\", symptomTypeIds[11]);\r",
													"        \r",
													"        var count = symptomTypes.length;\r",
													"        var lastSymptomType = symptomTypes[count -1];\r",
													"        pm.environment.set(\"SYMPTOM_TYPE_ID_A\", lastSymptomType.id);\r",
													"    }\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of symptom types is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomTypes');\r",
													"    pm.expect(jsonRes.Data.SymptomTypes).to.have.property('RetrievedCount');\r",
													"    pm.expect(jsonRes.Data.SymptomTypes).to.have.property('Items');\r",
													"    pm.expect(jsonRes.Data.SymptomTypes.Items.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{DOCTOR_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/search?tag=Heart failure",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"search"
											],
											"query": [
												{
													"key": "tag",
													"value": "Heart failure"
												}
											]
										},
										"description": "Returns the list of ailments stored in the system."
									},
									"response": []
								},
								{
									"name": "Update symptom type record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom type is updated\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Migrains or severe headache occasinally with mild dizziness\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Tags\": [\n        \"Blurry vision\",\n        \"Diabetes\",\n        \"Cataract\"\n    ],\n    \"Description\": \"Migrains or severe headache occasinally with mild dizziness\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/{{SYMPTOM_TYPE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"{{SYMPTOM_TYPE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete symptom type record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom type is deleted\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types/{{SYMPTOM_TYPE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types",
												"{{SYMPTOM_TYPE_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								},
								{
									"name": "Add new symptom again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    var id = jsonRes.Data.SymptomType.id;\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_ID\", id);\r",
													"    pm.environment.set(\"SYMPTOM_TYPE_HEADACHE_ID\", id);\r",
													"    console.log(id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New body height biometrice is created\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomType');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('Language');\r",
													"    pm.expect(jsonRes.Data.SymptomType).to.have.property('ImageResourceId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomType.Symptom).equals(\"Headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Description).equals(\"Severe to moderate headache\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Language).equals(\"en-US\");\r",
													"    pm.expect(jsonRes.Data.SymptomType.Tags.length).greaterThan(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{DOCTOR_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Symptom\": \"Headache\",\n    \"Description\": \"Severe to moderate headache\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Migrain\"\n    ],\n    \"Language\": \"en-US\",\n    \"ImageResourceId\": \"92313a9e-0eb0-46fa-ac24-c137f28c33d4\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-types"
											]
										},
										"description": "Create a new drug order (medication list) for a patient for the visit."
									},
									"response": []
								}
							]
						},
						{
							"name": "Assessment template",
							"item": [
								{
									"name": "Symptoms for stroke",
									"item": [
										{
											"name": "Add symptom type - facial dropping",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Facial dropping\",\n    \"Description\": \"Face distortion and numbness\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - difficulty with speech",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_DIFFICULLTY_WITH_SPEECH_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Difficulty with speech\",\n    \"Description\": \"Difficulty while talking, lack of clarity in speech\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - Rapidly developing dizziness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_DIZZINESS_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Rapidly developing dizziness\",\n    \"Description\": \"Dizziness which is progressively getting worse.\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - Confusion",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_CONFUSION_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Confusion\",\n    \"Description\": \"Confusion and lack of cohenrence in actions.\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										},
										{
											"name": "Add symptom type - weakness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var id = jsonRes.Data.SymptomType.id;\r",
															"    pm.environment.set(\"SYMPTOM_TYPE_WEAKNESS_IN_ARMS_ID\", id);\r",
															"    console.log(id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "authorization",
														"type": "text",
														"value": "Bearer {{DOCTOR_USER_JWT}}"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Symptom\": \"Weakness in arms\",\n    \"Description\": \"Weakness in arms/limbs\",\n    \"Tags\": [\n        \"Stroke\"\n    ],\n    \"Language\": \"en-US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/symptom-types",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"symptom-types"
													]
												},
												"description": "Create a new drug order (medication list) for a patient for the visit."
											},
											"response": []
										}
									]
								},
								{
									"name": "Create template - Stroke Assessment Template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessmentTemplate.id;\r",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New assessment template is created\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Title).equals(\"Stroke\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Description).equals(\"This is an assessment to identify the onset of stroke.\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Title\": \"Stroke\",\n    \"Description\": \"This is an assessment to identify the onset of stroke.\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Paralysis\"\n    ]\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search by template title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of assessment templates are returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplates');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplates.Items.length).greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/search?title=Heart",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"search"
											],
											"query": [
												{
													"key": "title",
													"value": "Heart"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add symptoms to template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom types are added to the template\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"SymptomTypeIds\": [\r\n        \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\r\n        \"{{SYMPTOM_TYPE_HEADACHE_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIFFICULLTY_WITH_SPEECH_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIZZINESS_ID}}\",\r\n        \"{{SYMPTOM_TYPE_CONFUSION_ID}}\",\r\n        \"{{SYMPTOM_TYPE_ID_12}}\",\r\n        \"{{SYMPTOM_TYPE_WEAKNESS_IN_ARMS_ID}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/add-symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}",
												"add-symptom-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get assessment template  by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment template is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove symptoms from template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom types are removed from the template\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    var previousSymptomTypesCount = 7;\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Tags.length).lessThan(previousSymptomTypesCount);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"SymptomTypeIds\": [\r\n        \"{{SYMPTOM_TYPE_ID_12}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/remove-symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}",
												"remove-symptom-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get after removing symptom type",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment template is updated\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Description');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('Tags');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate).to.have.property('TemplateSymptomTypes');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessmentTemplate.Description).equals(\"This is updated description of the template.\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"This is updated description of the template.\",\n    \"Tags\": [\n        \"One more tag\"\n    ]\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment template is deleted\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								},
								{
									"name": "Create template again",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessmentTemplate.id;\r",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Title\": \"Stroke\",\n    \"Description\": \"This is an assessment to identify the onset of stroke.\",\n    \"Tags\": [\n        \"Stroke\",\n        \"Paralysis\"\n    ]\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add symptom types to template - Again!",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"SymptomTypeIds\": [\r\n        \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\r\n        \"{{SYMPTOM_TYPE_HEADACHE_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIFFICULLTY_WITH_SPEECH_ID}}\",\r\n        \"{{SYMPTOM_TYPE_DIZZINESS_ID}}\",\r\n        \"{{SYMPTOM_TYPE_CONFUSION_ID}}\",\r\n        \"{{SYMPTOM_TYPE_ID_12}}\",\r\n        \"{{SYMPTOM_TYPE_WEAKNESS_IN_ARMS_ID}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/add-symptom-types",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessment-templates",
												"{{ASSESSMENT_TEMPLATE_ID}}",
												"add-symptom-types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assessment",
							"item": [
								{
									"name": "Add new assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessment.id;\r",
													"    pm.environment.set(\"SYMPTOM_ASSESSMENT_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New assessment is created\", function () {\r",
													"\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessment');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('OverallStatus');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentDate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('SymptomsRecorded');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.Title).equals(\"AHA Cardiac Rehab Assessment\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"\r",
													"    var assessmentDate = (jsonRes.Data.SymptomAssessment.AssessmentDate).split('T')[0];\r",
													"    pm.expect(assessmentDate).equals(\"2021-09-30\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"Title\": \"AHA Cardiac Rehab Assessment\",\n    \"AssessmentDate\": \"2021-09-30\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get assessment by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom assessment is returned\", function () {\r",
													"\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessment');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('OverallStatus');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('AssessmentDate');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment).to.have.property('SymptomsRecorded');\r",
													"\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.Title).equals(\"AHA Cardiac Rehab Assessment\");\r",
													"    pm.expect(jsonRes.Data.SymptomAssessment.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"\r",
													"    var assessmentDate = (jsonRes.Data.SymptomAssessment.AssessmentDate).split('T')[0];\r",
													"    pm.expect(assessmentDate).equals(\"2021-09-30\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments/{{SYMPTOM_ASSESSMENT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments",
												"{{SYMPTOM_ASSESSMENT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of assessments are returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('SymptomAssessments');\r",
													"    pm.expect(jsonRes.Data.SymptomAssessments.Items.length).greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments/search?templateId={{ASSESSMENT_TEMPLATE_ID}}&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments",
												"search"
											],
											"query": [
												{
													"key": "templateId",
													"value": "{{ASSESSMENT_TEMPLATE_ID}}"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete symptom based assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Assessment is deleted\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments/{{SYMPTOM_ASSESSMENT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments",
												"{{SYMPTOM_ASSESSMENT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add assessment again",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.SymptomAssessment.id;\r",
													"    pm.environment.set(\"SYMPTOM_ASSESSMENT_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"Title\": \"AHA Cardiac Rehab Assessment\",\n    \"AssessmentDate\": \"2021-09-30\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptom-assessments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptom-assessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Record/Update symptoms in an assessment",
							"item": [
								{
									"name": "Add patient symptom in the assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Symptom.id;\r",
													"    pm.environment.set(\"PATIENT_SYMPTOM_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New symptom is created\", function () {\r",
													"\r",
													"    var assessmentId = pm.environment.get(\"SYMPTOM_ASSESSMENT_ID\");\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"    var symptomTypeId = pm.environment.get(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\");\r",
													"    var symptomName = \"Facial dropping\";\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Severity');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('ValidationStatus');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Interpretation');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('RecordDate');\r",
													"\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentId).equals(assessmentId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Symptom).equals(symptomName);\r",
													"    pm.expect(jsonRes.Data.Symptom.SymptomTypeId).equals(symptomTypeId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentId\": \"{{SYMPTOM_ASSESSMENT_ID}}\",\n\t\"SymptomTypeId\": \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\n    \"IsPresent\": true,\n    \"Severity\": 1,\n\t\"Status\": 1,\n\t\"Interpretation\": 1,\n\t\"Comments\": \"The chronic hypertension for the patient with critically high levels.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom is returned\", function () {\r",
													"\r",
													"    var assessmentId = pm.environment.get(\"SYMPTOM_ASSESSMENT_ID\");\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"    var symptomTypeId = pm.environment.get(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\");\r",
													"    var symptomName = \"Facial dropping\";\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Severity');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('ValidationStatus');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Interpretation');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('RecordDate');\r",
													"\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentId).equals(assessmentId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Symptom).equals(symptomName);\r",
													"    pm.expect(jsonRes.Data.Symptom.SymptomTypeId).equals(symptomTypeId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/{{PATIENT_SYMPTOM_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"{{PATIENT_SYMPTOM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom is updated\", function () {\r",
													"\r",
													"    var assessmentId = pm.environment.get(\"SYMPTOM_ASSESSMENT_ID\");\r",
													"    var assessmentTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");\r",
													"    var symptomTypeId = pm.environment.get(\"SYMPTOM_TYPE_FACIAL_DROPPING_ID\");\r",
													"    var symptomName = \"Facial dropping\";\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Symptom');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('AssessmentTemplateId');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Severity');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('ValidationStatus');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Interpretation');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('RecordDate');\r",
													"    pm.expect(jsonRes.Data.Symptom).to.have.property('Comments');\r",
													"\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentTemplateId).equals(assessmentTemplateId);\r",
													"    pm.expect(jsonRes.Data.Symptom.AssessmentId).equals(assessmentId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Symptom).equals(symptomName);\r",
													"    pm.expect(jsonRes.Data.Symptom.SymptomTypeId).equals(symptomTypeId);\r",
													"    pm.expect(jsonRes.Data.Symptom.Comments).equals(\"The chronic hypertension\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Comments\": \"The chronic hypertension\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/{{PATIENT_SYMPTOM_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"{{PATIENT_SYMPTOM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search symptoms",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of assessments are returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Symptoms');\r",
													"    pm.expect(jsonRes.Data.Symptoms.Items.length).greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/search?patientUserId={{PATIENT_USER_ID}}&fromDate=2021-05-30&toDate=2022-09-30",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"search"
											],
											"query": [
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												},
												{
													"key": "symptomTypeId",
													"value": "{{SYMPTOM_TYPE_ID}}",
													"disabled": true
												},
												{
													"key": "fromDate",
													"value": "2021-05-30"
												},
												{
													"key": "toDate",
													"value": "2022-09-30"
												},
												{
													"key": "assessmentId",
													"value": "{{ASSESSMENT_ID}}",
													"disabled": true
												},
												{
													"key": "visitId",
													"value": "{{DOCTOR_VISIT_ID}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Symptom is deleted\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/{{PATIENT_SYMPTOM_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"{{PATIENT_SYMPTOM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add patient symptom",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonData = pm.response.json();\r",
													"    var id = jsonData.Data.Symptom.id;\r",
													"    pm.environment.set(\"PATIENT_SYMPTOM_ID\", id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentId\": \"{{SYMPTOM_ASSESSMENT_ID}}\",\n\t\"SymptomTypeId\": \"{{SYMPTOM_TYPE_FACIAL_DROPPING_ID}}\",\n    \"IsPresent\": true,\n    \"Severity\": 1,\n\t\"Status\": 1,\n\t\"Interpretation\": 1,\n\t\"Comments\": \"The chronic hypertension for the patient with critically high levels.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "How do you feel",
							"item": [
								{
									"name": "Add how do you feel details",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Feeling\": 1,\n    \"RecordDate\": \"2021-06-20\",\n    \"Comments\": \"abcd66\",\n    \"SymptomAssessmentId\": null\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do-you-feel",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do-you-feel"
											]
										}
									},
									"response": []
								},
								{
									"name": "How do you feel details by id",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do-you-feel/{{HOW_DO_YOU_FEEL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do-you-feel",
												"{{HOW_DO_YOU_FEEL_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search how do you feel details by patient user id",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do-you-feel/{{PATIENT_USER_ID}}/search?startDate=2021-06-15&endDate=2021-06-21",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do-you-feel",
												"{{PATIENT_USER_ID}}",
												"search"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2021-06-15"
												},
												{
													"key": "endDate",
													"value": "2021-06-21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update how do yo feel details",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Feeling\": 1,\n    \"RecordDate\": \"2021-06-21\",\n    \"Comments\": \"abcd22\",\n    \"SymptomAssessmentId\": null\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do-you-feel/{{HOW_DO_YOU_FEEL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do-you-feel",
												"{{HOW_DO_YOU_FEEL_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete how do you feel details",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "authorization",
												"type": "text",
												"value": "Bearer {{PATIENT_USER_JWT}}"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/symptoms/how-do-you-feel/{{HOW_DO_YOU_FEEL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"symptoms",
												"how-do-you-feel",
												"{{HOW_DO_YOU_FEEL_ID}}"
											]
										},
										"description": "Delete an already existing drug order."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Patient Complaint",
					"item": [
						{
							"name": "Create complaint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"let doctorUserId = pm.environment.get('DOCTOR_USER_ID');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_PATIENTUSERID\", patientUserId);\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\", doctorUserId);\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_VISITID\", patientUserId);\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_EHRID\", '');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_COMPLAINT\", 'Bad Service');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_SEVERITY\", 'Medium');\r",
											"pm.environment.set(\"PATIENT_COMPLAINT_RECORDDATE\", new Date());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_COMPLAINT_ID\", jsonRes.Data.Complaint.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New Patient Complaint record is created\", function () {\r",
											"\r",
											"    let expectedPatientUserID = pm.environment.get(\"PATIENT_COMPLAINT_PATIENTUSERID\");\r",
											"    let expectedMedicalPractitionerUserID = pm.environment.get(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\");\r",
											"    let expectedVisitID = pm.environment.get(\"PATIENT_COMPLAINT_VISITID\");\r",
											"    let expectedEHRID = pm.environment.get(\"PATIENT_COMPLAINT_EHRID\");\r",
											"    let expectedComplaint = pm.environment.get(\"PATIENT_COMPLAINT_COMPLAINT\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_COMPLAINT_SEVERITY\");\r",
											"    let expectedRecordDate = pm.environment.get(\"PATIENT_COMPLAINT_RECORDDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('MedicalPractitionerUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('RecordDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Complaint.PatientUserId).equals(expectedPatientUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.VisitId).equals(expectedVisitID);\r",
											"    pm.expect(jsonRes.Data.Complaint.EhrId).equals(expectedEHRID);\r",
											"    pm.expect(jsonRes.Data.Complaint.Complaint).equals(expectedComplaint);\r",
											"    pm.expect(jsonRes.Data.Complaint.Severity).equals(expectedSeverity);\r",
											"    pm.expect(jsonRes.Data.Complaint.RecordDate).equals(expectedRecordDate);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_COMPLAINT_PATIENTUSERID}}\",\r\n    \"MedicalPractitionerUserId\": \"{{PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID}}\",\r\n    \"VisitId\": \"{{PATIENT_COMPLAINT_VISITID}}\",\r\n    \"EhrId\": \"{{PATIENT_COMPLAINT_EHRID}}\",\r\n    \"Complaint\": \"{{PATIENT_COMPLAINT_COMPLAINT}}\",\r\n    \"Severity\": \"{{PATIENT_COMPLAINT_SEVERITY}}\",\r\n    \"RecordDate\": \"{{PATIENT_COMPLAINT_RECORDDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints"
									]
								},
								"description": "Add A Patient Complaint."
							},
							"response": []
						},
						{
							"name": "Get patient complaint by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_COMPLAINT_ID\", jsonRes.Data.Complaint.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient Complaint record should have correct values\", function () {\r",
											"\r",
											"    let expectedPatientUserID = pm.environment.get(\"PATIENT_COMPLAINT_PATIENTUSERID\");\r",
											"    let expectedMedicalPractitionerUserID = pm.environment.get(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\");\r",
											"    let expectedVisitID = pm.environment.get(\"PATIENT_COMPLAINT_VISITID\");\r",
											"    let expectedEHRID = pm.environment.get(\"PATIENT_COMPLAINT_EHRID\");\r",
											"    let expectedComplaint = pm.environment.get(\"PATIENT_COMPLAINT_COMPLAINT\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_COMPLAINT_SEVERITY\");\r",
											"    let expectedRecordDate = pm.environment.get(\"PATIENT_COMPLAINT_RECORDDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('MedicalPractitionerUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('RecordDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Complaint.PatientUserId).equals(expectedPatientUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.VisitId).equals(expectedVisitID);\r",
											"    pm.expect(jsonRes.Data.Complaint.EhrId).equals(expectedEHRID);\r",
											"    pm.expect(jsonRes.Data.Complaint.Complaint).equals(expectedComplaint);\r",
											"    pm.expect(jsonRes.Data.Complaint.Severity).equals(expectedSeverity);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/{{PATIENT_COMPLAINT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"{{PATIENT_COMPLAINT_ID}}"
									]
								},
								"description": "Get Patient Complaint by Patient Complaint id."
							},
							"response": []
						},
						{
							"name": "Update an Patient complaint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_COMPLAINT_SEVERITY\", 'Low');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedPatientUserID = pm.environment.get(\"PATIENT_COMPLAINT_PATIENTUSERID\");\r",
											"    let expectedMedicalPractitionerUserID = pm.environment.get(\"PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID\");\r",
											"    let expectedVisitID = pm.environment.get(\"PATIENT_COMPLAINT_VISITID\");\r",
											"    let expectedEHRID = pm.environment.get(\"PATIENT_COMPLAINT_EHRID\");\r",
											"    let expectedComplaint = pm.environment.get(\"PATIENT_COMPLAINT_COMPLAINT\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_COMPLAINT_SEVERITY\");\r",
											"    let expectedRecordDate = pm.environment.get(\"PATIENT_COMPLAINT_RECORDDATE\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('MedicalPractitionerUserId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('VisitId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('EhrId');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Complaint');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Complaint).to.have.property('RecordDate');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Complaint.PatientUserId).equals(expectedPatientUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.MedicalPractitionerUserId).equals(expectedMedicalPractitionerUserID);\r",
											"    pm.expect(jsonRes.Data.Complaint.VisitId).equals(expectedVisitID);\r",
											"    pm.expect(jsonRes.Data.Complaint.EhrId).equals(expectedEHRID);\r",
											"    pm.expect(jsonRes.Data.Complaint.Complaint).equals(expectedComplaint);\r",
											"    pm.expect(jsonRes.Data.Complaint.Severity).equals(expectedSeverity);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_COMPLAINT_PATIENTUSERID}}\",\r\n    \"MedicalPractitionerUserId\": \"{{PATIENT_COMPLAINT_MEDICALPRACTITIONERUSERID}}\",\r\n    \"VisitId\": \"{{PATIENT_COMPLAINT_VISITID}}\",\r\n    \"EhrId\": \"{{PATIENT_COMPLAINT_EHRID}}\",\r\n    \"Complaint\": \"{{PATIENT_COMPLAINT_COMPLAINT}}\",\r\n    \"Severity\": \"{{PATIENT_COMPLAINT_SEVERITY}}\",\r\n    \"RecordDate\": \"{{PATIENT_COMPLAINT_RECORDDATE}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/{{PATIENT_COMPLAINT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"{{PATIENT_COMPLAINT_ID}}"
									]
								},
								"description": "Update the details for a Patient Complaint."
							},
							"response": []
						},
						{
							"name": "Search Patient complaint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"List of Calorie Record is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Complaints');\r",
											"    pm.expect(jsonRes.Data.Complaints.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/search/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"search",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Search Patient Complaint using patient user id"
							},
							"response": []
						},
						{
							"name": "Delete Patient complaint record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/complaints/{{PATIENT_COMPLAINT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"complaints",
										"{{PATIENT_COMPLAINT_ID}}"
									]
								},
								"description": "Deletes Patient Complaint using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Allergy",
					"item": [
						{
							"name": "Create patient allergy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let patientUserId = pm.environment.get('PATIENT_USER_ID');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_PATIENTUSERID\", patientUserId);\r",
											"pm.environment.set(\"PATIENT_ALLERGY_Allergy\", 'Peanut');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_AllergenCategory\", 'Food');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_AllergenExposureRoute\", 'Food');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_Severity\", 'Medium');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_Reaction\", 'Difficulty Breathing');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_OtherInformation\", 'Na');\r",
											"pm.environment.set(\"PATIENT_ALLERGY_LastOccurrence\", '2021-01-01');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"PATIENT_ALLERGY_ID\", jsonRes.Data.Allergy.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New allergy record is created\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_ALLERGY_PATIENTUSERID\");\r",
											"    let expectedAllergy = pm.environment.get(\"PATIENT_ALLERGY_Allergy\");\r",
											"    let expectedAllergenCategory = pm.environment.get(\"PATIENT_ALLERGY_AllergenCategory\");\r",
											"    let expectedAllergenExposureRoute = pm.environment.get(\"PATIENT_ALLERGY_AllergenExposureRoute\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_ALLERGY_Severity\");\r",
											"    let expectedReaction = pm.environment.get(\"PATIENT_ALLERGY_Reaction\");\r",
											"    let expectedOtherInformation = pm.environment.get(\"PATIENT_ALLERGY_OtherInformation\");\r",
											"    let expectedLastOccurrence = pm.environment.get(\"PATIENT_ALLERGY_LastOccurrence\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenCategory');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenExposureRoute');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Reaction');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('OtherInformation');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('LastOccurrence');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Allergy.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.Allergy.Allergy).equals(expectedAllergy);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenCategory).equals(expectedAllergenCategory);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenExposureRoute).equals(expectedAllergenExposureRoute);\r",
											"    pm.expect(jsonRes.Data.Allergy.Severity).equals(expectedSeverity);\r",
											"    pm.expect(jsonRes.Data.Allergy.Reaction).equals(expectedReaction);\r",
											"    pm.expect(jsonRes.Data.Allergy.OtherInformation).equals(expectedOtherInformation);\r",
											"\r",
											"    var lastOccurrence = jsonRes.Data.Allergy.LastOccurrence.split('T')[0];\r",
											"    pm.expect(lastOccurrence).equals(expectedLastOccurrence);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_ALLERGY_PATIENTUSERID}}\",\r\n    \"Allergy\": \"{{PATIENT_ALLERGY_Allergy}}\",\r\n    \"AllergenCategory\": \"{{PATIENT_ALLERGY_AllergenCategory}}\",\r\n    \"AllergenExposureRoute\": \"{{PATIENT_ALLERGY_AllergenExposureRoute}}\",\r\n    \"Severity\": \"{{PATIENT_ALLERGY_Severity}}\",\r\n    \"Reaction\": \"{{PATIENT_ALLERGY_Reaction}}\",\r\n    \"OtherInformation\": \"{{PATIENT_ALLERGY_OtherInformation}}\",\r\n    \"LastOccurrence\": \"{{PATIENT_ALLERGY_LastOccurrence}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies"
									]
								},
								"description": "Add A PatientAllergy."
							},
							"response": []
						},
						{
							"name": "Get patient allergy by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient Allergy should have correct data\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_ALLERGY_PATIENTUSERID\");\r",
											"    let expectedAllergy = pm.environment.get(\"PATIENT_ALLERGY_Allergy\");\r",
											"    let expectedAllergenCategory = pm.environment.get(\"PATIENT_ALLERGY_AllergenCategory\");\r",
											"    let expectedAllergenExposureRoute = pm.environment.get(\"PATIENT_ALLERGY_AllergenExposureRoute\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_ALLERGY_Severity\");\r",
											"    let expectedReaction = pm.environment.get(\"PATIENT_ALLERGY_Reaction\");\r",
											"    let expectedOtherInformation = pm.environment.get(\"PATIENT_ALLERGY_OtherInformation\");\r",
											"    let expectedLastOccurrence = pm.environment.get(\"PATIENT_ALLERGY_LastOccurrence\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenCategory');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenExposureRoute');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Reaction');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('OtherInformation');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('LastOccurrence');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Allergy.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.Allergy.Allergy).equals(expectedAllergy);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenCategory).equals(expectedAllergenCategory);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenExposureRoute).equals(expectedAllergenExposureRoute);\r",
											"    pm.expect(jsonRes.Data.Allergy.Severity).equals(expectedSeverity);\r",
											"    pm.expect(jsonRes.Data.Allergy.Reaction).equals(expectedReaction);\r",
											"    pm.expect(jsonRes.Data.Allergy.OtherInformation).equals(expectedOtherInformation);\r",
											"\r",
											"    var lastOccurrence = jsonRes.Data.Allergy.LastOccurrence.split('T')[0];\r",
											"    pm.expect(lastOccurrence).equals(expectedLastOccurrence);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/{{PATIENT_ALLERGY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"{{PATIENT_ALLERGY_ID}}"
									]
								},
								"description": "Get an PatientAllergy by PatientAllergy id."
							},
							"response": []
						},
						{
							"name": "Update an patient allergy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"PATIENT_ALLERGY_Severity\", 'Low');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Correct updates should be reflected\", function () {\r",
											"\r",
											"    let expectedPatientUserId = pm.environment.get(\"PATIENT_ALLERGY_PATIENTUSERID\");\r",
											"    let expectedAllergenCategory = pm.environment.get(\"PATIENT_ALLERGY_AllergenCategory\");\r",
											"    let expectedAllergenExposureRoute = pm.environment.get(\"PATIENT_ALLERGY_AllergenExposureRoute\");\r",
											"    let expectedSeverity = pm.environment.get(\"PATIENT_ALLERGY_Severity\");\r",
											"    let expectedReaction = pm.environment.get(\"PATIENT_ALLERGY_Reaction\");\r",
											"    let expectedOtherInformation = pm.environment.get(\"PATIENT_ALLERGY_OtherInformation\");\r",
											"    let expectedLastOccurrence = pm.environment.get(\"PATIENT_ALLERGY_LastOccurrence\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('PatientUserId');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Allergy');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenCategory');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('AllergenExposureRoute');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Severity');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('Reaction');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('OtherInformation');\r",
											"    pm.expect(jsonRes.Data.Allergy).to.have.property('LastOccurrence');\r",
											"\r",
											"    pm.expect(jsonRes.Data.Allergy.PatientUserId).equals(expectedPatientUserId);\r",
											"    pm.expect(jsonRes.Data.Allergy.Allergy).equals(\"Nut allergy\");\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenCategory).equals(expectedAllergenCategory);\r",
											"    pm.expect(jsonRes.Data.Allergy.AllergenExposureRoute).equals(expectedAllergenExposureRoute);\r",
											"    pm.expect(jsonRes.Data.Allergy.Severity).equals(\"Low\");\r",
											"    pm.expect(jsonRes.Data.Allergy.Reaction).equals(expectedReaction);\r",
											"    pm.expect(jsonRes.Data.Allergy.OtherInformation).equals(expectedOtherInformation);\r",
											"\r",
											"    var lastOccurrence = jsonRes.Data.Allergy.LastOccurrence.split('T')[0];\r",
											"    pm.expect(lastOccurrence).equals(expectedLastOccurrence);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Allergy\": \"Nut allergy\",\r\n    \"Severity\": \"{{PATIENT_ALLERGY_Severity}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/{{PATIENT_ALLERGY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"{{PATIENT_ALLERGY_ID}}"
									]
								},
								"description": "Update the details for an PatientAllergy."
							},
							"response": []
						},
						{
							"name": "Search allergies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient allergies are returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergies');\r",
											"    pm.expect(jsonRes.Data.Allergies.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/search",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"search"
									],
									"query": [
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}",
											"disabled": true
										},
										{
											"key": "allergy",
											"value": "pea",
											"disabled": true
										}
									]
								},
								"description": "Search PatientAllergy using query parameters."
							},
							"response": []
						},
						{
							"name": "Get patient allergies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Current patient allergies are returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Allergies');\r",
											"    pm.expect(jsonRes.Data.Allergies.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/for-patient/{{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"for-patient",
										"{{PATIENT_USER_ID}}"
									]
								},
								"description": "Search PatientAllergy using query parameters."
							},
							"response": []
						},
						{
							"name": "Delete patient allergy record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Deleted is true\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "Session token (JWT) for the user",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API client secret key",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/allergies/{{PATIENT_ALLERGY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"allergies",
										"{{PATIENT_ALLERGY_ID}}"
									]
								},
								"description": "Deletes PatientAllergy using ID"
							},
							"response": []
						}
					]
				},
				{
					"name": "Biometrics",
					"item": [
						{
							"name": "Blood oxygen saturation",
							"item": [
								{
									"name": "Add blood oxygen saturation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"BIOMETRICS_BLOOD_OXYGEN_ID\", jsonRes.Data.BloodOxygenSaturation.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New blood oxygen saturation record is created\", function () {",
													"",
													"    var expectedValue = 85;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"pm.environment.set(\"RECORDED_BY_USER_ID\", userId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"BloodOxygenSaturation\": 85,\n    \"Unit\": \"%\",\n    \"RecordDate\": \"2021-09-01\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get blood oxygen saturation by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Blood oxygen saturation record is returned\", function () {",
													"",
													"    var expectedValue = 85;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update blood oxygen saturation by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated blood oxygen saturation record is returned\", function () {",
													"",
													"    var expectedBloodOxygenSaturation = 90;",
													"    var expectedRecordDate = \"2021-09-07T00:00:00.000Z\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('BloodOxygenSaturation');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.BloodOxygenSaturation).equals(expectedBloodOxygenSaturation);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.RecordDate).equals(expectedRecordDate);",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturation.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"BloodOxygenSaturation\": \"90\",\n    \"RecordDate\": \"2021-09-07\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search blood oxygen saturation record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of blood oxygen saturation records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodOxygenSaturationRecords');",
													"    pm.expect(jsonRes.Data.BloodOxygenSaturationRecords.Items.length).greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/search?orderBy=BloodOxygenSaturation&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=100&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}",
													"disabled": true
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-01",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-14",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "BloodOxygenSaturation"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "100"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete blood oxygen saturation record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\" Blood oxygen saturation record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-oxygen-saturations/{{BIOMETRICS_BLOOD_OXYGEN_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-oxygen-saturations",
												"{{BIOMETRICS_BLOOD_OXYGEN_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Body height",
							"item": [
								{
									"name": "Add body height",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"BODY_HEIGHT\", 175);\r",
													"pm.environment.set(\"HEIGHT_UNIT\", \"cms\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BODY_HEIGHT_ID\", jsonRes.Data.BodyHeight.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New body height biometrice is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyHeight = pm.environment.get(\"BODY_HEIGHT\");\r",
													"    var expectedHeightUnit = pm.environment.get(\"HEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyHeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyHeight.BodyHeight)).equals(Number(expectedBodyHeight));\r",
													"    pm.expect(jsonRes.Data.BodyHeight.Unit).equals(expectedHeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyHeight\": {{BODY_HEIGHT}},\r\n    \"Unit\": \"{{HEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights"
											]
										},
										"description": "Adds Biometrics information for Body height"
									},
									"response": []
								},
								{
									"name": "Get body height by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Body height biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyHeight = pm.environment.get(\"BODY_HEIGHT\");\r",
													"    var expectedHeightUnit = pm.environment.get(\"HEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyHeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyHeight.BodyHeight)).equals(Number(expectedBodyHeight));\r",
													"    pm.expect(jsonRes.Data.BodyHeight.Unit).equals(expectedHeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/{{BODY_HEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"{{BODY_HEIGHT_ID}}"
											]
										},
										"description": "Get body height metric by body_height_id"
									},
									"response": []
								},
								{
									"name": "Update body height by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let height = pm.environment.get(\"BODY_HEIGHT\");",
													"pm.environment.set(\"BODY_HEIGHT\", Number(height) + 10);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated Body height biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyHeight = 180;\r",
													"    var expectedHeightUnit = pm.environment.get(\"HEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('BodyHeight');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyHeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyHeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyHeight.BodyHeight)).equals(Number(expectedBodyHeight));\r",
													"    pm.expect(jsonRes.Data.BodyHeight.Unit).equals(expectedHeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyHeight\": 180,\r\n    \"Unit\": \"{{HEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/{{BODY_HEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"{{BODY_HEIGHT_ID}}"
											]
										},
										"description": "Update the details for a body height metric by body_height_id."
									},
									"response": []
								},
								{
									"name": "Search body height",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of body height records is returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyHeightRecords');\r",
													"    pm.expect(jsonRes.Data.BodyHeightRecords.Items.length).to.be.greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/search?orderBy=BodyHeight&order=ascending&pageIndex=0&itemsPerPage=25&PatientUserId={{PATIENT_USER_ID}}&MinValue=10&MaxValue=200",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "BodyHeight",
													"description": "The name of the Parameter to order by"
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'"
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "PatientUserId",
													"value": "{{PATIENT_USER_ID}}",
													"description": "Patient User Id"
												},
												{
													"key": "MinValue",
													"value": "10",
													"description": "Minimum value of height"
												},
												{
													"key": "MaxValue",
													"value": "200",
													"description": "Maximum value of height"
												},
												{
													"key": "RecordedByUserId",
													"value": "",
													"description": "User Id of the user who recorded the height biometric record",
													"disabled": true
												}
											]
										},
										"description": "Search body height biometrics using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete body height",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-heights/{{BODY_HEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-heights",
												"{{BODY_HEIGHT_ID}}"
											]
										},
										"description": "Delete body height metric by body_height_id"
									},
									"response": []
								}
							]
						},
						{
							"name": "Body weight",
							"item": [
								{
									"name": "Add body weight",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"BODY_WEIGHT\", 88);\r",
													"pm.environment.set(\"WEIGHT_UNIT\", \"Kg\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BODY_WEIGHT_ID\", jsonRes.Data.BodyWeight.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New body weight is created\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyWeight = pm.environment.get(\"BODY_WEIGHT\");\r",
													"    var expectedWeightUnit = pm.environment.get(\"WEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('Unit');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('RecordDate');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('RecordedByUserId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyWeight.RecordDate).not.null;\r",
													"    pm.expect(jsonRes.Data.BodyWeight.RecordedByUserId).not.null;\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyWeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyWeight.BodyWeight)).equals(Number(expectedBodyWeight));\r",
													"    pm.expect(jsonRes.Data.BodyWeight.Unit).equals(expectedWeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyWeight\": {{BODY_WEIGHT}},\r\n    \"Unit\": \"{{WEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights"
											]
										},
										"description": "Adds Biometrics information for Body height"
									},
									"response": []
								},
								{
									"name": "Get body weight by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Body weight biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyWeight = pm.environment.get(\"BODY_WEIGHT\");\r",
													"    var expectedWeightUnit = pm.environment.get(\"WEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyWeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyWeight.BodyWeight)).equals(Number(expectedBodyWeight));\r",
													"    pm.expect(jsonRes.Data.BodyWeight.Unit).equals(expectedWeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/{{BODY_WEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"{{BODY_WEIGHT_ID}}"
											]
										},
										"description": "Get body height metric by body_height_id"
									},
									"response": []
								},
								{
									"name": "Update body weight by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated Body weight biometric is returned\", function () {\r",
													"\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    var expectedBodyWeight = 90;\r",
													"    var expectedWeightUnit = pm.environment.get(\"WEIGHT_UNIT\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('BodyWeight');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.BodyWeight).to.have.property('Unit');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BodyWeight.PatientUserId).equals(expectedPatientUserId);\r",
													"    pm.expect(Number(jsonRes.Data.BodyWeight.BodyWeight)).equals(Number(expectedBodyWeight));\r",
													"    pm.expect(jsonRes.Data.BodyWeight.Unit).equals(expectedWeightUnit);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"BodyWeight\": 90,\r\n    \"Unit\": \"{{WEIGHT_UNIT}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/{{BODY_WEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"{{BODY_WEIGHT_ID}}"
											]
										},
										"description": "Update the details for a body height metric by body_height_id."
									},
									"response": []
								},
								{
									"name": "Search body weight",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of body weight records is returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BodyWeightRecords');\r",
													"    pm.expect(jsonRes.Data.BodyWeightRecords.Items.length).to.be.greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "Session token (JWT) for the user",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API client secret key",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/search?orderBy=BodyWeight&order=ascending&pageIndex=0&itemsPerPage=25&PatientUserId={{PATIENT_USER_ID}}&MinValue=10&MaxValue=200",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"search"
											],
											"query": [
												{
													"key": "createdDateFrom",
													"value": "2021-05-01",
													"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-12",
													"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "BodyWeight",
													"description": "The name of the Parameter to order by"
												},
												{
													"key": "order",
													"value": "ascending",
													"description": "'ascending' or 'descending'"
												},
												{
													"key": "pageIndex",
													"value": "0",
													"description": "Page index for pagination"
												},
												{
													"key": "itemsPerPage",
													"value": "25",
													"description": "Items per page"
												},
												{
													"key": "PatientUserId",
													"value": "{{PATIENT_USER_ID}}",
													"description": "Patient User Id"
												},
												{
													"key": "MinValue",
													"value": "10",
													"description": "Minimum value of weight"
												},
												{
													"key": "MaxValue",
													"value": "200",
													"description": "Maximum value of weight"
												},
												{
													"key": "RecordedByUserId",
													"value": "",
													"description": "User Id of the user who recorded the height biometric record",
													"disabled": true
												}
											]
										},
										"description": "Search body height biometrics using query parameters."
									},
									"response": []
								},
								{
									"name": "Delete body weight",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Deleted is true\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-weights/{{BODY_WEIGHT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-weights",
												"{{BODY_WEIGHT_ID}}"
											]
										},
										"description": "Delete body height metric by body_height_id"
									},
									"response": []
								}
							]
						},
						{
							"name": "Body temperature",
							"item": [
								{
									"name": "Add body temperature record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"BIOMETRICS_BODY_TEMPERATURE_ID\", jsonRes.Data.BodyTemperature.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New body temperature record is created\", function () {",
													"",
													"    var expectedValue = 36;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.BodyTemperature.BodyTemperature).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BodyTemperature.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"BodyTemperature\": 36,\n    \"Unit\": \"Celsius\",\n    \"RecordDate\": \"2021-09-14\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get body temperature record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Body temperature record is returned\", function () {",
													"",
													"    var expectedValue = 36;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.BodyTemperature.BodyTemperature).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.BodyTemperature.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/{{BIOMETRICS_BODY_TEMPERATURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"{{BIOMETRICS_BODY_TEMPERATURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update body temperature record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated body temperature record is returned\", function () {",
													"",
													"    var expectedBodyTemperature = 37;",
													"    var expectedRecordDate = \"2021-09-14\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('BodyTemperature');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.BodyTemperature).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.BodyTemperature.BodyTemperature).equals(expectedBodyTemperature);",
													"    pm.expect(jsonRes.Data.BodyTemperature.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    var recordDate = jsonRes.Data.BodyTemperature.RecordDate;",
													"    if (recordDate) {",
													"        recordDate = recordDate.split('T')[0];",
													"    }",
													"    pm.expect(recordDate).equals(expectedRecordDate);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"BodyTemperature\": 37,\n    \"Unit\": \"C\",\n    \"RecordDate\": \"2021-09-14\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/{{BIOMETRICS_BODY_TEMPERATURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"{{BIOMETRICS_BODY_TEMPERATURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search body temperature records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of body temperature records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BodyTemperatureRecords');",
													"    pm.expect(jsonRes.Data.BodyTemperatureRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/search?recordedByUserId={{RECORDED_BY_USER_ID}}&orderBy=BodyTemperature&order=ascending&pageIndex=0&itemsPerPage=25&minValue=36&maxValue=48&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-13",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-14",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "BodyTemperature"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "36"
												},
												{
													"key": "maxValue",
													"value": "48"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete body temperature record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Body temperature record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/body-temperatures/{{BIOMETRICS_BODY_TEMPERATURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"body-temperatures",
												"{{BIOMETRICS_BODY_TEMPERATURE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Pulse",
							"item": [
								{
									"name": "Add pulse record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"BIOMETRICS_PULSE_ID\", jsonRes.Data.Pulse.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New pulse record is created\", function () {",
													"",
													"    var expectedValue = 72;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('PatientUserId');",
													"    ",
													"    pm.expect(jsonRes.Data.Pulse.Pulse).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Pulse.PatientUserId).equals(expectedPatientUserId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Pulse\": 72,\n    \"Unit\": \"%\",\n    \"RecordDate\": \"2021-09-01\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get pulse record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Pulse record is returned\", function () {",
													"",
													"    var expectedValue = 72;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.Pulse.Pulse).equals(expectedValue);",
													"    pm.expect(jsonRes.Data.Pulse.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/{{BIOMETRICS_PULSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"{{BIOMETRICS_PULSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update pulse record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated pulse record is returned\", function () {",
													"",
													"    var expectedPulse = 74;",
													"    var expectedRecordDate = \"2021-09-07\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('Pulse');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.Pulse).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.Pulse.Pulse).equals(expectedPulse);",
													"    pm.expect(jsonRes.Data.Pulse.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    var recordDate = jsonRes.Data.Pulse.RecordDate;",
													"    if (recordDate) {",
													"        recordDate = recordDate.split('T')[0];",
													"    }",
													"    pm.expect(recordDate).equals(expectedRecordDate);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Pulse\": 74,\n    \"RecordDate\": \"2021-09-07\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/{{BIOMETRICS_PULSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"{{BIOMETRICS_PULSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search pulse records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of pulse records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('PulseRecords');",
													"    pm.expect(jsonRes.Data.PulseRecords.Items.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/search?recordedByUserId={{RECORDED_BY_USER_ID}}&orderBy=Pulse&order=ascending&pageIndex=0&itemsPerPage=25&minValue=70&maxValue=76&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-01",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-12-07",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "Pulse"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "70"
												},
												{
													"key": "maxValue",
													"value": "76"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete pulse record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Pulse record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/pulse/{{BIOMETRICS_PULSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"pulse",
												"{{BIOMETRICS_PULSE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Blood cholesterol",
							"item": [
								{
									"name": "Add blood cholesterol record",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BIOMETRICS_BLOOD_CHOLESTEROL_ID\", jsonRes.Data.BloodCholesterol.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New blood cholesterol record is created\", function () {\r",
													"\r",
													"    var expectedHDL = 90;\r",
													"    var expectedLDL = 70;\r",
													"    var expectedRecordDate = \"2022-07-05\";\r",
													"    var expectedRecordedByUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodCholesterol');\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('HDL');\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('LDL');\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('RecordDate');\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('RecordedByUserId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol.HDL).equals(expectedHDL);\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol.LDL).equals(expectedLDL);\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol.RecordDate).equals(expectedRecordDate);\r",
													"    pm.expect(jsonRes.Data.BloodCholesterol.RecordedByUserId).equals(expectedRecordedByUserId);\r",
													"    \r",
													"});\r",
													"\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"TotalCholesterol\": 120,\r\n    \"HDL\": 150,\r\n    \"LDL\": 170,\r\n    \"TriglycerideLevel\": 7,\r\n    \"Ratio\": 2,\r\n    \"RecorDate\": \"2022-07-05\",\r\n    \"RecordedByUserId\": \"{{PATIENT_USER_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-cholesterol/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-cholesterol",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get blood cholesterol record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Blood cholesterol record is returned\", function () {",
													"",
													"    var expectedHDL = 120;",
													"    var expectedLDL = 90;",
													"    var expectedRecordDate = \"2022-07-05\";",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodCholesterol');",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('HDL');",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('LDL');",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('RecordDate');",
													"",
													"    pm.expect(jsonRes.Data.BloodCholesterol.HDL).equals(expectedHDL);",
													"    pm.expect(jsonRes.Data.BloodCholesterol.LDL).equals(expectedLDL);",
													"    pm.expect(jsonRes.Data.BloodCholesterol.RecordDate).equals(expectedRecordDate);",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-cholesterol/{{BIOMETRICS_BLOOD_CHOLESTEROL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-cholesterol",
												"{{BIOMETRICS_BLOOD_CHOLESTEROL_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update blood cholesterol record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated blood cholesterol record is returned\", function () {",
													"",
													"    var expectedHDL = 100;",
													"    var expectedLDL = 80;",
													"    var expectedRecordDate = \"2022-07-05\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodCholesterol');",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('HDL');",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('LDL');",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.BloodCholesterol).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodCholesterol.HDL).equals(expectedHDL);",
													"    pm.expect(jsonRes.Data.BloodCholesterol.LDL).equals(expectedLDL);",
													"    pm.expect(jsonRes.Data.BloodCholesterol.RecordDate).equals(expectedRecordDate);",
													"    pm.expect(jsonRes.Data.BloodCholesterol.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    ",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"TotalCholesterol\": 120,\n    \"HDL\": 100,\n    \"LDL\": 80,\n    \"TriglycerideLevel\": 7,\n    \"Ratio\": 2,\n    \"Unit\": \"mg/dl\",\n    \"RecorDate\": \"2022-07-05\",\n    \"RecordedByUserId\": \"{{PATIENT_USER_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-cholesterol/{{BIOMETRICS_BLOOD_CHOLESTEROL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-cholesterol",
												"{{BIOMETRICS_BLOOD_CHOLESTEROL_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search blood cholesterol records",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of blood cholesterol records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodCholesterolRecords');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-cholesterol/search?orderBy=HDL&order=ascending&pageIndex=0&itemsPerPage=25&minHDL=90&maxHDL=100&minLDL=70&maxLDL=80",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-cholesterol",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}",
													"disabled": true
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-22",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-22",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "HDL"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minTotalCholesterol",
													"value": "100",
													"disabled": true
												},
												{
													"key": "maxTotalCholesterol",
													"value": "160",
													"disabled": true
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}",
													"disabled": true
												},
												{
													"key": "minHDL",
													"value": "90"
												},
												{
													"key": "maxHDL",
													"value": "100"
												},
												{
													"key": "minLDL",
													"value": "70"
												},
												{
													"key": "maxLDL",
													"value": "80"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete blood pressure record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Blood cholesterol record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-cholesterol/{{BIOMETRICS_BLOOD_CHOLESTEROL_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-cholesterol",
												"{{BIOMETRICS_BLOOD_CHOLESTEROL_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Blood Pressure",
							"item": [
								{
									"name": "Add blood pressure record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BIOMETRICS_BLOOD_PRESSURE_ID\", jsonRes.Data.BloodPressure.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated blood pressure record is returned\", function () {\r",
													"\r",
													"    var expectedSystolic = 120;\r",
													"    var expectedDiastolic = 90;\r",
													"    var expectedRecordDate = \"2021-09-22T00:00:00.000Z\";\r",
													"    var expectedRecordedByUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressure');\r",
													"    pm.expect(jsonRes.Data.BloodPressure).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Systolic');\r",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Diastolic');\r",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('RecordDate');\r",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('RecordedByUserId');\r",
													"\r",
													"    pm.expect(jsonRes.Data.BloodPressure.Systolic).equals(expectedSystolic);\r",
													"    pm.expect(jsonRes.Data.BloodPressure.Diastolic).equals(expectedDiastolic);\r",
													"    pm.expect(jsonRes.Data.BloodPressure.RecordDate).equals(expectedRecordDate);\r",
													"    pm.expect(jsonRes.Data.BloodPressure.RecordedByUserId).equals(expectedRecordedByUserId);\r",
													"    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Systolic\": 120,\r\n    \"Diastolic\": 90,\r\n    \"Unit\": \"mm Hg\",\r\n    \"RecordDate\": \"2021-09-22\",\r\n    \"RecordedByUserId\": \"{{PATIENT_USER_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get blood pressure record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Blood pressure record is returned\", function () {",
													"",
													"    var expectedSystolic = 120;",
													"    var expectedDiastolic = 90;",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressure');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('id');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Systolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Diastolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('PatientUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodPressure.Systolic).equals(expectedSystolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.Diastolic).equals(expectedDiastolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.PatientUserId).equals(expectedPatientUserId);",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update blood pressure record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Updated blood pressure record is returned\", function () {",
													"",
													"    var expectedSystolic = 100;",
													"    var expectedDiastolic = 80;",
													"    var expectedRecordDate = \"2021-09-22T00:00:00.000Z\";",
													"    var expectedRecordedByUserId = pm.environment.get(\"RECORDED_BY_USER_ID\");",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressure');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Systolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('Diastolic');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('RecordDate');",
													"    pm.expect(jsonRes.Data.BloodPressure).to.have.property('RecordedByUserId');",
													"",
													"    pm.expect(jsonRes.Data.BloodPressure.Systolic).equals(expectedSystolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.Diastolic).equals(expectedDiastolic);",
													"    pm.expect(jsonRes.Data.BloodPressure.RecordDate).equals(expectedRecordDate);",
													"    pm.expect(jsonRes.Data.BloodPressure.RecordedByUserId).equals(expectedRecordedByUserId);",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Systolic\": 100,\n    \"Diastolic\": 80,\n    \"Unit\": \"mm Hg\",\n    \"RecordDate\": \"2021-09-22\",\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search blood pressure records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of blood pressure records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('BloodPressureRecords');",
													"    pm.expect(jsonRes.Data.BloodPressureRecords.Items.length).greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/search?recordedByUserId={{RECORDED_BY_USER_ID}}&orderBy=Systolic&order=ascending&pageIndex=0&itemsPerPage=25&MinSystolicValue=100&MaxSystolicValue=160&patientUserId={{PATIENT_USER_ID}}&MinDiastolicValue=80&MaxDiastolicValue=180",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-22",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-22",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "Systolic"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "MinSystolicValue",
													"value": "100"
												},
												{
													"key": "MaxSystolicValue",
													"value": "160"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												},
												{
													"key": "MinDiastolicValue",
													"value": "80"
												},
												{
													"key": "MaxDiastolicValue",
													"value": "180"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete blood pressure record by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\" Blood pressure record is deleted\", function () {",
													"",
													"    var expectedValue = true;",
													"    ",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-pressures",
												"{{BIOMETRICS_BLOOD_PRESSURE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Blood glucose",
							"item": [
								{
									"name": "Add blood glucose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"BIOMETRICS_BLOOD_GLUCOSE_ID\", jsonRes.Data.BloodGlucose.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"New blood glucose record is created\", function () {\r",
													"\r",
													"    var expectedValue = 98;\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.BloodGlucose).equals(expectedValue);\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"pm.environment.set(\"RECORDED_BY_USER_ID\", userId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Unit\": \"mg|dL\",\r\n    \"BloodGlucose\": 98,\r\n    \"RecordDate\": \"2021-09-02\",\r\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get blood glucose by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Blood glucose record is returned\", function () {\r",
													"\r",
													"    var expectedValue = 98;\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    \r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('PatientUserId');\r",
													"    \r",
													"\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.BloodGlucose).equals(expectedValue);\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.PatientUserId).equals(expectedPatientUserId);\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/{{BIOMETRICS_BLOOD_GLUCOSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"{{BIOMETRICS_BLOOD_GLUCOSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update blood glucose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Updated blood glucose record is returned\", function () {\r",
													"\r",
													"    var expectedValue = 106;\r",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
													"    \r",
													"   var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('BloodGlucose');\r",
													"    pm.expect(jsonRes.Data.BloodGlucose).to.have.property('PatientUserId');\r",
													"    \r",
													"    pm.expect(jsonRes.Data.BloodGlucose.BloodGlucose).equals(expectedValue);\r",
													"    pm.expect(jsonRes.Data.BloodGlucose.PatientUserId).equals(expectedPatientUserId);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"Unit\": \"mg|dL\",\r\n    \"BloodGlucose\": 106,\r\n    \"RecordDate\": \"2021-09-12\",\r\n    \"RecordedByUserId\": \"{{RECORDED_BY_USER_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/{{BIOMETRICS_BLOOD_GLUCOSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"{{BIOMETRICS_BLOOD_GLUCOSE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "search blood glucose",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Record of blood glucose is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('BloodGlucoseRecords');\r",
													"    pm.expect(jsonRes.Data.BloodGlucoseRecords.Items.length).to.be.greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/search?recordedByUserId={{RECORDED_BY_USER_ID}}&orderBy=BloodGlucose&order=ascending&pageIndex=0&itemsPerPage=25&minValue=0&maxValue=1000&patientUserId={{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"search"
											],
											"query": [
												{
													"key": "recordedByUserId",
													"value": "{{RECORDED_BY_USER_ID}}"
												},
												{
													"key": "createdDateFrom",
													"value": "2021-09-01",
													"disabled": true
												},
												{
													"key": "createdDateTo",
													"value": "2021-10-14",
													"disabled": true
												},
												{
													"key": "orderBy",
													"value": "BloodGlucose"
												},
												{
													"key": "order",
													"value": "ascending"
												},
												{
													"key": "pageIndex",
													"value": "0"
												},
												{
													"key": "itemsPerPage",
													"value": "25"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "1000"
												},
												{
													"key": "patientUserId",
													"value": "{{PATIENT_USER_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete blood glucose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Blood glucose record is deleted\", function () {\r",
													"\r",
													"    var expectedValue = true;\r",
													"    var jsonRes = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
													"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/biometrics/blood-glucose/{{BIOMETRICS_BLOOD_GLUCOSE_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"biometrics",
												"blood-glucose",
												"{{BIOMETRICS_BLOOD_GLUCOSE_ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Lab Record",
					"item": [
						{
							"name": "Add lab record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"LAB_RECORD_ID\", jsonRes.Data.LabRecord.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New lab record is created\", function () {\r",
											"\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('LabRecord');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('DisplayName');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('PatientUserId');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.LabRecord.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"TypeName\": \"Cholesterol\",\r\n    \"DisplayName\": \"A1C Level\",\r\n    \"PrimaryValue\": 5,\r\n    \"Unit\": \"%\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/lab-records",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"lab-records"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get lab record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Lab record is returned\", function () {\r",
											"\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('LabRecord');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('DisplayName');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('PatientUserId');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.LabRecord.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/lab-records/{{LAB_RECORD_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"lab-records",
										"{{LAB_RECORD_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update lab record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"LAB_RECORD_ID\", jsonRes.Data.LabRecord.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Updated lab record is returned\", function () {\r",
											"\r",
											"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('LabRecord');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('DisplayName');\r",
											"    pm.expect(jsonRes.Data.LabRecord).to.have.property('PatientUserId');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.LabRecord.PatientUserId).equals(expectedPatientUserId);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"description": "API key for client authentication",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"TypeName\": \"Cholesterol\",\r\n    \"DisplayName\": \"LDL\",\r\n    \"PrimaryValue\": 122,\r\n    \"SecondaryValue\": 150,\r\n    \"Unit\": \"mg/dL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/lab-records/{{LAB_RECORD_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"lab-records",
										"{{LAB_RECORD_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "search lab record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Lab record is returned\", function () {\r",
											"\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('LabRecordRecords');\r",
											"    pm.expect(jsonRes.Data.LabRecordRecords.Items.length).to.be.greaterThan(0);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/lab-records/search?displayName=Total Cholesterol&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"lab-records",
										"search"
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "2021-09-01",
											"disabled": true
										},
										{
											"key": "dateTo",
											"value": "2021-10-14",
											"disabled": true
										},
										{
											"key": "displayName",
											"value": "Total Cholesterol"
										},
										{
											"key": "typeName",
											"value": "Cholesterol",
											"disabled": true
										},
										{
											"key": "typeId",
											"value": "",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "RecordedAt",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete lab record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Lab record is deleted\", function () {\r",
											"\r",
											"    var expectedValue = true;\r",
											"    var jsonRes = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/lab-records/{{LAB_RECORD_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"lab-records",
										"{{LAB_RECORD_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Daily Assessment",
					"item": [
						{
							"name": "Create daily assessment record",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Feeling\": \"Worst\",\n    \"Mood\": \"Stressed\",\n    \"EnergyLevels\": [\n        \"Eat\",\n        \"Get off the bed\"\n    ]\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/clinical/daily-assessments",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"daily-assessments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search daily assessment records",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{PATIENT_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clinical/daily-assessments/search?pageIndex=0&itemsPerPage=25&patientUserId=430e4586-14f1-4021-9da9-7bc67c99b26a",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clinical",
										"daily-assessments",
										"search"
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "2021-11-18",
											"disabled": true
										},
										{
											"key": "dateTo",
											"value": "2021-11-19",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "RecordDate",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "25"
										},
										{
											"key": "feeling",
											"value": "Same",
											"disabled": true
										},
										{
											"key": "mood",
											"value": "Stressed",
											"disabled": true
										},
										{
											"key": "energyLevels",
											"value": "Get off the bed",
											"disabled": true
										},
										{
											"key": "patientUserId",
											"value": "430e4586-14f1-4021-9da9-7bc67c99b26a"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Care plans",
					"item": [
						{
							"name": "Enrollment of care plan",
							"item": [
								{
									"name": "Get available care plans",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of available care plans is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('AvailablePlans');\r",
													"    pm.expect(jsonRes.Data.AvailablePlans.length).greaterThan(0);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/care-plans?provider=AHA",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"care-plans"
											],
											"query": [
												{
													"key": "provider",
													"value": "AHA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get careplan eligibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"List of available care plans is returned\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Eligibility');\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"CARE_PALN_CODE\", \"HeartFailure\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/care-plans/eligibility/{{PATIENT_USER_ID}}/providers/AHA/careplans/{{CARE_PALN_CODE}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"care-plans",
												"eligibility",
												"{{PATIENT_USER_ID}}",
												"providers",
												"AHA",
												"careplans",
												"{{CARE_PALN_CODE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register patient- with phone and password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"PATIENT_USER_ID\", jsonRes.Data.Patient.User.id);\r",
													"    pm.environment.set(\"PATIENT_PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
													"    pm.environment.set(\"PERSON_ID\", jsonRes.Data.Patient.User.Person.id);\r",
													"    pm.environment.set(\"PERSON_ID_2\", jsonRes.Data.Patient.User.Person.id);\r",
													"\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Patient is created\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
													"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
													"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
													"var password = \"Test@123\";\r",
													"\r",
													"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
													"pm.environment.set(\"PASSWORD\", password);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client app authentication",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/patients",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patient log-in with password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"PATIENT_USER_JWT\", jsonRes.Data.AccessToken);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Patient login: Access token is returned\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
													"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client app authentication",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"{{PHONE_COUNTRY_CODE}}-{{PHONE_NUMBER}}\",\r\n    \"Password\": \"{{PASSWORD}}\",\r\n    \"LoginRoleId\": {{PATIENT_LOGIN_ROLE_ID}}\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/users/login-with-password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"users",
												"login-with-password"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update patient details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"PATIENT_FIRST_NAME\", jsonRes.Data.Patient.User.Person.FirstName);\r",
													"    pm.environment.set(\"PATIENT_PHONE\", jsonRes.Data.Patient.User.Person.Phone);\r",
													"    pm.environment.set(\"PATIENT_GENDER\", jsonRes.Data.Patient.User.Person.Gender);\r",
													"    pm.environment.set(\"PATIENT_EMAIL\", jsonRes.Data.Patient.User.Person.Email);\r",
													"\r",
													"    var phone = jsonRes.Data.Patient.User.Person.Phone;\r",
													"    var tokens = phone.split('-');\r",
													"    var phoneNumber = tokens[1];\r",
													"\r",
													"    pm.environment.set(\"PATIENT_PHONE_NUMBER\", phoneNumber);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Patient is created\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Patient');\r",
													"    pm.expect(jsonRes.Data.Patient).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Patient).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Patient).to.have.property('User');\r",
													"    pm.expect(jsonRes.Data.Patient.User).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Patient.User).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.Patient.User.Person).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Patient.User.Person).to.have.property('id');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Randomly generated user details\r",
													"\r",
													"var first_names = ['Jerry', 'Tom', 'Garfield', 'Jerome', 'Hobbes', 'Calvin', 'Nate', 'Peanuts', 'John', 'Abigale', 'Erin'];\r",
													"\r",
													"var last_names = ['Smith', 'Johnson',  'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall'];\r",
													"\r",
													"var first = first_names[Math.floor(Math.random() * first_names.length)];\r",
													"var last = last_names[Math.floor(Math.random() * last_names.length)];\r",
													"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
													"var random_postfix = (Math.floor(Math.random() * 90000) + 10000).toString();\r",
													"var email = first + \".\" + random_postfix + \".\" + last + \"@gmail.com\";\r",
													"var password = \"Test@123\";\r",
													"\r",
													"pm.environment.set(\"FIRST_NAME\", first);\r",
													"pm.environment.set(\"LAST_NAME\", last);\r",
													"pm.environment.set(\"EMAIL\", email);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client app authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"{{FIRST_NAME}}\",\r\n    \"MiddleName\": \"X\",\r\n    \"LastName\": \"{{LAST_NAME}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1979-01-01\",\r\n    \"ImageResourceId\": \"20fd7e52-0d24-4599-bda5-3ed7be2dd383\",\r\n    \"Address\": {\r\n        \"Type\": \"Official\",\r\n        \"AddressLine\": \"99/4, Hosur Mn Rd, Opp Bts Bus Stop, Bommana Halli\",\r\n        \"City\": \"Mumbai\",\r\n        \"Country\": \"India\"\r\n    },\r\n    \"DefaultTimeZone\": \"+05:30\",\r\n    \"CurrentTimeZone\": \"+05:30\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"patients",
												"{{PATIENT_USER_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enroll to care plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ID\", jsonRes.Data.Enrollment.id);\r",
													"    pm.environment.set(\"CAREPLAN_PARTICIPANT_ID\", jsonRes.Data.Enrollment.ParticipantId);\r",
													"    pm.environment.set(\"CAREPLAN_ENROLLMENT_ID\", jsonRes.Data.Enrollment.EnrollmentId);\r",
													"    pm.environment.set(\"CAREPLAN_CODE\", jsonRes.Data.Enrollment.PlanCode);\r",
													"    pm.environment.set(\"CAREPLAN_PROVIDER\", jsonRes.Data.Enrollment.Provider);\r",
													"    pm.environment.set(\"CAREPLAN_NAME\", jsonRes.Data.Enrollment.PlanName);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Patient is enrolled to careplan\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Enrollment');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('EnrollmentId');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('ParticipantId');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('PlanCode');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('Provider');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('PlanName');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('StartAt');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('EndAt');\r",
													"    pm.expect(jsonRes.Data.Enrollment).to.have.property('IsActive');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var today = (new Date()).toISOString().split('T')[0];\r",
													"pm.environment.set(\"CAREPLAN_START_DATE\", today);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Provider\": \"AHA\",\r\n    \"PlanCode\": \"HeartFailure\",\r\n    \"StartDate\": \"{{CAREPLAN_START_DATE}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/care-plans/patients/{{PATIENT_USER_ID}}/enroll",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"care-plans",
												"patients",
												"{{PATIENT_USER_ID}}",
												"enroll"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update risk and complication in careplan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.environment.set(\"CAREPLAN_ID\", jsonRes.Data.RiskDetails.id);\r",
													"    pm.environment.set(\"CAREPLAN_PARTICIPANT_ID\", jsonRes.Data.RiskDetails.ParticipantId);\r",
													"    pm.environment.set(\"CAREPLAN_ENROLLMENT_ID\", jsonRes.Data.RiskDetails.EnrollmentId);\r",
													"    pm.environment.set(\"CAREPLAN_CODE\", jsonRes.Data.RiskDetails.PlanCode);\r",
													"    pm.environment.set(\"CAREPLAN_PROVIDER\", jsonRes.Data.RiskDetails.Provider);\r",
													"    pm.environment.set(\"CAREPLAN_NAME\", jsonRes.Data.RiskDetails.PlanName);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Patient risk and complication updated\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('RiskDetails');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('PatientUserId');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('EnrollmentId');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('ParticipantId');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('PlanCode');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('Provider');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('PlanName');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('StartAt');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('EndAt');\r",
													"    pm.expect(jsonRes.Data.RiskDetails).to.have.property('IsActive');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var today = (new Date()).toISOString().split('T')[0];\r",
													"pm.environment.set(\"CAREPLAN_START_DATE\", today);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Phone\": \"+91-9919897931\",\r\n    \"Provider\": \"REAN\",\r\n    \"PlanCode\": 1,\r\n    \"Complication\": \"High blood pressure\",\r\n    \"HasHighRisk\": true\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/care-plans/patients/update-risk",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"care-plans",
												"patients",
												"update-risk"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all careplan enrollments for patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Patient is enrolled to careplan\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('PatientEnrollments');\r",
													"    pm.expect(jsonRes.Data.PatientEnrollments).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.PatientEnrollments.length).to.be.greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Provider\": \"AHA\",\r\n    \"PlanCode\": \"HeartFailure\",\r\n    \"StartDate\": \"2022-01-11\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/care-plans/patients/{{PATIENT_USER_ID}}/enrollments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"care-plans",
												"patients",
												"{{PATIENT_USER_ID}}",
												"enrollments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assessment tasks",
							"item": [
								{
									"name": "Search careplan tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    var tasks = jsonRes.Data.UserTasks.Items;",
													"    var filtered = [];",
													"    for(var i = 0; i < tasks.length; i++) {",
													"        if (filtered.length > 9) {",
													"            break;",
													"        }",
													"        var r = tasks[i];",
													"        console.log(r.Task);",
													"        if (r.Task.includes(\"Check-in\")) {",
													"            continue;",
													"        }",
													"        if(r.ActionType === 'Careplan' && r.Category === 'Assessment') {",
													"            filtered.push(r);",
													"        }",
													"    }",
													"    if (filtered.length > 0) {",
													"        var task = filtered[Math.floor(Math.random() * filtered.length)];",
													"        var dt = task.ScheduledStartTime.split('T')[0];",
													"        pm.environment.set('CAREPLAN_ASSESSMENT_TASK_ID', task.id);",
													"        pm.environment.set('CAREPLAN_ASSESSMENT_TASK_ID', task.id);",
													"        pm.environment.set('CAREPLAN_ASSESSMENT_ID', task.Action.id);",
													"    }",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"List of User task records is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('UserTasks');",
													"    pm.expect(jsonRes.Data.UserTasks.Items.length).greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/user-tasks/search?userId={{PATIENT_USER_ID}}&scheduledFrom=2022-05-02&scheduledTo=2023-07-15&itemsPerPage=2000",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"user-tasks",
												"search"
											],
											"query": [
												{
													"key": "task",
													"value": "life",
													"disabled": true
												},
												{
													"key": "actionType",
													"value": "careplan",
													"disabled": true
												},
												{
													"key": "status",
													"value": "pending",
													"description": "The other possible options are - \n1) inProgress : Tasks which are currently in progress\n2) pending / upcoming- Upcoming tasks\n3) completed- Finished tasks\n4) delayed / overdue- Tasks which are delayed beyond their scheduled duration\n5) cancelled- Tasks which have been cancelled\n",
													"disabled": true
												},
												{
													"key": "actionId",
													"value": "{{MEDICATION_CONSUMPTION_ID}}",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "{{PATIENT_USER_ID}}"
												},
												{
													"key": "category",
													"value": "Assessment",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "2022-04-28",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "2022-04-29",
													"disabled": true
												},
												{
													"key": "scheduledFrom",
													"value": "2022-05-02"
												},
												{
													"key": "scheduledTo",
													"value": "2023-07-15"
												},
												{
													"key": "orderBy",
													"value": "ScheduledStartTime",
													"disabled": true
												},
												{
													"key": "order",
													"value": "descending",
													"disabled": true
												},
												{
													"key": "pageIndex",
													"value": "0",
													"disabled": true
												},
												{
													"key": "itemsPerPage",
													"value": "2000"
												}
											]
										},
										"description": "Search User Task records with filters"
									},
									"response": [
										{
											"name": "Search careplan tasks",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/user-tasks/search?userId={{PATIENT_USER_ID}}&itemsPerPage=2000",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"user-tasks",
														"search"
													],
													"query": [
														{
															"key": "task",
															"value": "life",
															"disabled": true
														},
														{
															"key": "actionType",
															"value": "careplan",
															"disabled": true
														},
														{
															"key": "status",
															"value": "pending",
															"description": "The other possible options are - \n1) inProgress : Tasks which are currently in progress\n2) pending / upcoming- Upcoming tasks\n3) completed- Finished tasks\n4) delayed / overdue- Tasks which are delayed beyond their scheduled duration\n5) cancelled- Tasks which have been cancelled\n",
															"disabled": true
														},
														{
															"key": "actionId",
															"value": "{{MEDICATION_CONSUMPTION_ID}}",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{PATIENT_USER_ID}}"
														},
														{
															"key": "category",
															"value": "Assessment",
															"disabled": true
														},
														{
															"key": "dateFrom",
															"value": "2022-04-28",
															"disabled": true
														},
														{
															"key": "dateTo",
															"value": "2022-04-29",
															"disabled": true
														},
														{
															"key": "scheduledFrom",
															"value": "2022-05-02",
															"disabled": true
														},
														{
															"key": "scheduledTo",
															"value": "2022-07-15",
															"disabled": true
														},
														{
															"key": "orderBy",
															"value": "ScheduledStartTime",
															"disabled": true
														},
														{
															"key": "order",
															"value": "descending",
															"disabled": true
														},
														{
															"key": "pageIndex",
															"value": "0",
															"disabled": true
														},
														{
															"key": "itemsPerPage",
															"value": "2000"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 05 May 2022 16:30:09 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "189457"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "ETag",
													"value": "W/\"2e411-XK9Zr2+QB4ixOvqRTzaa8Zj/9y4\""
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Total 170 userTask records retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"UserTasks\": {\n            \"TotalCount\": 170,\n            \"RetrievedCount\": 170,\n            \"PageIndex\": 0,\n            \"ItemsPerPage\": 2000,\n            \"Order\": \"descending\",\n            \"OrderedBy\": \"CreatedAt\",\n            \"Items\": [\n                {\n                    \"id\": \"016aacb3-bd96-4620-b9d3-1a500ea57027\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"f57ed95b-ebc6-463d-939d-65d39a2ba9f6\",\n                    \"ScheduledStartTime\": \"2022-07-21T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"f57ed95b-ebc6-463d-939d-65d39a2ba9f6\",\n                        \"UserTaskId\": \"016aacb3-bd96-4620-b9d3-1a500ea57027\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 79,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"041bdd95-51b5-44f3-9eeb-87ab7476d2b9\",\n                    \"DisplayId\": \"AHA-Heart Failure-2018\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Depression assessment\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"1524efea-2052-4c79-b2e7-40e7f2a11a36\",\n                    \"ScheduledStartTime\": \"2022-07-16T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-16T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"1524efea-2052-4c79-b2e7-40e7f2a11a36\",\n                        \"UserTaskId\": \"041bdd95-51b5-44f3-9eeb-87ab7476d2b9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2018\",\n                        \"Title\": \"Depression assessment\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-16T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 74,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"0814662a-2c68-4572-918b-58db95e9acf1\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"cd872744-d3aa-4ee3-bd06-ee5fb8a18530\",\n                    \"ScheduledStartTime\": \"2022-06-28T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-28T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"cd872744-d3aa-4ee3-bd06-ee5fb8a18530\",\n                        \"UserTaskId\": \"0814662a-2c68-4572-918b-58db95e9acf1\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-28T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 56,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"0ce56f50-ccea-4d30-9a52-d49f6ba2938c\",\n                    \"DisplayId\": \"AHA-Heart Failure-10260\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Manage stress\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2b5a4354-774f-44b6-8054-1c0395e3c538\",\n                    \"ScheduledStartTime\": \"2022-07-16T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-16T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2b5a4354-774f-44b6-8054-1c0395e3c538\",\n                        \"UserTaskId\": \"0ce56f50-ccea-4d30-9a52-d49f6ba2938c\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10260\",\n                        \"Title\": \"Manage stress\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-16T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 74,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"0db9523d-b465-4f26-9f47-b715d4a5aa4d\",\n                    \"DisplayId\": \"AHA-Heart Failure-12009\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"What's next\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"9e7d083a-345b-495d-82d0-e2ea52982223\",\n                    \"ScheduledStartTime\": \"2022-07-21T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"9e7d083a-345b-495d-82d0-e2ea52982223\",\n                        \"UserTaskId\": \"0db9523d-b465-4f26-9f47-b715d4a5aa4d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12009\",\n                        \"Title\": \"What's next\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 79,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"0e8d808b-6d89-40d6-b9a6-ee63520e7dac\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"5693bbbf-f81a-4c11-8ada-116ae011f10e\",\n                    \"ScheduledStartTime\": \"2022-07-02T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-02T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"5693bbbf-f81a-4c11-8ada-116ae011f10e\",\n                        \"UserTaskId\": \"0e8d808b-6d89-40d6-b9a6-ee63520e7dac\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-02T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 60,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"0e9ffd03-22c8-4607-8211-39a11d70abfb\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"64179d00-eb09-4057-93ed-5e0d0eee7297\",\n                    \"ScheduledStartTime\": \"2022-06-21T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"64179d00-eb09-4057-93ed-5e0d0eee7297\",\n                        \"UserTaskId\": \"0e9ffd03-22c8-4607-8211-39a11d70abfb\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 49,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"0f9013ae-a94b-4539-9e27-a0b089f0aced\",\n                    \"DisplayId\": \"AHA-Heart Failure-15014\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Tips to lower stress infographic\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"4a94f98f-02cd-4a12-8000-a807b9828585\",\n                    \"ScheduledStartTime\": \"2022-07-15T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-15T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"4a94f98f-02cd-4a12-8000-a807b9828585\",\n                        \"UserTaskId\": \"0f9013ae-a94b-4539-9e27-a0b089f0aced\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15014\",\n                        \"Title\": \"Tips to lower stress infographic\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-15T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 73,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"128c1274-0e7f-41ef-859a-0e9b6d5643f3\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"0658d70c-5bc9-425b-a1d9-8af8c127684c\",\n                    \"ScheduledStartTime\": \"2022-07-14T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-14T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"0658d70c-5bc9-425b-a1d9-8af8c127684c\",\n                        \"UserTaskId\": \"128c1274-0e7f-41ef-859a-0e9b6d5643f3\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-14T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 72,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"1333d0fc-ac84-4d92-931b-8567fdc22c8c\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"63f6241e-f815-4823-80a8-1bebbb87f8af\",\n                    \"ScheduledStartTime\": \"2022-07-26T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"63f6241e-f815-4823-80a8-1bebbb87f8af\",\n                        \"UserTaskId\": \"1333d0fc-ac84-4d92-931b-8567fdc22c8c\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 84,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"1a356407-5596-4333-aa20-096f8db9fde9\",\n                    \"DisplayId\": \"AHA-Heart Failure-12007\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Fat intake\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"d90a0263-9d57-4f5d-bb1e-4fcc83be82f6\",\n                    \"ScheduledStartTime\": \"2022-06-30T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-30T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"d90a0263-9d57-4f5d-bb1e-4fcc83be82f6\",\n                        \"UserTaskId\": \"1a356407-5596-4333-aa20-096f8db9fde9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12007\",\n                        \"Title\": \"Fat intake\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-30T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 58,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"2151186f-02d9-4118-8f52-abec85afeac5\",\n                    \"DisplayId\": \"AHA-Heart Failure-2010\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Status check\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"05323589-e62a-4062-97d1-da1cf16b1d0d\",\n                    \"ScheduledStartTime\": \"2022-06-28T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-28T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"05323589-e62a-4062-97d1-da1cf16b1d0d\",\n                        \"UserTaskId\": \"2151186f-02d9-4118-8f52-abec85afeac5\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2010\",\n                        \"Title\": \"Status check\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-28T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 56,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"23d80029-82ca-4b60-b5eb-73d6c7b6f87d\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"237c8946-4369-44a7-9821-0e6b0ec5d1a0\",\n                    \"ScheduledStartTime\": \"2022-07-09T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"237c8946-4369-44a7-9821-0e6b0ec5d1a0\",\n                        \"UserTaskId\": \"23d80029-82ca-4b60-b5eb-73d6c7b6f87d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 67,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"246d6978-bf8e-4340-98c1-e6748219f2d6\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"53728afa-ba10-4f8f-9e82-0dd45b452efc\",\n                    \"ScheduledStartTime\": \"2022-06-09T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"53728afa-ba10-4f8f-9e82-0dd45b452efc\",\n                        \"UserTaskId\": \"246d6978-bf8e-4340-98c1-e6748219f2d6\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 37,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"25828b09-ca17-4b1b-ae04-2913bdaf2199\",\n                    \"DisplayId\": \"AHA-Heart Failure-10259\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Anxiety and depression\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"d6cc768b-42f3-4474-ab11-b0ff4508338a\",\n                    \"ScheduledStartTime\": \"2022-07-15T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-15T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"d6cc768b-42f3-4474-ab11-b0ff4508338a\",\n                        \"UserTaskId\": \"25828b09-ca17-4b1b-ae04-2913bdaf2199\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10259\",\n                        \"Title\": \"Anxiety and depression\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-15T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 73,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"2a5ccc03-c91d-44c8-8618-c6911c0de13a\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"93dde98b-7d08-4b9c-aca4-60b196aed7f8\",\n                    \"ScheduledStartTime\": \"2022-07-05T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-05T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"93dde98b-7d08-4b9c-aca4-60b196aed7f8\",\n                        \"UserTaskId\": \"2a5ccc03-c91d-44c8-8618-c6911c0de13a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-05T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 63,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"2b9077a5-8436-427f-9280-b846ed010157\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"e5f27fcb-78f6-4d53-ac75-e00c48692a52\",\n                    \"ScheduledStartTime\": \"2022-07-12T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"e5f27fcb-78f6-4d53-ac75-e00c48692a52\",\n                        \"UserTaskId\": \"2b9077a5-8436-427f-9280-b846ed010157\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 70,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"31639b57-ed27-4bb8-9de5-eb24f721cd8f\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"9bfa1536-b946-4825-a16e-59646b95c321\",\n                    \"ScheduledStartTime\": \"2022-06-30T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-30T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"9bfa1536-b946-4825-a16e-59646b95c321\",\n                        \"UserTaskId\": \"31639b57-ed27-4bb8-9de5-eb24f721cd8f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-30T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 58,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3855719f-6efa-4f1f-bb9a-d3bee481443a\",\n                    \"DisplayId\": \"AHA-Heart Failure-16355\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Week televisit\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"80678b91-53e7-43b0-8984-e328a5f80455\",\n                    \"ScheduledStartTime\": \"2022-06-09T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"80678b91-53e7-43b0-8984-e328a5f80455\",\n                        \"UserTaskId\": \"3855719f-6efa-4f1f-bb9a-d3bee481443a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16355\",\n                        \"Title\": \"Week televisit\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 37,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3a56a330-6b6c-4e1f-8647-87289192ed6e\",\n                    \"DisplayId\": \"AHA-Heart Failure-2011\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Life's Simple 7 assessment\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"cbd4f562-5bf8-4e8e-bcab-c663a77443ee\",\n                    \"ScheduledStartTime\": \"2022-07-23T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-23T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"cbd4f562-5bf8-4e8e-bcab-c663a77443ee\",\n                        \"UserTaskId\": \"3a56a330-6b6c-4e1f-8647-87289192ed6e\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2011\",\n                        \"Title\": \"Life's Simple 7 assessment\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-23T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 81,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3b44d017-8431-4d5c-a589-2a678abecefb\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"cb1b7d5c-f277-4739-8203-b5266e3a4674\",\n                    \"ScheduledStartTime\": \"2022-06-17T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-17T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"cb1b7d5c-f277-4739-8203-b5266e3a4674\",\n                        \"UserTaskId\": \"3b44d017-8431-4d5c-a589-2a678abecefb\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-17T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 45,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3ce67172-56dc-45d2-9be9-8cb3070e7ab5\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"f13d39f0-7a77-4a66-a6b6-eb2feb25dee4\",\n                    \"ScheduledStartTime\": \"2022-06-28T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-28T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"f13d39f0-7a77-4a66-a6b6-eb2feb25dee4\",\n                        \"UserTaskId\": \"3ce67172-56dc-45d2-9be9-8cb3070e7ab5\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-28T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 56,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"455da187-a325-4e49-a8c3-1be9ec1d3b04\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"78e739a1-9900-4944-9016-1ab977005449\",\n                    \"ScheduledStartTime\": \"2022-07-15T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-15T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"78e739a1-9900-4944-9016-1ab977005449\",\n                        \"UserTaskId\": \"455da187-a325-4e49-a8c3-1be9ec1d3b04\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-15T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 73,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"4998d09f-809b-4b1c-9d6b-0bb830179ca1\",\n                    \"DisplayId\": \"AHA-Heart Failure-10258\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Emergency stress stoppers\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"075f4248-56da-4b8d-a94a-657965ce3a28\",\n                    \"ScheduledStartTime\": \"2022-07-14T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-14T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"075f4248-56da-4b8d-a94a-657965ce3a28\",\n                        \"UserTaskId\": \"4998d09f-809b-4b1c-9d6b-0bb830179ca1\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10258\",\n                        \"Title\": \"Emergency stress stoppers\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-14T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 72,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"4dea0c62-7897-497f-a004-660ced6f87d7\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"c2112a30-5007-494a-a4d0-5053f7467566\",\n                    \"ScheduledStartTime\": \"2022-06-14T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-14T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"c2112a30-5007-494a-a4d0-5053f7467566\",\n                        \"UserTaskId\": \"4dea0c62-7897-497f-a004-660ced6f87d7\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-14T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 42,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"51971c1e-3585-47e4-b8ea-75082dbd27fd\",\n                    \"DisplayId\": \"AHA-Heart Failure-10298\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Color coding\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2aef7cc7-f0f5-4771-ac8d-c3672d920b51\",\n                    \"ScheduledStartTime\": \"2022-07-11T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-11T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2aef7cc7-f0f5-4771-ac8d-c3672d920b51\",\n                        \"UserTaskId\": \"51971c1e-3585-47e4-b8ea-75082dbd27fd\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10298\",\n                        \"Title\": \"Color coding\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-11T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 69,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"541717b7-cb9b-4d00-86fb-d758734e3475\",\n                    \"DisplayId\": \"AHA-Heart Failure-5007\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Anatomy of blood pressure\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Animation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"840db990-a119-4c9e-a409-fe9affb3ea46\",\n                    \"ScheduledStartTime\": \"2022-06-20T01:30:04.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"840db990-a119-4c9e-a409-fe9affb3ea46\",\n                        \"UserTaskId\": \"541717b7-cb9b-4d00-86fb-d758734e3475\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Animation\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"5007\",\n                        \"Title\": \"Anatomy of blood pressure\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 5,\n                        \"Frequency\": 48,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"5f3c6133-c7bc-4d13-9d87-a1a36aaaeb0f\",\n                    \"DisplayId\": \"AHA-Heart Failure-3007\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Diabetes\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Link\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"28109863-fd16-42a3-ada9-a780288cc68f\",\n                    \"ScheduledStartTime\": \"2022-06-29T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-29T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"28109863-fd16-42a3-ada9-a780288cc68f\",\n                        \"UserTaskId\": \"5f3c6133-c7bc-4d13-9d87-a1a36aaaeb0f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Link\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"3007\",\n                        \"Title\": \"Diabetes\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-29T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 57,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"6025a863-5757-46f2-a82b-9fc0c8f67ebc\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"824be3d7-2fbc-4b1e-a552-4a70b713e593\",\n                    \"ScheduledStartTime\": \"2022-06-23T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-23T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"824be3d7-2fbc-4b1e-a552-4a70b713e593\",\n                        \"UserTaskId\": \"6025a863-5757-46f2-a82b-9fc0c8f67ebc\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-23T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 51,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"6498b7ac-a356-4d11-bfd1-9cb029a96725\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"49392208-c014-4d32-9a61-a5d813f6bd6e\",\n                    \"ScheduledStartTime\": \"2022-07-19T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"49392208-c014-4d32-9a61-a5d813f6bd6e\",\n                        \"UserTaskId\": \"6498b7ac-a356-4d11-bfd1-9cb029a96725\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 77,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"6572c35f-7d98-4d33-8d3f-35a58f354d8f\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2f2627d8-1b5e-48de-9998-82bde4a0c208\",\n                    \"ScheduledStartTime\": \"2022-06-13T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-13T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2f2627d8-1b5e-48de-9998-82bde4a0c208\",\n                        \"UserTaskId\": \"6572c35f-7d98-4d33-8d3f-35a58f354d8f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-13T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 41,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"70c80abd-df04-4703-b232-4608f5f8ca58\",\n                    \"DisplayId\": \"AHA-Heart Failure-15041\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Hold the salt\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"b88f10d3-a56c-450d-b53c-c95bb3ee5e7f\",\n                    \"ScheduledStartTime\": \"2022-06-20T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"b88f10d3-a56c-450d-b53c-c95bb3ee5e7f\",\n                        \"UserTaskId\": \"70c80abd-df04-4703-b232-4608f5f8ca58\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15041\",\n                        \"Title\": \"Hold the salt\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 48,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"7409c079-07ef-4a36-9da4-998f3061023c\",\n                    \"DisplayId\": \"AHA-Heart Failure-16193\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Connection\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"c09f7a71-c193-4268-952d-7cbdba3159ef\",\n                    \"ScheduledStartTime\": \"2022-06-23T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-23T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"c09f7a71-c193-4268-952d-7cbdba3159ef\",\n                        \"UserTaskId\": \"7409c079-07ef-4a36-9da4-998f3061023c\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"16193\",\n                        \"Title\": \"Connection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-23T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 51,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"75d36951-e869-4799-8ef0-554d8cbe3ef8\",\n                    \"DisplayId\": \"AHA-Heart Failure-10297\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Side effects\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"7b2bf272-f3d6-48b7-849c-d59b02de5f89\",\n                    \"ScheduledStartTime\": \"2022-07-10T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-10T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"7b2bf272-f3d6-48b7-849c-d59b02de5f89\",\n                        \"UserTaskId\": \"75d36951-e869-4799-8ef0-554d8cbe3ef8\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10297\",\n                        \"Title\": \"Side effects\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-10T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 68,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"76490bcb-9f96-497f-b62a-de8077ff481f\",\n                    \"DisplayId\": \"AHA-Heart Failure-12005\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Sodium intake\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"668787c7-5fca-46e2-9978-5f2884216211\",\n                    \"ScheduledStartTime\": \"2022-06-09T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"668787c7-5fca-46e2-9978-5f2884216211\",\n                        \"UserTaskId\": \"76490bcb-9f96-497f-b62a-de8077ff481f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12005\",\n                        \"Title\": \"Sodium intake\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 37,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"767358e6-fa0c-4bf2-92d5-fefa53845c70\",\n                    \"DisplayId\": \"AHA-Heart Failure-10008\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Congratulations\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"9afc92bb-bc55-43e8-95fd-4757d838af8e\",\n                    \"ScheduledStartTime\": \"2022-07-26T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"9afc92bb-bc55-43e8-95fd-4757d838af8e\",\n                        \"UserTaskId\": \"767358e6-fa0c-4bf2-92d5-fefa53845c70\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10008\",\n                        \"Title\": \"Congratulations\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 84,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"77dabd90-2daf-4d69-8412-022078063c07\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"a50750ce-97a2-4493-bd05-838672ad283e\",\n                    \"ScheduledStartTime\": \"2022-06-11T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-11T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"a50750ce-97a2-4493-bd05-838672ad283e\",\n                        \"UserTaskId\": \"77dabd90-2daf-4d69-8412-022078063c07\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-11T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 39,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"7c37e40f-3e09-4ff3-b6a1-ce11d18b3f41\",\n                    \"DisplayId\": \"AHA-Heart Failure-1009\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Medications\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"3d351a42-2990-4390-91ed-c8b6de54e231\",\n                    \"ScheduledStartTime\": \"2022-07-06T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-06T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"3d351a42-2990-4390-91ed-c8b6de54e231\",\n                        \"UserTaskId\": \"7c37e40f-3e09-4ff3-b6a1-ce11d18b3f41\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1009\",\n                        \"Title\": \"Medications\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-06T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 64,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"7dc22f34-0274-4136-9fd4-3f3a4c3b9e88\",\n                    \"DisplayId\": \"AHA-Heart Failure-2005\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Lifestyle assessment\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"76da438b-4fc4-4b3e-bd94-166098c6d4cf\",\n                    \"ScheduledStartTime\": \"2022-07-23T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-23T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"76da438b-4fc4-4b3e-bd94-166098c6d4cf\",\n                        \"UserTaskId\": \"7dc22f34-0274-4136-9fd4-3f3a4c3b9e88\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2005\",\n                        \"Title\": \"Lifestyle assessment\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-23T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 81,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"80584824-89f2-43bc-9c53-06e8ddd96a0d\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"3b0083a8-150d-42d6-98f7-934f1392a0c7\",\n                    \"ScheduledStartTime\": \"2022-07-07T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"3b0083a8-150d-42d6-98f7-934f1392a0c7\",\n                        \"UserTaskId\": \"80584824-89f2-43bc-9c53-06e8ddd96a0d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 65,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"8361f190-3513-4571-b693-e5c118d983ba\",\n                    \"DisplayId\": \"AHA-Heart Failure-1010\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Support\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"43c55376-bc5e-4642-aabe-859e113434c5\",\n                    \"ScheduledStartTime\": \"2022-07-13T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-13T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"43c55376-bc5e-4642-aabe-859e113434c5\",\n                        \"UserTaskId\": \"8361f190-3513-4571-b693-e5c118d983ba\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1010\",\n                        \"Title\": \"Support\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-13T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 71,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"8385d760-377f-4a92-8a43-68b06828b74e\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"d6bfaac2-d8f7-41a6-b268-f72866650441\",\n                    \"ScheduledStartTime\": \"2022-06-19T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"d6bfaac2-d8f7-41a6-b268-f72866650441\",\n                        \"UserTaskId\": \"8385d760-377f-4a92-8a43-68b06828b74e\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 47,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"94dd6d88-1190-4996-bfac-95faa8d24fcb\",\n                    \"DisplayId\": \"AHA-Heart Failure-12006\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"What's working\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"524272fd-96ec-4659-8ee2-7fd1c33df1bd\",\n                    \"ScheduledStartTime\": \"2022-06-16T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-16T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"524272fd-96ec-4659-8ee2-7fd1c33df1bd\",\n                        \"UserTaskId\": \"94dd6d88-1190-4996-bfac-95faa8d24fcb\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12006\",\n                        \"Title\": \"What's working\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-16T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 44,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"97e80564-67d5-4d4e-aff8-1ef7b9516eed\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"51d5575e-9fb7-4c54-ba45-81f92ff2241c\",\n                    \"ScheduledStartTime\": \"2022-06-30T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-30T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"51d5575e-9fb7-4c54-ba45-81f92ff2241c\",\n                        \"UserTaskId\": \"97e80564-67d5-4d4e-aff8-1ef7b9516eed\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-30T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 58,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"989b480a-06f4-466b-8d27-9a27b1fb962a\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"42d97e0a-92a2-462d-9b44-445f88581080\",\n                    \"ScheduledStartTime\": \"2022-06-24T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-24T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"42d97e0a-92a2-462d-9b44-445f88581080\",\n                        \"UserTaskId\": \"989b480a-06f4-466b-8d27-9a27b1fb962a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-24T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 52,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"9f094915-179d-4764-86cc-95039c6d52d8\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"872dffeb-138a-44e8-93a2-f2c72eddc9be\",\n                    \"ScheduledStartTime\": \"2022-07-26T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"872dffeb-138a-44e8-93a2-f2c72eddc9be\",\n                        \"UserTaskId\": \"9f094915-179d-4764-86cc-95039c6d52d8\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 84,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"9f8324e1-8736-4b5b-a90d-094295b3ab80\",\n                    \"DisplayId\": \"AHA-Heart Failure-10266\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Laughter\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"1a564406-8011-41c3-b464-6817cab19b3a\",\n                    \"ScheduledStartTime\": \"2022-07-22T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-22T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"1a564406-8011-41c3-b464-6817cab19b3a\",\n                        \"UserTaskId\": \"9f8324e1-8736-4b5b-a90d-094295b3ab80\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10266\",\n                        \"Title\": \"Laughter\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-22T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 80,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a56954d8-6357-45aa-b6b7-20a35fc89aba\",\n                    \"DisplayId\": \"AHA-Heart Failure-10099\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Cholesterol\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"7d3fd7ab-9871-4ddb-82ef-aab57b86b391\",\n                    \"ScheduledStartTime\": \"2022-06-25T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-25T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"7d3fd7ab-9871-4ddb-82ef-aab57b86b391\",\n                        \"UserTaskId\": \"a56954d8-6357-45aa-b6b7-20a35fc89aba\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10099\",\n                        \"Title\": \"Cholesterol\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-25T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 53,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a580e6a3-7269-479d-b3c3-c3197037d7b4\",\n                    \"DisplayId\": \"AHA-Heart Failure-10295\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"OTC meds\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"93b43df5-e22f-43ae-aa73-1905ad7a8189\",\n                    \"ScheduledStartTime\": \"2022-07-08T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-08T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"93b43df5-e22f-43ae-aa73-1905ad7a8189\",\n                        \"UserTaskId\": \"a580e6a3-7269-479d-b3c3-c3197037d7b4\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10295\",\n                        \"Title\": \"OTC meds\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-08T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 66,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a8fa8de7-9cf6-4b84-9799-53700deb0fcc\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"ee7aa4e3-8482-41d4-a291-8c2c892cc7ba\",\n                    \"ScheduledStartTime\": \"2022-07-19T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"ee7aa4e3-8482-41d4-a291-8c2c892cc7ba\",\n                        \"UserTaskId\": \"a8fa8de7-9cf6-4b84-9799-53700deb0fcc\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 77,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a9194bd2-3b21-40c7-9e75-7dbce6d438ef\",\n                    \"DisplayId\": \"AHA-Heart Failure-15017\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Mindful eating\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"e1192c99-2314-49f8-84a7-a84d70417149\",\n                    \"ScheduledStartTime\": \"2022-07-18T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-18T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"e1192c99-2314-49f8-84a7-a84d70417149\",\n                        \"UserTaskId\": \"a9194bd2-3b21-40c7-9e75-7dbce6d438ef\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15017\",\n                        \"Title\": \"Mindful eating\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-18T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 76,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ab588b7d-9319-4072-82bc-cda11fdc76c6\",\n                    \"DisplayId\": \"AHA-Heart Failure-5009\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Blood pressure test\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Animation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"e80daf7b-c064-4153-91b2-785782d0cd0d\",\n                    \"ScheduledStartTime\": \"2022-06-20T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"e80daf7b-c064-4153-91b2-785782d0cd0d\",\n                        \"UserTaskId\": \"ab588b7d-9319-4072-82bc-cda11fdc76c6\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Animation\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"5009\",\n                        \"Title\": \"Blood pressure test\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 48,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ac79173c-6302-4b87-a864-a1a2e0fd70ea\",\n                    \"DisplayId\": \"AHA-Heart Failure-10263\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Physical activity and tension\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"47b50d1d-451b-4d34-8087-ed917998b2f5\",\n                    \"ScheduledStartTime\": \"2022-07-19T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"47b50d1d-451b-4d34-8087-ed917998b2f5\",\n                        \"UserTaskId\": \"ac79173c-6302-4b87-a864-a1a2e0fd70ea\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10263\",\n                        \"Title\": \"Physical activity and tension\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 77,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b33f09b7-38db-49b3-9ccd-2220ed586549\",\n                    \"DisplayId\": \"AHA-Heart Failure-1006\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Blood Pressure\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"616c7396-be88-447e-a833-31fd6f526933\",\n                    \"ScheduledStartTime\": \"2022-06-15T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-15T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"616c7396-be88-447e-a833-31fd6f526933\",\n                        \"UserTaskId\": \"b33f09b7-38db-49b3-9ccd-2220ed586549\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1006\",\n                        \"Title\": \"Blood Pressure\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-15T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 43,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b5095e7b-4299-4c54-a769-7c3ed7e45732\",\n                    \"DisplayId\": \"AHA-Heart Failure-10293\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Control your medications\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"3cd150b4-6de3-439a-8017-e89a5e5ed751\",\n                    \"ScheduledStartTime\": \"2022-07-06T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-06T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"3cd150b4-6de3-439a-8017-e89a5e5ed751\",\n                        \"UserTaskId\": \"b5095e7b-4299-4c54-a769-7c3ed7e45732\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10293\",\n                        \"Title\": \"Control your medications\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-06T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 64,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b57ec579-7fb5-48bf-8460-47bb5775932a\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"fd67b273-de9b-4346-bdc6-6675046afbc1\",\n                    \"ScheduledStartTime\": \"2022-06-21T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"fd67b273-de9b-4346-bdc6-6675046afbc1\",\n                        \"UserTaskId\": \"b57ec579-7fb5-48bf-8460-47bb5775932a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 49,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b9a55e17-73be-46d3-a61e-9389c53acb03\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"df71c850-3bd4-4a52-b3b1-68ec75ca8542\",\n                    \"ScheduledStartTime\": \"2022-06-16T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-16T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"df71c850-3bd4-4a52-b3b1-68ec75ca8542\",\n                        \"UserTaskId\": \"b9a55e17-73be-46d3-a61e-9389c53acb03\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-16T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 44,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b9ac0fb6-02e0-44a8-8872-293e8876771b\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"23b6f5e7-f671-4f83-ad7f-5a7272455294\",\n                    \"ScheduledStartTime\": \"2022-06-09T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"23b6f5e7-f671-4f83-ad7f-5a7272455294\",\n                        \"UserTaskId\": \"b9ac0fb6-02e0-44a8-8872-293e8876771b\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 37,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"bf673064-eaf6-4f4c-ada9-fbc804af212a\",\n                    \"DisplayId\": \"AHA-Heart Failure-3003\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"To stress or not to stress\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Link\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"cd1da11a-6104-491b-9035-ccda2d147cf9\",\n                    \"ScheduledStartTime\": \"2022-07-13T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-13T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"cd1da11a-6104-491b-9035-ccda2d147cf9\",\n                        \"UserTaskId\": \"bf673064-eaf6-4f4c-ada9-fbc804af212a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Link\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"3003\",\n                        \"Title\": \"To stress or not to stress\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-13T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 71,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"c326c175-97c7-4b48-97de-9e7e3bed4edc\",\n                    \"DisplayId\": \"AHA-Heart Failure-1008\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Glucose\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"1e380e62-b78d-4d0a-b5b5-e96d9c20942d\",\n                    \"ScheduledStartTime\": \"2022-06-29T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-29T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"1e380e62-b78d-4d0a-b5b5-e96d9c20942d\",\n                        \"UserTaskId\": \"c326c175-97c7-4b48-97de-9e7e3bed4edc\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1008\",\n                        \"Title\": \"Glucose\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-29T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 57,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"c3304eca-c19c-4bca-a461-1ab863937833\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"00126f44-e634-4cc8-8811-bfeab1c8a8bc\",\n                    \"ScheduledStartTime\": \"2022-07-12T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"00126f44-e634-4cc8-8811-bfeab1c8a8bc\",\n                        \"UserTaskId\": \"c3304eca-c19c-4bca-a461-1ab863937833\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 70,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"c7a8deea-876e-460e-9011-de6edad91f04\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"af577a20-85ca-4141-ad59-e835dac1902e\",\n                    \"ScheduledStartTime\": \"2022-07-22T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-22T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"af577a20-85ca-4141-ad59-e835dac1902e\",\n                        \"UserTaskId\": \"c7a8deea-876e-460e-9011-de6edad91f04\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-22T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 80,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"cd2ed5da-be74-4b05-baf2-5cbe5a709d80\",\n                    \"DisplayId\": \"AHA-Heart Failure-5008\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Blood pressure and the cardiovascular system\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Animation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"514f139a-3a75-4e23-9bed-8fcf62731327\",\n                    \"ScheduledStartTime\": \"2022-06-20T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"514f139a-3a75-4e23-9bed-8fcf62731327\",\n                        \"UserTaskId\": \"cd2ed5da-be74-4b05-baf2-5cbe5a709d80\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Animation\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"5008\",\n                        \"Title\": \"Blood pressure and the cardiovascular system\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 48,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d0395473-c418-48e9-8e2e-ece4b53700d9\",\n                    \"DisplayId\": \"AHA-Heart Failure-10257\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Stress\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"db201f46-a2c2-4020-a2d7-b6cfe967b7da\",\n                    \"ScheduledStartTime\": \"2022-07-13T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-13T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"db201f46-a2c2-4020-a2d7-b6cfe967b7da\",\n                        \"UserTaskId\": \"d0395473-c418-48e9-8e2e-ece4b53700d9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10257\",\n                        \"Title\": \"Stress\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-13T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 71,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d0939354-0c5a-40ff-b42d-6b22daec4d03\",\n                    \"DisplayId\": \"AHA-Heart Failure-2010\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Status check\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"351bfb07-d2df-40c3-9fbc-36b271dc1d94\",\n                    \"ScheduledStartTime\": \"2022-07-23T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-23T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"351bfb07-d2df-40c3-9fbc-36b271dc1d94\",\n                        \"UserTaskId\": \"d0939354-0c5a-40ff-b42d-6b22daec4d03\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2010\",\n                        \"Title\": \"Status check\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-23T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 81,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d1244efd-77a9-4292-a287-e4c72fedf213\",\n                    \"DisplayId\": \"AHA-Heart Failure-10294\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Medications\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"ff6f54c5-6350-449b-ba1c-b74556e5e7de\",\n                    \"ScheduledStartTime\": \"2022-07-07T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"ff6f54c5-6350-449b-ba1c-b74556e5e7de\",\n                        \"UserTaskId\": \"d1244efd-77a9-4292-a287-e4c72fedf213\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10294\",\n                        \"Title\": \"Medications\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 65,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d14ad356-ae80-4cb8-97ea-753b349837bd\",\n                    \"DisplayId\": \"AHA-Heart Failure-5006\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Blood pressure\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Animation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"bb906b9b-2178-4798-bfa5-5f51e838e151\",\n                    \"ScheduledStartTime\": \"2022-06-20T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"bb906b9b-2178-4798-bfa5-5f51e838e151\",\n                        \"UserTaskId\": \"d14ad356-ae80-4cb8-97ea-753b349837bd\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Animation\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"5006\",\n                        \"Title\": \"Blood pressure\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 48,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d220f86c-a6f0-45ed-9533-38291d467522\",\n                    \"DisplayId\": \"AHA-Heart Failure-10296\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Reading labels\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"3b9d20d3-b46d-4283-a8d4-21999ca11fed\",\n                    \"ScheduledStartTime\": \"2022-07-09T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"3b9d20d3-b46d-4283-a8d4-21999ca11fed\",\n                        \"UserTaskId\": \"d220f86c-a6f0-45ed-9533-38291d467522\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10296\",\n                        \"Title\": \"Reading labels\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 67,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d2be1ede-0ced-4918-99a9-995d06c742c1\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"3197f264-d0c1-401a-97cb-513f63e82684\",\n                    \"ScheduledStartTime\": \"2022-06-14T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-14T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"3197f264-d0c1-401a-97cb-513f63e82684\",\n                        \"UserTaskId\": \"d2be1ede-0ced-4918-99a9-995d06c742c1\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-14T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 42,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d412e861-6829-4b8a-83a1-6b946f80bf22\",\n                    \"DisplayId\": \"AHA-Heart Failure-16355\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Week televisit\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"458d8256-3423-4f42-b9db-dc25b16dc36c\",\n                    \"ScheduledStartTime\": \"2022-07-21T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"458d8256-3423-4f42-b9db-dc25b16dc36c\",\n                        \"UserTaskId\": \"d412e861-6829-4b8a-83a1-6b946f80bf22\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16355\",\n                        \"Title\": \"Week televisit\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 79,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d4b4060d-1016-4d83-abc4-c8344734eafe\",\n                    \"DisplayId\": \"AHA-Heart Failure-16249\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Qyalify of Life end\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"e04b5d37-6816-43d0-999c-f2a588aaf554\",\n                    \"ScheduledStartTime\": \"2022-07-26T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"e04b5d37-6816-43d0-999c-f2a588aaf554\",\n                        \"UserTaskId\": \"d4b4060d-1016-4d83-abc4-c8344734eafe\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16249\",\n                        \"Title\": \"Qyalify of Life end\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 84,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d75a9996-ce4a-4845-bbd5-6811afd7be77\",\n                    \"DisplayId\": \"AHA-Heart Failure-12008\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Carbohydrate intake\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"d5fc377d-e75f-4e0b-a8c9-3a7dd2d02f06\",\n                    \"ScheduledStartTime\": \"2022-07-07T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"d5fc377d-e75f-4e0b-a8c9-3a7dd2d02f06\",\n                        \"UserTaskId\": \"d75a9996-ce4a-4845-bbd5-6811afd7be77\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12008\",\n                        \"Title\": \"Carbohydrate intake\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 65,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d7b72486-1e03-4725-97c0-8d5c4cd631c9\",\n                    \"DisplayId\": \"AHA-Heart Failure-3005\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Blood pressure\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Link\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"aa98eacc-0118-4cb0-bc59-ababc684a66f\",\n                    \"ScheduledStartTime\": \"2022-06-15T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-15T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"aa98eacc-0118-4cb0-bc59-ababc684a66f\",\n                        \"UserTaskId\": \"d7b72486-1e03-4725-97c0-8d5c4cd631c9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Link\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"3005\",\n                        \"Title\": \"Blood pressure\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-15T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 43,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"e61246e6-96de-4e7d-a4e3-fcd2be36c310\",\n                    \"DisplayId\": \"AHA-Heart Failure-3006\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Managing your cholesterol\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Link\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"9e7e0992-0b9d-45c7-b580-cdb66fcaeb3c\",\n                    \"ScheduledStartTime\": \"2022-06-22T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-22T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"9e7e0992-0b9d-45c7-b580-cdb66fcaeb3c\",\n                        \"UserTaskId\": \"e61246e6-96de-4e7d-a4e3-fcd2be36c310\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Link\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"3006\",\n                        \"Title\": \"Managing your cholesterol\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-22T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 50,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"e74fa432-075e-4f03-831a-4c5bd8b80250\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"327a4f06-9f2a-46c7-9262-d0f53f501fa5\",\n                    \"ScheduledStartTime\": \"2022-06-26T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"327a4f06-9f2a-46c7-9262-d0f53f501fa5\",\n                        \"UserTaskId\": \"e74fa432-075e-4f03-831a-4c5bd8b80250\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 54,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"edfe1684-0df6-43ea-89ba-5e469764869c\",\n                    \"DisplayId\": \"AHA-Heart Failure-15040\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Effects of excess sodium\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"6b27eeed-7194-4a61-984f-86e3e5cc4d3f\",\n                    \"ScheduledStartTime\": \"2022-06-19T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"6b27eeed-7194-4a61-984f-86e3e5cc4d3f\",\n                        \"UserTaskId\": \"edfe1684-0df6-43ea-89ba-5e469764869c\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15040\",\n                        \"Title\": \"Effects of excess sodium\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 47,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ef904ab2-bb1d-4f6e-a9df-82fe1a06a2b7\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"93327a8c-264b-409a-a3a1-5b1f5209bb5d\",\n                    \"ScheduledStartTime\": \"2022-07-05T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-05T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"93327a8c-264b-409a-a3a1-5b1f5209bb5d\",\n                        \"UserTaskId\": \"ef904ab2-bb1d-4f6e-a9df-82fe1a06a2b7\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-05T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 63,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ef98627e-5544-4aa7-b6a0-0260f329dc5a\",\n                    \"DisplayId\": \"AHA-Heart Failure-15049\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Life is sweet\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"f250c7b7-a740-4a73-b64c-ff66bc520cf3\",\n                    \"ScheduledStartTime\": \"2022-07-01T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-01T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"f250c7b7-a740-4a73-b64c-ff66bc520cf3\",\n                        \"UserTaskId\": \"ef98627e-5544-4aa7-b6a0-0260f329dc5a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15049\",\n                        \"Title\": \"Life is sweet\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-01T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 59,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"efebf8c5-05a5-4279-aea9-623d9b1c3070\",\n                    \"DisplayId\": \"AHA-Heart Failure-1007\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Cholesterol\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"a823c75b-b9e2-4397-aaa3-b83ee0ba22d4\",\n                    \"ScheduledStartTime\": \"2022-06-22T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-22T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"a823c75b-b9e2-4397-aaa3-b83ee0ba22d4\",\n                        \"UserTaskId\": \"efebf8c5-05a5-4279-aea9-623d9b1c3070\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1007\",\n                        \"Title\": \"Cholesterol\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-22T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 50,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"f1d782e3-fd57-4f3f-a8cc-2b4ce510af97\",\n                    \"DisplayId\": \"AHA-Heart Failure-1011\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"What's Next\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"970d6ebc-b821-42b0-a56a-d7068224ef39\",\n                    \"ScheduledStartTime\": \"2022-07-20T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-07-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"970d6ebc-b821-42b0-a56a-d7068224ef39\",\n                        \"UserTaskId\": \"f1d782e3-fd57-4f3f-a8cc-2b4ce510af97\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1011\",\n                        \"Title\": \"What's Next\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-07-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 78,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"fff3e6ce-16c7-49fc-ac9b-561bdbd9f9d1\",\n                    \"DisplayId\": \"AHA-Heart Failure-10213\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Glucose 2\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"4fdc06f3-86ba-4eca-aea5-2651f8d72a85\",\n                    \"ScheduledStartTime\": \"2022-06-30T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-30T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"4fdc06f3-86ba-4eca-aea5-2651f8d72a85\",\n                        \"UserTaskId\": \"fff3e6ce-16c7-49fc-ac9b-561bdbd9f9d1\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10213\",\n                        \"Title\": \"Glucose 2\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-30T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 58,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"000212de-e628-47b2-9819-7667be3b6fb1\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"e4b1e5e0-937c-4158-a743-5f76e62c11e1\",\n                    \"ScheduledStartTime\": \"2022-05-24T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-24T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"e4b1e5e0-937c-4158-a743-5f76e62c11e1\",\n                        \"UserTaskId\": \"000212de-e628-47b2-9819-7667be3b6fb1\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-24T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 21,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"05815e3d-435b-4e11-b175-6e851f8c7338\",\n                    \"DisplayId\": \"AHA-Heart Failure-12003\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Eating habit\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"4b95ba33-393e-4018-999b-e0183c7ce9e0\",\n                    \"ScheduledStartTime\": \"2022-05-26T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"4b95ba33-393e-4018-999b-e0183c7ce9e0\",\n                        \"UserTaskId\": \"05815e3d-435b-4e11-b175-6e851f8c7338\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12003\",\n                        \"Title\": \"Eating habit\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 23,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"08be338a-182d-4731-97df-b8e07d4f351f\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"6447a5d4-534a-4067-8cad-c20581d4b6cb\",\n                    \"ScheduledStartTime\": \"2022-05-23T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-23T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"6447a5d4-534a-4067-8cad-c20581d4b6cb\",\n                        \"UserTaskId\": \"08be338a-182d-4731-97df-b8e07d4f351f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-23T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 20,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"09864b30-c906-4174-aca7-36c02ab19743\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"363a8142-e62e-49ae-a390-986ebf8a11ed\",\n                    \"ScheduledStartTime\": \"2022-05-17T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-17T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"363a8142-e62e-49ae-a390-986ebf8a11ed\",\n                        \"UserTaskId\": \"09864b30-c906-4174-aca7-36c02ab19743\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-17T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 14,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"0fbd96b1-d77a-4049-a00a-d10d29c60edb\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"31557ac6-f088-42b6-9282-8e8777b47cfd\",\n                    \"ScheduledStartTime\": \"2022-05-24T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-24T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"31557ac6-f088-42b6-9282-8e8777b47cfd\",\n                        \"UserTaskId\": \"0fbd96b1-d77a-4049-a00a-d10d29c60edb\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-24T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 21,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"19b5293c-cdab-4926-9a59-24a8e3cae2d0\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"64a1259c-62dd-42db-9f64-3eb3dad1c141\",\n                    \"ScheduledStartTime\": \"2022-05-15T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-15T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"64a1259c-62dd-42db-9f64-3eb3dad1c141\",\n                        \"UserTaskId\": \"19b5293c-cdab-4926-9a59-24a8e3cae2d0\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-15T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 12,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"1c02edc2-dee6-44a0-872a-15c5d0f1a512\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"04ae7bdb-cf27-492e-8492-9eee7d5552ac\",\n                    \"ScheduledStartTime\": \"2022-05-12T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"04ae7bdb-cf27-492e-8492-9eee7d5552ac\",\n                        \"UserTaskId\": \"1c02edc2-dee6-44a0-872a-15c5d0f1a512\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 9,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"1c20c96c-9d9d-4003-bec8-be5744d0da87\",\n                    \"DisplayId\": \"AHA-Heart Failure-9999\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Main Goal\",\n                    \"Description\": null,\n                    \"Category\": \"Goal\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"cd1503bd-b394-4a99-9bb6-372c11c51bef\",\n                    \"ScheduledStartTime\": \"2022-05-11T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-11T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"cd1503bd-b394-4a99-9bb6-372c11c51bef\",\n                        \"UserTaskId\": \"1c20c96c-9d9d-4003-bec8-be5744d0da87\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Goal\",\n                        \"Category\": \"Goal\",\n                        \"ProviderActionId\": \"9999\",\n                        \"Title\": \"Main Goal\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-11T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 8,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"229aa63e-a7db-4809-afb8-81da6fbc3b96\",\n                    \"DisplayId\": \"AHA-Heart Failure-10108\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Healthy diet\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"963a5c0d-8b16-4ccc-8b29-ee91ba1681ec\",\n                    \"ScheduledStartTime\": \"2022-05-26T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"963a5c0d-8b16-4ccc-8b29-ee91ba1681ec\",\n                        \"UserTaskId\": \"229aa63e-a7db-4809-afb8-81da6fbc3b96\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10108\",\n                        \"Title\": \"Healthy diet\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 23,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"26be707f-e99f-4fb3-b87b-dc17b40ac2ab\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"6e026d55-42a8-442c-b24a-bc36c7679c93\",\n                    \"ScheduledStartTime\": \"2022-05-18T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-18T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"6e026d55-42a8-442c-b24a-bc36c7679c93\",\n                        \"UserTaskId\": \"26be707f-e99f-4fb3-b87b-dc17b40ac2ab\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-18T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 15,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"29063358-cb99-4d38-b558-aa59310cf587\",\n                    \"DisplayId\": \"AHA-Heart Failure-10182\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Too much fat\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"8fac9875-ba5b-4314-af75-687ba60f64fe\",\n                    \"ScheduledStartTime\": \"2022-06-03T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-03T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"8fac9875-ba5b-4314-af75-687ba60f64fe\",\n                        \"UserTaskId\": \"29063358-cb99-4d38-b558-aa59310cf587\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10182\",\n                        \"Title\": \"Too much fat\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-03T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 31,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"298f1077-d9ca-4e17-af0a-366a01d97144\",\n                    \"DisplayId\": \"AHA-Heart Failure-2017\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Lifestyle - Nutrition assessment\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"c6faca49-77cc-4b5e-8b35-edd37fe8fb42\",\n                    \"ScheduledStartTime\": \"2022-05-28T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-28T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"c6faca49-77cc-4b5e-8b35-edd37fe8fb42\",\n                        \"UserTaskId\": \"298f1077-d9ca-4e17-af0a-366a01d97144\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2017\",\n                        \"Title\": \"Lifestyle - Nutrition assessment\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-28T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 25,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"2b42da60-696a-44b6-920f-eb7f7f9a28cc\",\n                    \"DisplayId\": \"AHA-Heart Failure-1002\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Physical Acitivity\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"adbcae0c-d383-438f-b52e-1d982f20fa61\",\n                    \"ScheduledStartTime\": \"2022-05-18T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-18T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"adbcae0c-d383-438f-b52e-1d982f20fa61\",\n                        \"UserTaskId\": \"2b42da60-696a-44b6-920f-eb7f7f9a28cc\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1002\",\n                        \"Title\": \"Physical Acitivity\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-18T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 15,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"2c73af38-9189-410f-869a-d08a2650e749\",\n                    \"DisplayId\": \"AHA-Heart Failure-10186\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Overweight 2\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"7de3a342-dbac-4369-b532-4ed8f07add63\",\n                    \"ScheduledStartTime\": \"2022-06-07T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"7de3a342-dbac-4369-b532-4ed8f07add63\",\n                        \"UserTaskId\": \"2c73af38-9189-410f-869a-d08a2650e749\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10186\",\n                        \"Title\": \"Overweight 2\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 35,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"32bbeaca-efe5-494e-af97-760b6a914491\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"f155b249-dcb0-486f-9f0b-058ed7032109\",\n                    \"ScheduledStartTime\": \"2022-06-04T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-04T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"f155b249-dcb0-486f-9f0b-058ed7032109\",\n                        \"UserTaskId\": \"32bbeaca-efe5-494e-af97-760b6a914491\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-04T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 32,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"353d6fa5-a161-4db1-9bf0-a9ee34f18743\",\n                    \"DisplayId\": \"AHA-Heart Failure-10113\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Heart healthy diet\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"4e89b8b2-6c68-44f8-8b79-c105508dfd42\",\n                    \"ScheduledStartTime\": \"2022-05-31T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-31T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"4e89b8b2-6c68-44f8-8b79-c105508dfd42\",\n                        \"UserTaskId\": \"353d6fa5-a161-4db1-9bf0-a9ee34f18743\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10113\",\n                        \"Title\": \"Heart healthy diet\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-31T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 28,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"35689d4c-bea5-49b3-a960-b8722d3886d2\",\n                    \"DisplayId\": \"AHA-Heart Failure-10000\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Welcome\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"c5ab0bc2-9ac8-4b81-a41e-a5b819721f97\",\n                    \"ScheduledStartTime\": \"2022-05-04T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-04T17:30:00.000Z\",\n                    \"Status\": \"Delayed\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"c5ab0bc2-9ac8-4b81-a41e-a5b819721f97\",\n                        \"UserTaskId\": \"35689d4c-bea5-49b3-a960-b8722d3886d2\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10000\",\n                        \"Title\": \"Welcome\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-04T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 1,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3610c9f6-116c-45ca-b8b6-8990cd2ea119\",\n                    \"DisplayId\": \"AHA-Heart Failure-10057\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Heart is a muscle\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"7b44c2d2-bad8-40a5-a087-ecf68dfa0a4b\",\n                    \"ScheduledStartTime\": \"2022-05-20T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"7b44c2d2-bad8-40a5-a087-ecf68dfa0a4b\",\n                        \"UserTaskId\": \"3610c9f6-116c-45ca-b8b6-8990cd2ea119\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10057\",\n                        \"Title\": \"Heart is a muscle\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 17,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3921aa2f-7569-4670-a2b3-0b8edf4c178a\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"4b26f1d7-11ee-4cfa-993d-52646f7d6b15\",\n                    \"ScheduledStartTime\": \"2022-05-28T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-28T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"4b26f1d7-11ee-4cfa-993d-52646f7d6b15\",\n                        \"UserTaskId\": \"3921aa2f-7569-4670-a2b3-0b8edf4c178a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-28T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 25,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3a908075-6ac4-4d00-980c-0fb20735f6ab\",\n                    \"DisplayId\": \"AHA-Heart Failure-12002\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Physical activity\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"02c2f7e4-2652-483b-8bea-6dd83c5ac88d\",\n                    \"ScheduledStartTime\": \"2022-05-19T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"02c2f7e4-2652-483b-8bea-6dd83c5ac88d\",\n                        \"UserTaskId\": \"3a908075-6ac4-4d00-980c-0fb20735f6ab\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12002\",\n                        \"Title\": \"Physical activity\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 16,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"3bd4ac08-4fa0-4b2d-b70c-25c9a2ba4852\",\n                    \"DisplayId\": \"AHA-Heart Failure-10056\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Exercise with a friend\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"362b0671-2f78-4834-9b97-8d939bf03e50\",\n                    \"ScheduledStartTime\": \"2022-05-19T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"362b0671-2f78-4834-9b97-8d939bf03e50\",\n                        \"UserTaskId\": \"3bd4ac08-4fa0-4b2d-b70c-25c9a2ba4852\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10056\",\n                        \"Title\": \"Exercise with a friend\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 16,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"413bbacc-17d3-4f63-b6c8-00b48c00240c\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"191b0905-1e5e-4503-b43b-5afe463a0768\",\n                    \"ScheduledStartTime\": \"2022-05-24T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-24T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"191b0905-1e5e-4503-b43b-5afe463a0768\",\n                        \"UserTaskId\": \"413bbacc-17d3-4f63-b6c8-00b48c00240c\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-24T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 21,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"456bd1fa-f5e6-44a0-940d-10e8e28b3aaa\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"9e260b2f-66a3-49e7-99e3-485f2b991f7e\",\n                    \"ScheduledStartTime\": \"2022-05-31T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-31T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"9e260b2f-66a3-49e7-99e3-485f2b991f7e\",\n                        \"UserTaskId\": \"456bd1fa-f5e6-44a0-940d-10e8e28b3aaa\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-31T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 28,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"49b6223d-dc92-4d08-b6e3-eaf12e433d33\",\n                    \"DisplayId\": \"AHA-Heart Failure-2010\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Status check\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"ef277549-85d4-4bd0-ba80-226424795a2f\",\n                    \"ScheduledStartTime\": \"2022-05-31T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-31T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"ef277549-85d4-4bd0-ba80-226424795a2f\",\n                        \"UserTaskId\": \"49b6223d-dc92-4d08-b6e3-eaf12e433d33\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2010\",\n                        \"Title\": \"Status check\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-31T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 28,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"49b8500f-ce4c-4ff3-b2de-5db3950aa0dc\",\n                    \"DisplayId\": \"AHA-Heart Failure-12001\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Enjoy\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"57a6ddfb-bb29-4db0-91fd-52537bff5ae9\",\n                    \"ScheduledStartTime\": \"2022-05-12T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"57a6ddfb-bb29-4db0-91fd-52537bff5ae9\",\n                        \"UserTaskId\": \"49b8500f-ce4c-4ff3-b2de-5db3950aa0dc\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12001\",\n                        \"Title\": \"Enjoy\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 9,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"4a3285df-8070-4176-ba8e-80b30b19a77d\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"d20c1773-8a6c-4abb-84d5-97689ae288e5\",\n                    \"ScheduledStartTime\": \"2022-05-11T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-11T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"d20c1773-8a6c-4abb-84d5-97689ae288e5\",\n                        \"UserTaskId\": \"4a3285df-8070-4176-ba8e-80b30b19a77d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-11T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 8,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"51e3d57e-8eb2-4037-b914-511dd9b697dc\",\n                    \"DisplayId\": \"AHA-Heart Failure-3000\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Master the scale\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Link\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"de7ac9d5-0ac3-40c3-bbbe-726b85fc13b9\",\n                    \"ScheduledStartTime\": \"2022-06-01T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-01T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"de7ac9d5-0ac3-40c3-bbbe-726b85fc13b9\",\n                        \"UserTaskId\": \"51e3d57e-8eb2-4037-b914-511dd9b697dc\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Link\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"3000\",\n                        \"Title\": \"Master the scale\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-01T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 29,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"52982859-e3f3-45e0-bcd5-bab9e2603569\",\n                    \"DisplayId\": \"AHA-Heart Failure-10185\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Healthy body weight\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"26174810-642f-4040-9c53-f1706e55f9ec\",\n                    \"ScheduledStartTime\": \"2022-06-06T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-06T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"26174810-642f-4040-9c53-f1706e55f9ec\",\n                        \"UserTaskId\": \"52982859-e3f3-45e0-bcd5-bab9e2603569\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10185\",\n                        \"Title\": \"Healthy body weight\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-06T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 34,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"534ad5d5-3e73-441c-8481-a61649f81bbe\",\n                    \"DisplayId\": \"AHA-Heart Failure-15022\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Make every move count\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"656d632c-1656-4416-84f7-893bfc2ecb6d\",\n                    \"ScheduledStartTime\": \"2022-05-22T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-22T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"656d632c-1656-4416-84f7-893bfc2ecb6d\",\n                        \"UserTaskId\": \"534ad5d5-3e73-441c-8481-a61649f81bbe\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15022\",\n                        \"Title\": \"Make every move count\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-22T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 19,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"5be730da-3695-4541-998c-3eac1f414e5d\",\n                    \"DisplayId\": \"AHA-Heart Failure-RSS001\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"News feed\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-NewsFeed\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"90d203c0-1b08-497d-b73b-24de8038f8c6\",\n                    \"ScheduledStartTime\": \"2022-05-04T01:30:05.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-04T17:30:00.000Z\",\n                    \"Status\": \"Delayed\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"90d203c0-1b08-497d-b73b-24de8038f8c6\",\n                        \"UserTaskId\": \"5be730da-3695-4541-998c-3eac1f414e5d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Web\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"RSS001\",\n                        \"Title\": \"News feed\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-04T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 6,\n                        \"Frequency\": 1,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"6242350d-8ba4-415a-9314-57459206b4f7\",\n                    \"DisplayId\": \"AHA-Heart Failure-3001\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Get moving\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Link\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2952eef7-a54c-4c73-87a1-e36a419f51a2\",\n                    \"ScheduledStartTime\": \"2022-05-18T01:30:04.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-18T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2952eef7-a54c-4c73-87a1-e36a419f51a2\",\n                        \"UserTaskId\": \"6242350d-8ba4-415a-9314-57459206b4f7\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Link\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"3001\",\n                        \"Title\": \"Get moving\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-18T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 5,\n                        \"Frequency\": 15,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"67853a97-a0af-4012-8ab2-3cf5f241af01\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"8486a968-8197-4ea8-b38f-9ccf88889c97\",\n                    \"ScheduledStartTime\": \"2022-05-12T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"8486a968-8197-4ea8-b38f-9ccf88889c97\",\n                        \"UserTaskId\": \"67853a97-a0af-4012-8ab2-3cf5f241af01\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 9,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"679ebd2f-16c2-4d86-8f00-d6fe33e939b7\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"f3178d65-5dbe-4104-a871-aa86005a86cd\",\n                    \"ScheduledStartTime\": \"2022-05-13T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-13T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"f3178d65-5dbe-4104-a871-aa86005a86cd\",\n                        \"UserTaskId\": \"679ebd2f-16c2-4d86-8f00-d6fe33e939b7\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-13T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 10,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"68e9be06-0440-4a7a-81ef-c3092ef9294a\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"b9386d23-20e5-41c6-9330-5f5fcbafc140\",\n                    \"ScheduledStartTime\": \"2022-05-14T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-14T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"b9386d23-20e5-41c6-9330-5f5fcbafc140\",\n                        \"UserTaskId\": \"68e9be06-0440-4a7a-81ef-c3092ef9294a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-14T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 11,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"697cdafa-f29a-441e-8e85-79e77ceb8d36\",\n                    \"DisplayId\": \"AHA-Heart Failure-2011\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Life's Simple 7 assessment\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"34bcc725-a831-4417-99b7-13f028672175\",\n                    \"ScheduledStartTime\": \"2022-05-07T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"34bcc725-a831-4417-99b7-13f028672175\",\n                        \"UserTaskId\": \"697cdafa-f29a-441e-8e85-79e77ceb8d36\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2011\",\n                        \"Title\": \"Life's Simple 7 assessment\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 4,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"6a33fcc9-68fb-45ef-8463-d0486699b5e6\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"b1be29f3-7e63-4754-a459-20ce2abea2f0\",\n                    \"ScheduledStartTime\": \"2022-05-06T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-06T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"b1be29f3-7e63-4754-a459-20ce2abea2f0\",\n                        \"UserTaskId\": \"6a33fcc9-68fb-45ef-8463-d0486699b5e6\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-06T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 3,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"6f8fd339-e0bb-4900-a423-77ff3e5dae0d\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2263a8d6-33ba-4138-a206-c67d40d78dec\",\n                    \"ScheduledStartTime\": \"2022-06-06T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-06T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2263a8d6-33ba-4138-a206-c67d40d78dec\",\n                        \"UserTaskId\": \"6f8fd339-e0bb-4900-a423-77ff3e5dae0d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-06T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 34,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"708dcb8a-3cae-4d7f-b0f3-64f11001526f\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"12c1b333-5559-455b-a8f4-beb856e2f84d\",\n                    \"ScheduledStartTime\": \"2022-05-20T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-20T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"12c1b333-5559-455b-a8f4-beb856e2f84d\",\n                        \"UserTaskId\": \"708dcb8a-3cae-4d7f-b0f3-64f11001526f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-20T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 17,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"71db0b85-ee94-45d7-b8d0-b3aa1cae6773\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"ab4e0503-dd4d-451d-bc5f-d0f9387dbbf2\",\n                    \"ScheduledStartTime\": \"2022-06-02T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-02T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"ab4e0503-dd4d-451d-bc5f-d0f9387dbbf2\",\n                        \"UserTaskId\": \"71db0b85-ee94-45d7-b8d0-b3aa1cae6773\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-02T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 30,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"95564b13-e561-4634-a994-0be0b7a594e0\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"3ddd8b85-6493-4e7b-9de5-2cbcc7ab399f\",\n                    \"ScheduledStartTime\": \"2022-05-09T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"3ddd8b85-6493-4e7b-9de5-2cbcc7ab399f\",\n                        \"UserTaskId\": \"95564b13-e561-4634-a994-0be0b7a594e0\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 6,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"968fe1b0-13cf-4cf9-b064-2649a6c6e1f9\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"aae781af-0c33-4ad0-bf20-b304fa8c50f7\",\n                    \"ScheduledStartTime\": \"2022-05-30T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-30T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"aae781af-0c33-4ad0-bf20-b304fa8c50f7\",\n                        \"UserTaskId\": \"968fe1b0-13cf-4cf9-b064-2649a6c6e1f9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-30T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 27,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"97c6575c-a3fe-4f68-b42e-49a8cdd93bd1\",\n                    \"DisplayId\": \"AHA-Heart Failure-10059\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Physical fitness\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"76ffbd5a-43e0-4dc3-b0d3-4a3368cc428a\",\n                    \"ScheduledStartTime\": \"2022-05-22T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-22T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"76ffbd5a-43e0-4dc3-b0d3-4a3368cc428a\",\n                        \"UserTaskId\": \"97c6575c-a3fe-4f68-b42e-49a8cdd93bd1\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10059\",\n                        \"Title\": \"Physical fitness\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-22T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 19,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"9856bbe0-6c2f-4ae7-9ccf-1da74ba46b1f\",\n                    \"DisplayId\": \"AHA-Heart Failure-1004\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weight\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2e837d51-6de0-4a0a-8b30-4c2b26206d84\",\n                    \"ScheduledStartTime\": \"2022-06-01T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-01T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2e837d51-6de0-4a0a-8b30-4c2b26206d84\",\n                        \"UserTaskId\": \"9856bbe0-6c2f-4ae7-9ccf-1da74ba46b1f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1004\",\n                        \"Title\": \"Weight\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-01T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 29,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"9c44c8d4-4429-4c8f-a2de-d8287b11b755\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"652386f2-6410-4049-9b25-62b13c340ec2\",\n                    \"ScheduledStartTime\": \"2022-05-17T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-17T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"652386f2-6410-4049-9b25-62b13c340ec2\",\n                        \"UserTaskId\": \"9c44c8d4-4429-4c8f-a2de-d8287b11b755\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-17T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 14,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"9ec87b47-9c59-460b-a500-2adb950fbae9\",\n                    \"DisplayId\": \"AHA-Heart Failure-10001\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Listen\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"39c54ce8-b332-4864-8fd8-153758c8b6ec\",\n                    \"ScheduledStartTime\": \"2022-05-05T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-05T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"39c54ce8-b332-4864-8fd8-153758c8b6ec\",\n                        \"UserTaskId\": \"9ec87b47-9c59-460b-a500-2adb950fbae9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10001\",\n                        \"Title\": \"Listen\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-05T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 2,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a7f39ea3-cd53-4ee1-87c9-44c9b20e1810\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"8cfec63f-017a-46cf-88ab-0a06db98a926\",\n                    \"ScheduledStartTime\": \"2022-05-10T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-10T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"8cfec63f-017a-46cf-88ab-0a06db98a926\",\n                        \"UserTaskId\": \"a7f39ea3-cd53-4ee1-87c9-44c9b20e1810\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-10T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 7,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a8bea123-d89c-49d0-a97a-219013764ddd\",\n                    \"DisplayId\": \"AHA-Heart Failure-12004\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Relaxation strategy\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"8fe5fff8-abef-431f-8cb6-1fadd97cd82d\",\n                    \"ScheduledStartTime\": \"2022-06-02T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-02T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"8fe5fff8-abef-431f-8cb6-1fadd97cd82d\",\n                        \"UserTaskId\": \"a8bea123-d89c-49d0-a97a-219013764ddd\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12004\",\n                        \"Title\": \"Relaxation strategy\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-02T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 30,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a8dfa196-b628-4d2d-b726-df2658c4dde3\",\n                    \"DisplayId\": \"AHA-Heart Failure-1160\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Your Heart Surgery:  Rehab and Recovery\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2d3d298f-cff8-4d07-959e-356e4529c36e\",\n                    \"ScheduledStartTime\": \"2022-05-11T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-11T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2d3d298f-cff8-4d07-959e-356e4529c36e\",\n                        \"UserTaskId\": \"a8dfa196-b628-4d2d-b726-df2658c4dde3\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1160\",\n                        \"Title\": \"Your Heart Surgery:  Rehab and Recovery\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-11T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 8,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"a94589fd-d59e-4322-9162-c6fedb4f9a2e\",\n                    \"DisplayId\": \"AHA-Heart Failure-3002\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Healthy eating\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Link\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"fbe06bf0-0423-4d30-b641-98f3b59ea0f5\",\n                    \"ScheduledStartTime\": \"2022-05-25T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-25T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"fbe06bf0-0423-4d30-b641-98f3b59ea0f5\",\n                        \"UserTaskId\": \"a94589fd-d59e-4322-9162-c6fedb4f9a2e\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Link\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"3002\",\n                        \"Title\": \"Healthy eating\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-25T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 22,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"aa224810-6920-4ac5-8790-f126d86bef77\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"2e1bc7a1-828a-4352-9854-e72905df6c54\",\n                    \"ScheduledStartTime\": \"2022-05-26T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"2e1bc7a1-828a-4352-9854-e72905df6c54\",\n                        \"UserTaskId\": \"aa224810-6920-4ac5-8790-f126d86bef77\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 23,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"aaac458a-8e16-4eec-b54b-cb1d2f148a24\",\n                    \"DisplayId\": \"AHA-Heart Failure-2000\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"How are you feeling today?\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"ea7ae97e-6f0f-49a3-8594-d24524807df4\",\n                    \"ScheduledStartTime\": \"2022-05-04T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-04T17:30:00.000Z\",\n                    \"Status\": \"Delayed\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"ea7ae97e-6f0f-49a3-8594-d24524807df4\",\n                        \"UserTaskId\": \"aaac458a-8e16-4eec-b54b-cb1d2f148a24\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2000\",\n                        \"Title\": \"How are you feeling today?\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-04T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 1,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ad0cb9d3-2b67-4175-ab68-077334ae74aa\",\n                    \"DisplayId\": \"AHA-Heart Failure-10112\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Healthy diet 2\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"6a6e08d3-4660-4748-abac-2b6858ff2001\",\n                    \"ScheduledStartTime\": \"2022-05-30T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-30T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"6a6e08d3-4660-4748-abac-2b6858ff2001\",\n                        \"UserTaskId\": \"ad0cb9d3-2b67-4175-ab68-077334ae74aa\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10112\",\n                        \"Title\": \"Healthy diet 2\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-30T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 27,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"adf68328-a97f-42de-8a43-98ef58f48a2d\",\n                    \"DisplayId\": \"AHA-Heart Failure-10055\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Fuels\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"8008fa1a-1285-43a8-9462-af66ddd706cc\",\n                    \"ScheduledStartTime\": \"2022-05-18T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-18T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"8008fa1a-1285-43a8-9462-af66ddd706cc\",\n                        \"UserTaskId\": \"adf68328-a97f-42de-8a43-98ef58f48a2d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10055\",\n                        \"Title\": \"Fuels\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-18T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 15,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ae9d59a1-3b3a-4e01-a898-e0dea02ead1f\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"cd517142-da1c-4a0f-a157-3bc64c0c78e5\",\n                    \"ScheduledStartTime\": \"2022-05-16T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-16T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"cd517142-da1c-4a0f-a157-3bc64c0c78e5\",\n                        \"UserTaskId\": \"ae9d59a1-3b3a-4e01-a898-e0dea02ead1f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-16T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 13,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b099073d-7bcc-4243-94b1-52ef9cd16711\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"31a7debe-c04a-41ea-8ca8-1a6bd03e2760\",\n                    \"ScheduledStartTime\": \"2022-06-02T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-02T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"31a7debe-c04a-41ea-8ca8-1a6bd03e2760\",\n                        \"UserTaskId\": \"b099073d-7bcc-4243-94b1-52ef9cd16711\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-02T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 30,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b3f22c57-72ce-4201-bf9d-f2d6cfce5436\",\n                    \"DisplayId\": \"AHA-Heart Failure-15035\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"What is a healthy diet\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"756d1a96-0121-476e-99cb-1f3445efb841\",\n                    \"ScheduledStartTime\": \"2022-05-25T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-25T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"756d1a96-0121-476e-99cb-1f3445efb841\",\n                        \"UserTaskId\": \"b3f22c57-72ce-4201-bf9d-f2d6cfce5436\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15035\",\n                        \"Title\": \"What is a healthy diet\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-25T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 22,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b4317f74-1d6e-43f2-8231-b8a41067f6c7\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"ba2bd58e-618c-42b4-af28-abac02e176ef\",\n                    \"ScheduledStartTime\": \"2022-06-07T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"ba2bd58e-618c-42b4-af28-abac02e176ef\",\n                        \"UserTaskId\": \"b4317f74-1d6e-43f2-8231-b8a41067f6c7\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 35,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b4d26127-752e-49c4-9a34-0676d4cfb338\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"c74c63b5-5572-4edc-b565-e679f9623952\",\n                    \"ScheduledStartTime\": \"2022-05-17T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-17T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"c74c63b5-5572-4edc-b565-e679f9623952\",\n                        \"UserTaskId\": \"b4d26127-752e-49c4-9a34-0676d4cfb338\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-17T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 14,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"b71c9e3f-adab-4724-92c9-06dfe084d29b\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"63c4da29-6028-445a-8efa-23c55cc34703\",\n                    \"ScheduledStartTime\": \"2022-05-05T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-05T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"63c4da29-6028-445a-8efa-23c55cc34703\",\n                        \"UserTaskId\": \"b71c9e3f-adab-4724-92c9-06dfe084d29b\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-05T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 2,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"bc6df683-6f20-4886-b201-f37f9b1d5a0d\",\n                    \"DisplayId\": \"AHA-Heart Failure-12010\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Laughter\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"d6ce2626-10a4-4850-8eb9-0801057fa059\",\n                    \"ScheduledStartTime\": \"2022-05-12T01:30:04.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"d6ce2626-10a4-4850-8eb9-0801057fa059\",\n                        \"UserTaskId\": \"bc6df683-6f20-4886-b201-f37f9b1d5a0d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12010\",\n                        \"Title\": \"Laughter\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 5,\n                        \"Frequency\": 9,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"c0ac07c4-949c-45c7-a6d3-ebdbf1347535\",\n                    \"DisplayId\": \"AHA-Heart Failure-16355\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Week televisit\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"8796f7fd-faf8-4b56-95d1-531facfc9ce9\",\n                    \"ScheduledStartTime\": \"2022-05-12T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"8796f7fd-faf8-4b56-95d1-531facfc9ce9\",\n                        \"UserTaskId\": \"c0ac07c4-949c-45c7-a6d3-ebdbf1347535\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16355\",\n                        \"Title\": \"Week televisit\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 9,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"c0e33d33-3eb8-43c7-8c01-ffef9c2cf509\",\n                    \"DisplayId\": \"AHA-Heart Failure-10058\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Exercise prescription\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"1a26c331-1679-4690-b952-452edbcba896\",\n                    \"ScheduledStartTime\": \"2022-05-21T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"1a26c331-1679-4690-b952-452edbcba896\",\n                        \"UserTaskId\": \"c0e33d33-3eb8-43c7-8c01-ffef9c2cf509\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10058\",\n                        \"Title\": \"Exercise prescription\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 18,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ce8c8fa1-af5d-4ade-b5cc-f3da9c7cefb3\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"dd3b9f45-0f12-4add-8ea7-a7bfbda9aaff\",\n                    \"ScheduledStartTime\": \"2022-05-31T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-31T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"dd3b9f45-0f12-4add-8ea7-a7bfbda9aaff\",\n                        \"UserTaskId\": \"ce8c8fa1-af5d-4ade-b5cc-f3da9c7cefb3\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-31T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 28,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"cecfb426-2fe8-4537-977c-b235f2b3b8c6\",\n                    \"DisplayId\": \"AHA-Heart Failure-10180\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Lose weight\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"10a360e1-c6d7-4bee-86b4-ba9e651ec79a\",\n                    \"ScheduledStartTime\": \"2022-06-01T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-01T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"10a360e1-c6d7-4bee-86b4-ba9e651ec79a\",\n                        \"UserTaskId\": \"cecfb426-2fe8-4537-977c-b235f2b3b8c6\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10180\",\n                        \"Title\": \"Lose weight\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-01T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 29,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d6896036-3b27-4797-9342-01195bccd3a6\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"d54b0f5a-2053-40a9-8989-dbc543c16e56\",\n                    \"ScheduledStartTime\": \"2022-05-21T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"d54b0f5a-2053-40a9-8989-dbc543c16e56\",\n                        \"UserTaskId\": \"d6896036-3b27-4797-9342-01195bccd3a6\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 18,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d7e8de05-55c1-4d48-aa8e-fb1c756dfe05\",\n                    \"DisplayId\": \"AHA-Heart Failure-2004\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Heart failure literacy\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"aadae4db-dfd3-4610-b949-ac327cb2a8d5\",\n                    \"ScheduledStartTime\": \"2022-05-07T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"aadae4db-dfd3-4610-b949-ac327cb2a8d5\",\n                        \"UserTaskId\": \"d7e8de05-55c1-4d48-aa8e-fb1c756dfe05\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2004\",\n                        \"Title\": \"Heart failure literacy\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 4,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"d9a0c1dd-066c-4b60-91a6-455fe94daaa5\",\n                    \"DisplayId\": \"AHA-Heart Failure-12011\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Caloric intake\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"871383a9-94c1-49ba-b019-0dc9851f1574\",\n                    \"ScheduledStartTime\": \"2022-06-02T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-02T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"871383a9-94c1-49ba-b019-0dc9851f1574\",\n                        \"UserTaskId\": \"d9a0c1dd-066c-4b60-91a6-455fe94daaa5\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12011\",\n                        \"Title\": \"Caloric intake\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-02T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 30,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"da6e0f70-b623-4e3d-b6ff-47c410c021d5\",\n                    \"DisplayId\": \"AHA-Heart Failure-5000\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Heart failure\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Animation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"a290f3a4-edc7-4b49-a574-5be860f8ab58\",\n                    \"ScheduledStartTime\": \"2022-05-09T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-09T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"a290f3a4-edc7-4b49-a574-5be860f8ab58\",\n                        \"UserTaskId\": \"da6e0f70-b623-4e3d-b6ff-47c410c021d5\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Animation\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"5000\",\n                        \"Title\": \"Heart failure\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-09T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 6,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"dc8a8618-caea-42de-ab48-36a789f63a2a\",\n                    \"DisplayId\": \"AHA-Heart Failure-2001\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Have you taken your medications as prescribed\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"9dc458a4-1781-4c8d-bb30-7c5ab7eaca91\",\n                    \"ScheduledStartTime\": \"2022-05-04T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-04T17:30:00.000Z\",\n                    \"Status\": \"Delayed\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"9dc458a4-1781-4c8d-bb30-7c5ab7eaca91\",\n                        \"UserTaskId\": \"dc8a8618-caea-42de-ab48-36a789f63a2a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2001\",\n                        \"Title\": \"Have you taken your medications as prescribed\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-04T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 1,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"dcf20962-e19c-4fa4-8c46-76b75f79e7a2\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"18d594ac-4396-43a9-b3c4-79c33317210b\",\n                    \"ScheduledStartTime\": \"2022-05-22T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-22T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"18d594ac-4396-43a9-b3c4-79c33317210b\",\n                        \"UserTaskId\": \"dcf20962-e19c-4fa4-8c46-76b75f79e7a2\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-22T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 19,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"e11d367b-999f-43d1-9cd0-c5e0bca6cbf2\",\n                    \"DisplayId\": \"AHA-Heart Failure-2016\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Biometric - Physical activity\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"94e1f280-9807-4883-a9b6-8a12bb8c3e3e\",\n                    \"ScheduledStartTime\": \"2022-05-21T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-21T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"94e1f280-9807-4883-a9b6-8a12bb8c3e3e\",\n                        \"UserTaskId\": \"e11d367b-999f-43d1-9cd0-c5e0bca6cbf2\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2016\",\n                        \"Title\": \"Biometric - Physical activity\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-21T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 18,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"e78c6987-d497-49e8-823a-92a27e2ad175\",\n                    \"DisplayId\": \"AHA-Heart Failure-15031\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Get smart about superfoods\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Infographics\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"243a2456-d385-43f9-a754-24523f83cc5d\",\n                    \"ScheduledStartTime\": \"2022-05-12T01:30:05.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-12T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"243a2456-d385-43f9-a754-24523f83cc5d\",\n                        \"UserTaskId\": \"e78c6987-d497-49e8-823a-92a27e2ad175\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Infographic\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"15031\",\n                        \"Title\": \"Get smart about superfoods\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-12T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 6,\n                        \"Frequency\": 9,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"e83b6bb4-fdd0-435e-8c82-c2e71a5a8ce2\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"861cf0e8-3868-4583-8287-e0471e207e33\",\n                    \"ScheduledStartTime\": \"2022-05-10T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-10T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"861cf0e8-3868-4583-8287-e0471e207e33\",\n                        \"UserTaskId\": \"e83b6bb4-fdd0-435e-8c82-c2e71a5a8ce2\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-10T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 7,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"e9ccefff-41b0-4480-b24a-87844451995c\",\n                    \"DisplayId\": \"AHA-Heart Failure-16331\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely reflection\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"c99f1b77-610a-4977-8c99-204413b0ef9a\",\n                    \"ScheduledStartTime\": \"2022-05-10T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-10T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"c99f1b77-610a-4977-8c99-204413b0ef9a\",\n                        \"UserTaskId\": \"e9ccefff-41b0-4480-b24a-87844451995c\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16331\",\n                        \"Title\": \"Weekely reflection\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-10T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 7,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"eabb2c32-b5e1-4f27-a755-16192b2ddefc\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"7531cdc1-3420-49fc-9c62-04cd0ca27019\",\n                    \"ScheduledStartTime\": \"2022-05-08T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-08T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"7531cdc1-3420-49fc-9c62-04cd0ca27019\",\n                        \"UserTaskId\": \"eabb2c32-b5e1-4f27-a755-16192b2ddefc\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-08T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 5,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"eb06af5a-c991-42c5-b592-f8eedb9c8bdd\",\n                    \"DisplayId\": \"AHA-Heart Failure-16236\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Well-being\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"a29c9b0b-aa8c-42dc-bbcd-9b71c1c23924\",\n                    \"ScheduledStartTime\": \"2022-05-19T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"a29c9b0b-aa8c-42dc-bbcd-9b71c1c23924\",\n                        \"UserTaskId\": \"eb06af5a-c991-42c5-b592-f8eedb9c8bdd\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16236\",\n                        \"Title\": \"Well-being\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 16,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"eb5b83ab-a6a8-4532-870e-8d45cd8d7b24\",\n                    \"DisplayId\": \"AHA-Heart Failure-2014\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Biometric - Weight\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"e94eaefa-6c62-49fe-ac94-0eb4d2a4cd32\",\n                    \"ScheduledStartTime\": \"2022-05-18T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-18T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"e94eaefa-6c62-49fe-ac94-0eb4d2a4cd32\",\n                        \"UserTaskId\": \"eb5b83ab-a6a8-4532-870e-8d45cd8d7b24\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2014\",\n                        \"Title\": \"Biometric - Weight\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-18T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 15,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ec19ab74-6cc3-48d5-a180-27f2208cfbf9\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"f84479de-40ed-4de9-a8da-ec73f8771cf1\",\n                    \"ScheduledStartTime\": \"2022-05-26T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-26T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"f84479de-40ed-4de9-a8da-ec73f8771cf1\",\n                        \"UserTaskId\": \"ec19ab74-6cc3-48d5-a180-27f2208cfbf9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-26T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 23,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ed5483ea-2117-46b5-84ee-e12e80af2f0f\",\n                    \"DisplayId\": \"AHA-Heart Failure-1005\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Course Correction\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"1111a455-9916-4a15-b6dc-e24efce583bf\",\n                    \"ScheduledStartTime\": \"2022-06-08T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-08T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"1111a455-9916-4a15-b6dc-e24efce583bf\",\n                        \"UserTaskId\": \"ed5483ea-2117-46b5-84ee-e12e80af2f0f\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1005\",\n                        \"Title\": \"Course Correction\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-08T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 36,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ee4ac3f5-8888-41f5-8656-3f0ede3afe00\",\n                    \"DisplayId\": \"AHA-Heart Failure-12000\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Important\",\n                    \"Description\": null,\n                    \"Category\": \"Challenge\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"36e402bf-0a71-4c12-bded-de280d71c95a\",\n                    \"ScheduledStartTime\": \"2022-05-05T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-05T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"36e402bf-0a71-4c12-bded-de280d71c95a\",\n                        \"UserTaskId\": \"ee4ac3f5-8888-41f5-8656-3f0ede3afe00\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Challenge\",\n                        \"Category\": \"Challenge\",\n                        \"ProviderActionId\": \"12000\",\n                        \"Title\": \"Important\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-05T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 2,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"f3ad48b8-6612-497a-be17-a3cf55574d7d\",\n                    \"DisplayId\": \"AHA-Heart Failure-1003\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Nutrition\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"382c23ec-2534-410c-8d42-e56692abe78e\",\n                    \"ScheduledStartTime\": \"2022-05-25T01:30:02.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-25T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"382c23ec-2534-410c-8d42-e56692abe78e\",\n                        \"UserTaskId\": \"f3ad48b8-6612-497a-be17-a3cf55574d7d\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1003\",\n                        \"Title\": \"Nutrition\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-25T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 3,\n                        \"Frequency\": 22,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"f42019b8-c386-4b36-a425-eb6e22b96af7\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"fee7eb18-ebbe-4d26-b41f-ccea8a6bdc6a\",\n                    \"ScheduledStartTime\": \"2022-05-07T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"fee7eb18-ebbe-4d26-b41f-ccea8a6bdc6a\",\n                        \"UserTaskId\": \"f42019b8-c386-4b36-a425-eb6e22b96af7\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 4,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"f7a2fbb9-8982-402f-8573-f29bbb4c1fde\",\n                    \"DisplayId\": \"AHA-Heart Failure-16358\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Check-in (biometric, symptoms)\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"6cf15e06-360b-403f-9e0a-4a5c67e0159d\",\n                    \"ScheduledStartTime\": \"2022-05-19T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-19T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"6cf15e06-360b-403f-9e0a-4a5c67e0159d\",\n                        \"UserTaskId\": \"f7a2fbb9-8982-402f-8573-f29bbb4c1fde\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"16358\",\n                        \"Title\": \"Check-in (biometric, symptoms)\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-19T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 16,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"f989831c-d268-4a14-852b-1ffc329b89ab\",\n                    \"DisplayId\": \"AHA-Heart Failure-1001\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Goals\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"193bd0fd-15d5-4cd8-b1ea-fd775ce89c3d\",\n                    \"ScheduledStartTime\": \"2022-05-11T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-11T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"193bd0fd-15d5-4cd8-b1ea-fd775ce89c3d\",\n                        \"UserTaskId\": \"f989831c-d268-4a14-852b-1ffc329b89ab\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1001\",\n                        \"Title\": \"Goals\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-11T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 8,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"f9be5c5c-aae6-4979-ae0c-cd255e0c3af9\",\n                    \"DisplayId\": \"AHA-Heart Failure-1000\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Getting Started\",\n                    \"Description\": null,\n                    \"Category\": \"Educational-Video\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"a1ce5d4d-7bb5-4ffc-a223-8b58d57f8f21\",\n                    \"ScheduledStartTime\": \"2022-05-04T01:30:03.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-04T17:30:00.000Z\",\n                    \"Status\": \"Delayed\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"a1ce5d4d-7bb5-4ffc-a223-8b58d57f8f21\",\n                        \"UserTaskId\": \"f9be5c5c-aae6-4979-ae0c-cd255e0c3af9\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Video\",\n                        \"Category\": \"\",\n                        \"ProviderActionId\": \"1000\",\n                        \"Title\": \"Getting Started\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-04T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 4,\n                        \"Frequency\": 1,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"faa3d7cd-8e77-4e29-a2d9-060af5670fb6\",\n                    \"DisplayId\": \"AHA-Heart Failure-10110\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Dining out\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"a8c8b723-884e-48a8-9e6f-5f431281658a\",\n                    \"ScheduledStartTime\": \"2022-05-28T01:30:00.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-28T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"a8c8b723-884e-48a8-9e6f-5f431281658a\",\n                        \"UserTaskId\": \"faa3d7cd-8e77-4e29-a2d9-060af5670fb6\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10110\",\n                        \"Title\": \"Dining out\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-28T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 1,\n                        \"Frequency\": 25,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"fc2f4b6c-60fb-410d-883b-9adabb37fe3a\",\n                    \"DisplayId\": \"AHA-Heart Failure-10061\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Physical activity\",\n                    \"Description\": null,\n                    \"Category\": \"Message\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"f5d4dca4-34aa-468c-a91b-58a60c6744a4\",\n                    \"ScheduledStartTime\": \"2022-05-24T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-24T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"f5d4dca4-34aa-468c-a91b-58a60c6744a4\",\n                        \"UserTaskId\": \"fc2f4b6c-60fb-410d-883b-9adabb37fe3a\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Message\",\n                        \"Category\": \"Message\",\n                        \"ProviderActionId\": \"10061\",\n                        \"Title\": \"Physical activity\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-24T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 21,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"fd104525-02c3-45c6-b517-486c1bb4d94c\",\n                    \"DisplayId\": \"AHA-Heart Failure-2002\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Are you following your plan?\",\n                    \"Description\": null,\n                    \"Category\": \"Assessment\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"07456e4f-7efe-4f73-94bb-4dc8c287bf5b\",\n                    \"ScheduledStartTime\": \"2022-05-04T01:30:04.000Z\",\n                    \"ScheduledEndTime\": \"2022-05-04T17:30:00.000Z\",\n                    \"Status\": \"Delayed\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"07456e4f-7efe-4f73-94bb-4dc8c287bf5b\",\n                        \"UserTaskId\": \"fd104525-02c3-45c6-b517-486c1bb4d94c\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Assessment\",\n                        \"Category\": \"Assessment\",\n                        \"ProviderActionId\": \"2002\",\n                        \"Title\": \"Are you following your plan?\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-05-04T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 5,\n                        \"Frequency\": 1,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                },\n                {\n                    \"id\": \"ff014ca4-c40c-40a5-a5a3-ca75b2950edd\",\n                    \"DisplayId\": \"AHA-Heart Failure-16343\",\n                    \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                    \"Task\": \"Weekely review\",\n                    \"Description\": null,\n                    \"Category\": \"Consultation\",\n                    \"ActionType\": \"Careplan\",\n                    \"ActionId\": \"3d59cb88-9002-44a2-977f-97a8e6998274\",\n                    \"ScheduledStartTime\": \"2022-06-07T01:30:01.000Z\",\n                    \"ScheduledEndTime\": \"2022-06-07T17:30:00.000Z\",\n                    \"Status\": \"Pending\",\n                    \"Started\": false,\n                    \"StartedAt\": null,\n                    \"Finished\": false,\n                    \"FinishedAt\": null,\n                    \"Cancelled\": false,\n                    \"CancelledAt\": null,\n                    \"CancellationReason\": null,\n                    \"IsRecurrent\": false,\n                    \"RecurrenceScheduleId\": null,\n                    \"Action\": {\n                        \"id\": \"3d59cb88-9002-44a2-977f-97a8e6998274\",\n                        \"UserTaskId\": \"ff014ca4-c40c-40a5-a5a3-ca75b2950edd\",\n                        \"PatientUserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n                        \"EnrollmentId\": \"510\",\n                        \"Provider\": \"AHA\",\n                        \"PlanName\": \"AHA-Heart Failure\",\n                        \"PlanCode\": \"HeartFailure\",\n                        \"Type\": \"Professional\",\n                        \"Category\": \"Consultation\",\n                        \"ProviderActionId\": \"16343\",\n                        \"Title\": \"Weekely review\",\n                        \"Description\": \"\",\n                        \"Url\": null,\n                        \"ScheduledAt\": \"2022-06-07T00:00:00.000Z\",\n                        \"StartedAt\": null,\n                        \"CompletedAt\": null,\n                        \"Comments\": null,\n                        \"Sequence\": 2,\n                        \"Frequency\": 35,\n                        \"Status\": \"Pending\",\n                        \"RawContent\": null\n                    }\n                }\n            ]\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Patient App\",\n        \"ClientCode\": \"REANPTNT\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"23d349f7-51e0-46ba-ba83-b8b52133dd0d\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-3729031683\",\n        \"Email\": null,\n        \"UserName\": \"ddbjxd6350\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651676500,\n        \"exp\": 1654268500\n    },\n    \"Context\": \"UserTask.Search\",\n    \"ClientIps\": [\n        \"49.36.59.89\"\n    ],\n    \"APIVersion\": \"7.0.000\"\n}"
										}
									]
								},
								{
									"name": "Get assessment task by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
													"    var assessmentId = jsonRes.Data.UserTask.Action.Assessment.id;",
													"    var assessmentTemplateId = jsonRes.Data.UserTask.Action.Assessment.AssessmentTemplateId;",
													"    pm.environment.set(\"CAREPLAN_ASSESSMENT_ID\", assessmentId);",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", assessmentTemplateId);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"User Task is created\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
													"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/user-tasks/{{CAREPLAN_ASSESSMENT_TASK_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"user-tasks",
												"{{CAREPLAN_ASSESSMENT_TASK_ID}}"
											]
										},
										"description": "Gets list of User Task records"
									},
									"response": [
										{
											"name": "Get assessment task by id",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/user-tasks/{{CAREPLAN_ASSESSMENT_TASK_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"user-tasks",
														"{{CAREPLAN_ASSESSMENT_TASK_ID}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "4613"
												},
												{
													"key": "ETag",
													"value": "W/\"1205-XpHSU+5OkPuSgXifTUMeVO5+LLY\""
												},
												{
													"key": "Date",
													"value": "Thu, 28 Apr 2022 16:56:28 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"User task retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"UserTask\": {\n            \"id\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n            \"DisplayId\": \"AHA-Heart Failure-2010\",\n            \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n            \"Task\": \"Status check\",\n            \"Description\": null,\n            \"Category\": \"Assessment\",\n            \"ActionType\": \"Careplan\",\n            \"ActionId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n            \"ScheduledStartTime\": \"2022-07-17T01:30:01.000Z\",\n            \"ScheduledEndTime\": \"2022-07-17T17:30:00.000Z\",\n            \"Status\": \"Pending\",\n            \"Started\": false,\n            \"StartedAt\": null,\n            \"Finished\": false,\n            \"FinishedAt\": null,\n            \"Cancelled\": false,\n            \"CancelledAt\": null,\n            \"CancellationReason\": null,\n            \"IsRecurrent\": false,\n            \"RecurrenceScheduleId\": null,\n            \"Action\": {\n                \"id\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                \"EnrollmentId\": \"413\",\n                \"Provider\": \"AHA\",\n                \"PlanName\": \"AHA-Heart Failure\",\n                \"PlanCode\": \"HeartFailure\",\n                \"Type\": \"Assessment\",\n                \"Category\": \"Assessment\",\n                \"ProviderActionId\": \"2010\",\n                \"Title\": \"Status check\",\n                \"Description\": \"\",\n                \"Url\": null,\n                \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                \"StartedAt\": null,\n                \"CompletedAt\": null,\n                \"Comments\": null,\n                \"Sequence\": 2,\n                \"Frequency\": 81,\n                \"Status\": \"Pending\",\n                \"RawContent\": \"{\\\"code\\\":\\\"2010\\\",\\\"description\\\":\\\"\\\",\\\"id\\\":301,\\\"items\\\":[{\\\"code\\\":\\\"q1\\\",\\\"id\\\":\\\"1.1\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":1,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for a scheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q2\\\",\\\"id\\\":\\\"1.2\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":2,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for an unscheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q3\\\",\\\"id\\\":\\\"1.3\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":3,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had a change in your medications ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q4\\\",\\\"id\\\":\\\"1.4\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":4,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"A new or worsening symptom ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q5\\\",\\\"id\\\":\\\"1.5\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":5,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been given a new diagnosis ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q6\\\",\\\"id\\\":\\\"1.6\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":6,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Gone to an emergency department ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q7\\\",\\\"id\\\":\\\"1.7\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":7,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been hospitalized for a heart-related reason ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q8\\\",\\\"id\\\":\\\"1.8\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":8,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had heart-related surgical procedure ?\\\",\\\"type\\\":\\\"boolean\\\"}],\\\"language\\\":{\\\"en_uk\\\":{\\\"title\\\":\\\"Status check\\\"}},\\\"logoUrl\\\":\\\"\\\",\\\"status\\\":\\\"PENDING\\\",\\\"type\\\":\\\"Questionnaire\\\",\\\"version\\\":\\\"1.0.0\\\"}\",\n                \"Assessment\": {\n                    \"id\": \"e17e23a9-4fd7-4e56-bd6a-280773323df7\",\n                    \"Type\": \"Careplan\",\n                    \"DisplayCode\": \"Assessment#rj4c69bdyuiatn2sg057iesf:413:2022-07-17\",\n                    \"Title\": \"\",\n                    \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                    \"AssessmentTemplateId\": \"16d0c5e3-2327-4cf8-a48d-16cc3c959392\",\n                    \"Provider\": \"AHA\",\n                    \"ProviderEnrollmentId\": \"413\",\n                    \"ProviderAssessmentCode\": \"2010\",\n                    \"ProviderAssessmentId\": null,\n                    \"Status\": \"Pending\",\n                    \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                    \"CreatedAt\": \"2022-04-28T16:56:28.028Z\",\n                    \"ParentActivityId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                    \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                    \"CurrentNodeId\": \"8012c6f0-3f35-4082-a17f-226dd557d884\"\n                }\n            }\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-5741553366\",\n        \"Email\": null,\n        \"UserName\": \"rdrrcw2978\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651164264,\n        \"exp\": 1653756264\n    },\n    \"Context\": \"UserTask.GetById\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
										}
									]
								},
								{
									"name": "Get assessment task by id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
													"    var assessmentId = jsonRes.Data.UserTask.Action.Assessment.id;",
													"    var assessmentTemplateId = jsonRes.Data.UserTask.Action.Assessment.AssessmentTemplateId;",
													"    pm.environment.set(\"CAREPLAN_ASSESSMENT_ID\", assessmentId);",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", assessmentTemplateId);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"User Task is created\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
													"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/user-tasks/{{CAREPLAN_ASSESSMENT_TASK_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"user-tasks",
												"{{CAREPLAN_ASSESSMENT_TASK_ID}}"
											]
										},
										"description": "Gets list of User Task records"
									},
									"response": [
										{
											"name": "Get assessment task by id",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/user-tasks/{{CAREPLAN_ASSESSMENT_TASK_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"user-tasks",
														"{{CAREPLAN_ASSESSMENT_TASK_ID}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "4613"
												},
												{
													"key": "ETag",
													"value": "W/\"1205-XpHSU+5OkPuSgXifTUMeVO5+LLY\""
												},
												{
													"key": "Date",
													"value": "Thu, 28 Apr 2022 16:56:28 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"User task retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"UserTask\": {\n            \"id\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n            \"DisplayId\": \"AHA-Heart Failure-2010\",\n            \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n            \"Task\": \"Status check\",\n            \"Description\": null,\n            \"Category\": \"Assessment\",\n            \"ActionType\": \"Careplan\",\n            \"ActionId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n            \"ScheduledStartTime\": \"2022-07-17T01:30:01.000Z\",\n            \"ScheduledEndTime\": \"2022-07-17T17:30:00.000Z\",\n            \"Status\": \"Pending\",\n            \"Started\": false,\n            \"StartedAt\": null,\n            \"Finished\": false,\n            \"FinishedAt\": null,\n            \"Cancelled\": false,\n            \"CancelledAt\": null,\n            \"CancellationReason\": null,\n            \"IsRecurrent\": false,\n            \"RecurrenceScheduleId\": null,\n            \"Action\": {\n                \"id\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                \"EnrollmentId\": \"413\",\n                \"Provider\": \"AHA\",\n                \"PlanName\": \"AHA-Heart Failure\",\n                \"PlanCode\": \"HeartFailure\",\n                \"Type\": \"Assessment\",\n                \"Category\": \"Assessment\",\n                \"ProviderActionId\": \"2010\",\n                \"Title\": \"Status check\",\n                \"Description\": \"\",\n                \"Url\": null,\n                \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                \"StartedAt\": null,\n                \"CompletedAt\": null,\n                \"Comments\": null,\n                \"Sequence\": 2,\n                \"Frequency\": 81,\n                \"Status\": \"Pending\",\n                \"RawContent\": \"{\\\"code\\\":\\\"2010\\\",\\\"description\\\":\\\"\\\",\\\"id\\\":301,\\\"items\\\":[{\\\"code\\\":\\\"q1\\\",\\\"id\\\":\\\"1.1\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":1,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for a scheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q2\\\",\\\"id\\\":\\\"1.2\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":2,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for an unscheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q3\\\",\\\"id\\\":\\\"1.3\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":3,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had a change in your medications ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q4\\\",\\\"id\\\":\\\"1.4\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":4,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"A new or worsening symptom ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q5\\\",\\\"id\\\":\\\"1.5\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":5,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been given a new diagnosis ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q6\\\",\\\"id\\\":\\\"1.6\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":6,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Gone to an emergency department ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q7\\\",\\\"id\\\":\\\"1.7\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":7,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been hospitalized for a heart-related reason ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q8\\\",\\\"id\\\":\\\"1.8\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":8,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had heart-related surgical procedure ?\\\",\\\"type\\\":\\\"boolean\\\"}],\\\"language\\\":{\\\"en_uk\\\":{\\\"title\\\":\\\"Status check\\\"}},\\\"logoUrl\\\":\\\"\\\",\\\"status\\\":\\\"PENDING\\\",\\\"type\\\":\\\"Questionnaire\\\",\\\"version\\\":\\\"1.0.0\\\"}\",\n                \"Assessment\": {\n                    \"id\": \"e17e23a9-4fd7-4e56-bd6a-280773323df7\",\n                    \"Type\": \"Careplan\",\n                    \"DisplayCode\": \"Assessment#rj4c69bdyuiatn2sg057iesf:413:2022-07-17\",\n                    \"Title\": \"\",\n                    \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                    \"AssessmentTemplateId\": \"16d0c5e3-2327-4cf8-a48d-16cc3c959392\",\n                    \"Provider\": \"AHA\",\n                    \"ProviderEnrollmentId\": \"413\",\n                    \"ProviderAssessmentCode\": \"2010\",\n                    \"ProviderAssessmentId\": null,\n                    \"Status\": \"Pending\",\n                    \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                    \"CreatedAt\": \"2022-04-28T16:56:28.028Z\",\n                    \"ParentActivityId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                    \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                    \"CurrentNodeId\": \"8012c6f0-3f35-4082-a17f-226dd557d884\"\n                }\n            }\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-5741553366\",\n        \"Email\": null,\n        \"UserName\": \"rdrrcw2978\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651164264,\n        \"exp\": 1653756264\n    },\n    \"Context\": \"UserTask.GetById\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
										}
									]
								},
								{
									"name": "Get task by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
													"    var assessmentId = jsonRes.Data.UserTask.Action.Assessment.id;",
													"    var assessmentTemplateId = jsonRes.Data.UserTask.Action.Assessment.AssessmentTemplateId;",
													"    pm.environment.set(\"CAREPLAN_ASSESSMENT_ID\", assessmentId);",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", assessmentTemplateId);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"User Task is created\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
													"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"user-tasks",
												"{{USER_TASK_ID}}"
											]
										},
										"description": "Gets list of User Task records"
									},
									"response": [
										{
											"name": "Get assessment task by id",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/user-tasks/{{CAREPLAN_ASSESSMENT_TASK_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"user-tasks",
														"{{CAREPLAN_ASSESSMENT_TASK_ID}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "4613"
												},
												{
													"key": "ETag",
													"value": "W/\"1205-XpHSU+5OkPuSgXifTUMeVO5+LLY\""
												},
												{
													"key": "Date",
													"value": "Thu, 28 Apr 2022 16:56:28 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"User task retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"UserTask\": {\n            \"id\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n            \"DisplayId\": \"AHA-Heart Failure-2010\",\n            \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n            \"Task\": \"Status check\",\n            \"Description\": null,\n            \"Category\": \"Assessment\",\n            \"ActionType\": \"Careplan\",\n            \"ActionId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n            \"ScheduledStartTime\": \"2022-07-17T01:30:01.000Z\",\n            \"ScheduledEndTime\": \"2022-07-17T17:30:00.000Z\",\n            \"Status\": \"Pending\",\n            \"Started\": false,\n            \"StartedAt\": null,\n            \"Finished\": false,\n            \"FinishedAt\": null,\n            \"Cancelled\": false,\n            \"CancelledAt\": null,\n            \"CancellationReason\": null,\n            \"IsRecurrent\": false,\n            \"RecurrenceScheduleId\": null,\n            \"Action\": {\n                \"id\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                \"EnrollmentId\": \"413\",\n                \"Provider\": \"AHA\",\n                \"PlanName\": \"AHA-Heart Failure\",\n                \"PlanCode\": \"HeartFailure\",\n                \"Type\": \"Assessment\",\n                \"Category\": \"Assessment\",\n                \"ProviderActionId\": \"2010\",\n                \"Title\": \"Status check\",\n                \"Description\": \"\",\n                \"Url\": null,\n                \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                \"StartedAt\": null,\n                \"CompletedAt\": null,\n                \"Comments\": null,\n                \"Sequence\": 2,\n                \"Frequency\": 81,\n                \"Status\": \"Pending\",\n                \"RawContent\": \"{\\\"code\\\":\\\"2010\\\",\\\"description\\\":\\\"\\\",\\\"id\\\":301,\\\"items\\\":[{\\\"code\\\":\\\"q1\\\",\\\"id\\\":\\\"1.1\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":1,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for a scheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q2\\\",\\\"id\\\":\\\"1.2\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":2,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for an unscheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q3\\\",\\\"id\\\":\\\"1.3\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":3,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had a change in your medications ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q4\\\",\\\"id\\\":\\\"1.4\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":4,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"A new or worsening symptom ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q5\\\",\\\"id\\\":\\\"1.5\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":5,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been given a new diagnosis ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q6\\\",\\\"id\\\":\\\"1.6\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":6,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Gone to an emergency department ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q7\\\",\\\"id\\\":\\\"1.7\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":7,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been hospitalized for a heart-related reason ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q8\\\",\\\"id\\\":\\\"1.8\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":8,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had heart-related surgical procedure ?\\\",\\\"type\\\":\\\"boolean\\\"}],\\\"language\\\":{\\\"en_uk\\\":{\\\"title\\\":\\\"Status check\\\"}},\\\"logoUrl\\\":\\\"\\\",\\\"status\\\":\\\"PENDING\\\",\\\"type\\\":\\\"Questionnaire\\\",\\\"version\\\":\\\"1.0.0\\\"}\",\n                \"Assessment\": {\n                    \"id\": \"e17e23a9-4fd7-4e56-bd6a-280773323df7\",\n                    \"Type\": \"Careplan\",\n                    \"DisplayCode\": \"Assessment#rj4c69bdyuiatn2sg057iesf:413:2022-07-17\",\n                    \"Title\": \"\",\n                    \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                    \"AssessmentTemplateId\": \"16d0c5e3-2327-4cf8-a48d-16cc3c959392\",\n                    \"Provider\": \"AHA\",\n                    \"ProviderEnrollmentId\": \"413\",\n                    \"ProviderAssessmentCode\": \"2010\",\n                    \"ProviderAssessmentId\": null,\n                    \"Status\": \"Pending\",\n                    \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                    \"CreatedAt\": \"2022-04-28T16:56:28.028Z\",\n                    \"ParentActivityId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                    \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                    \"CurrentNodeId\": \"8012c6f0-3f35-4082-a17f-226dd557d884\"\n                }\n            }\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-5741553366\",\n        \"Email\": null,\n        \"UserName\": \"rdrrcw2978\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651164264,\n        \"exp\": 1653756264\n    },\n    \"Context\": \"UserTask.GetById\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
										}
									]
								},
								{
									"name": "Get task by id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
													"    var assessmentId = jsonRes.Data.UserTask.Action.Assessment.id;",
													"    var assessmentTemplateId = jsonRes.Data.UserTask.Action.Assessment.AssessmentTemplateId;",
													"    pm.environment.set(\"CAREPLAN_ASSESSMENT_ID\", assessmentId);",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", assessmentTemplateId);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"User Task is created\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('UserTask');",
													"    pm.expect(jsonRes.Data.UserTask).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"id\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"DisplayId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"UserId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Task\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionType\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ActionId\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledStartTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"ScheduledEndTime\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"Status\");",
													"    pm.expect(jsonRes.Data.UserTask).to.have.property(\"IsRecurrent\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/user-tasks/{{USER_TASK_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"user-tasks",
												"{{USER_TASK_ID}}"
											]
										},
										"description": "Gets list of User Task records"
									},
									"response": [
										{
											"name": "Get assessment task by id",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/user-tasks/{{CAREPLAN_ASSESSMENT_TASK_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"user-tasks",
														"{{CAREPLAN_ASSESSMENT_TASK_ID}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "4613"
												},
												{
													"key": "ETag",
													"value": "W/\"1205-XpHSU+5OkPuSgXifTUMeVO5+LLY\""
												},
												{
													"key": "Date",
													"value": "Thu, 28 Apr 2022 16:56:28 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"User task retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"UserTask\": {\n            \"id\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n            \"DisplayId\": \"AHA-Heart Failure-2010\",\n            \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n            \"Task\": \"Status check\",\n            \"Description\": null,\n            \"Category\": \"Assessment\",\n            \"ActionType\": \"Careplan\",\n            \"ActionId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n            \"ScheduledStartTime\": \"2022-07-17T01:30:01.000Z\",\n            \"ScheduledEndTime\": \"2022-07-17T17:30:00.000Z\",\n            \"Status\": \"Pending\",\n            \"Started\": false,\n            \"StartedAt\": null,\n            \"Finished\": false,\n            \"FinishedAt\": null,\n            \"Cancelled\": false,\n            \"CancelledAt\": null,\n            \"CancellationReason\": null,\n            \"IsRecurrent\": false,\n            \"RecurrenceScheduleId\": null,\n            \"Action\": {\n                \"id\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                \"EnrollmentId\": \"413\",\n                \"Provider\": \"AHA\",\n                \"PlanName\": \"AHA-Heart Failure\",\n                \"PlanCode\": \"HeartFailure\",\n                \"Type\": \"Assessment\",\n                \"Category\": \"Assessment\",\n                \"ProviderActionId\": \"2010\",\n                \"Title\": \"Status check\",\n                \"Description\": \"\",\n                \"Url\": null,\n                \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                \"StartedAt\": null,\n                \"CompletedAt\": null,\n                \"Comments\": null,\n                \"Sequence\": 2,\n                \"Frequency\": 81,\n                \"Status\": \"Pending\",\n                \"RawContent\": \"{\\\"code\\\":\\\"2010\\\",\\\"description\\\":\\\"\\\",\\\"id\\\":301,\\\"items\\\":[{\\\"code\\\":\\\"q1\\\",\\\"id\\\":\\\"1.1\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":1,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for a scheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q2\\\",\\\"id\\\":\\\"1.2\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":2,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Seen your physician for an unscheduled visit ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q3\\\",\\\"id\\\":\\\"1.3\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":3,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had a change in your medications ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q4\\\",\\\"id\\\":\\\"1.4\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":4,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"A new or worsening symptom ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q5\\\",\\\"id\\\":\\\"1.5\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":5,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been given a new diagnosis ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q6\\\",\\\"id\\\":\\\"1.6\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":6,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Gone to an emergency department ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q7\\\",\\\"id\\\":\\\"1.7\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":7,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Been hospitalized for a heart-related reason ?\\\",\\\"type\\\":\\\"boolean\\\"},{\\\"code\\\":\\\"q8\\\",\\\"id\\\":\\\"1.8\\\",\\\"options\\\":[{\\\"code\\\":\\\"yes\\\",\\\"display\\\":\\\"Yes\\\",\\\"sequence\\\":1},{\\\"code\\\":\\\"no\\\",\\\"display\\\":\\\"No\\\",\\\"sequence\\\":2}],\\\"sequence\\\":8,\\\"settings\\\":{\\\"required\\\":true},\\\"title\\\":\\\"Had heart-related surgical procedure ?\\\",\\\"type\\\":\\\"boolean\\\"}],\\\"language\\\":{\\\"en_uk\\\":{\\\"title\\\":\\\"Status check\\\"}},\\\"logoUrl\\\":\\\"\\\",\\\"status\\\":\\\"PENDING\\\",\\\"type\\\":\\\"Questionnaire\\\",\\\"version\\\":\\\"1.0.0\\\"}\",\n                \"Assessment\": {\n                    \"id\": \"e17e23a9-4fd7-4e56-bd6a-280773323df7\",\n                    \"Type\": \"Careplan\",\n                    \"DisplayCode\": \"Assessment#rj4c69bdyuiatn2sg057iesf:413:2022-07-17\",\n                    \"Title\": \"\",\n                    \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n                    \"AssessmentTemplateId\": \"16d0c5e3-2327-4cf8-a48d-16cc3c959392\",\n                    \"Provider\": \"AHA\",\n                    \"ProviderEnrollmentId\": \"413\",\n                    \"ProviderAssessmentCode\": \"2010\",\n                    \"ProviderAssessmentId\": null,\n                    \"Status\": \"Pending\",\n                    \"ScheduledAt\": \"2022-07-17T00:00:00.000Z\",\n                    \"CreatedAt\": \"2022-04-28T16:56:28.028Z\",\n                    \"ParentActivityId\": \"9b1286bd-59c1-40d0-aecb-538b33d724cf\",\n                    \"UserTaskId\": \"6d7b84bd-d4d7-4809-bb9f-b7d22acbc5e2\",\n                    \"CurrentNodeId\": \"8012c6f0-3f35-4082-a17f-226dd557d884\"\n                }\n            }\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-5741553366\",\n        \"Email\": null,\n        \"UserName\": \"rdrrcw2978\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651164264,\n        \"exp\": 1653756264\n    },\n    \"Context\": \"UserTask.GetById\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
										}
									]
								},
								{
									"name": "Get assessment by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"USER_TASK_ID\", jsonRes.Data.UserTask.id);",
													"    var assessmentId = jsonRes.Data.UserTask.Action.Assessment.id;",
													"    pm.environment.set(\"CAREPLAN_ASSESSMENT_ID\", assessmentId);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"User Task is created\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"id\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"DisplayCode\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"Type\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"Title\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"PatientUserId\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"AssessmentTemplateId\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"Provider\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"ProviderEnrollmentId\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"ProviderAssessmentCode\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"Status\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"ScheduledAt\");",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property(\"UserTaskId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}"
											]
										},
										"description": "Gets list of User Task records"
									},
									"response": [
										{
											"name": "Get assessment by id",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{CAREPLAN_ASSESSMENT_ID}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "1192"
												},
												{
													"key": "ETag",
													"value": "W/\"4a8-mMVURClYfUA+nQeLKu6U3f86XB8\""
												},
												{
													"key": "Date",
													"value": "Thu, 28 Apr 2022 16:45:26 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Assessment record retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"Assessment\": {\n            \"id\": \"a38faf73-c506-4b36-8053-11d7173b3751\",\n            \"Type\": \"Careplan\",\n            \"DisplayCode\": \"Assessment#7spig2sqgbe4mj6ww8s4ryze:413:2022-07-20\",\n            \"Title\": \"\",\n            \"Description\": null,\n            \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n            \"AssessmentTemplateId\": \"360c99c9-225d-4d4d-9dd3-78c39ea9e053\",\n            \"Provider\": \"AHA\",\n            \"ProviderEnrollmentId\": \"413\",\n            \"ProviderAssessmentCode\": \"16331\",\n            \"ProviderAssessmentId\": null,\n            \"Status\": \"Pending\",\n            \"ScheduledAt\": \"2022-07-20T00:00:00.000Z\",\n            \"CreatedAt\": \"2022-04-28T16:45:15.000Z\",\n            \"StartedAt\": null,\n            \"FinishedAt\": null,\n            \"ParentActivityId\": \"eb6e1565-c0e0-4754-9321-5ec5435aa9e6\",\n            \"UserTaskId\": \"0c0b9ce3-abe1-4880-bc06-e1527e29a382\",\n            \"CurrentNodeId\": \"23e788f0-cacd-4305-8e9b-4b5a71bdf835\",\n            \"UserResponses\": []\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-5741553366\",\n        \"Email\": null,\n        \"UserName\": \"rdrrcw2978\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651164264,\n        \"exp\": 1653756264\n    },\n    \"Context\": \"Assessment.GetById\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
										}
									]
								},
								{
									"name": "Start assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment is started and next question is returned\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Next');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/start",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"start"
											]
										}
									},
									"response": [
										{
											"name": "Start assessment",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/start",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{CAREPLAN_ASSESSMENT_ID}}",
														"start"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "1428"
												},
												{
													"key": "ETag",
													"value": "W/\"594-rDO+PHNSCN8D/kBq6KeUQkmsqhc\""
												},
												{
													"key": "Date",
													"value": "Thu, 28 Apr 2022 16:57:08 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Assessment started successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"Next\": {\n            \"id\": \"68bfd1e9-cc2a-4537-98a4-dc959aa04f99\",\n            \"DisplayCode\": \"QNode#6cg0eif6wzzntseg5cmpofm1\",\n            \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n            \"AssessmentTemplateId\": \"16d0c5e3-2327-4cf8-a48d-16cc3c959392\",\n            \"ParentNodeId\": \"8012c6f0-3f35-4082-a17f-226dd557d884\",\n            \"AssessmentId\": \"e17e23a9-4fd7-4e56-bd6a-280773323df7\",\n            \"Sequence\": 1,\n            \"NodeType\": \"Question\",\n            \"Title\": \"Seen your physician for a scheduled visit ?\",\n            \"Description\": null,\n            \"ExpectedResponseType\": \"Single Choice Selection\",\n            \"Options\": [\n                {\n                    \"id\": \"14c71343-96b4-47ca-90f0-7f05028cac33\",\n                    \"NodeId\": \"68bfd1e9-cc2a-4537-98a4-dc959aa04f99\",\n                    \"DisplayCode\": \"QNode#6cg0eif6wzzntseg5cmpofm1:Option#1\",\n                    \"ProviderGivenCode\": \"yes\",\n                    \"Text\": \"Yes\",\n                    \"ImageUrl\": null,\n                    \"Sequence\": 1\n                },\n                {\n                    \"id\": \"10be0ff9-09b9-4ab5-8d84-b9ef5d86658c\",\n                    \"NodeId\": \"68bfd1e9-cc2a-4537-98a4-dc959aa04f99\",\n                    \"DisplayCode\": \"QNode#6cg0eif6wzzntseg5cmpofm1:Option#2\",\n                    \"ProviderGivenCode\": \"no\",\n                    \"Text\": \"No\",\n                    \"ImageUrl\": null,\n                    \"Sequence\": 2\n                }\n            ],\n            \"ProviderGivenCode\": \"q1\"\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-5741553366\",\n        \"Email\": null,\n        \"UserName\": \"rdrrcw2978\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651164264,\n        \"exp\": 1653756264\n    },\n    \"Context\": \"Assessment.StartAssessment\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
										}
									]
								},
								{
									"name": "Try to start assessment again",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is unsuccessfull\", function () {",
													"    pm.response.to.have.status(400);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('failure');",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/start",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get next question",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment is returned\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Next');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/questions/next",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"questions",
												"next"
											]
										}
									},
									"response": [
										{
											"name": "Get next question",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/questions/next",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{CAREPLAN_ASSESSMENT_ID}}",
														"questions",
														"next"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Security-Policy",
													"value": "default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
												},
												{
													"key": "Cross-Origin-Embedder-Policy",
													"value": "require-corp"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "Expect-CT",
													"value": "max-age=0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "no-referrer"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "1447"
												},
												{
													"key": "ETag",
													"value": "W/\"5a7-onEwte5CVL29H1w3lKrZQInlpYQ\""
												},
												{
													"key": "Date",
													"value": "Thu, 28 Apr 2022 16:59:26 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"Status\": \"success\",\n    \"Message\": \"Assessment next question retrieved successfully!\",\n    \"HttpCode\": 200,\n    \"Data\": {\n        \"Next\": {\n            \"id\": \"3bc943ed-4ef6-4413-9e43-60ec6ab7917d\",\n            \"DisplayCode\": \"QNode#1hx5muen5k1h7jzkzcfpfpcg\",\n            \"PatientUserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n            \"AssessmentTemplateId\": \"16d0c5e3-2327-4cf8-a48d-16cc3c959392\",\n            \"ParentNodeId\": \"8012c6f0-3f35-4082-a17f-226dd557d884\",\n            \"AssessmentId\": \"e17e23a9-4fd7-4e56-bd6a-280773323df7\",\n            \"Sequence\": 2,\n            \"NodeType\": \"Question\",\n            \"Title\": \"Seen your physician for an unscheduled visit ?\",\n            \"Description\": null,\n            \"ExpectedResponseType\": \"Single Choice Selection\",\n            \"Options\": [\n                {\n                    \"id\": \"4369662c-8992-4f43-b58c-cc85be3c0089\",\n                    \"NodeId\": \"3bc943ed-4ef6-4413-9e43-60ec6ab7917d\",\n                    \"DisplayCode\": \"QNode#1hx5muen5k1h7jzkzcfpfpcg:Option#1\",\n                    \"ProviderGivenCode\": \"yes\",\n                    \"Text\": \"Yes\",\n                    \"ImageUrl\": null,\n                    \"Sequence\": 1\n                },\n                {\n                    \"id\": \"ea5d6927-1bf9-4a2c-a243-ee96a2377d4a\",\n                    \"NodeId\": \"3bc943ed-4ef6-4413-9e43-60ec6ab7917d\",\n                    \"DisplayCode\": \"QNode#1hx5muen5k1h7jzkzcfpfpcg:Option#2\",\n                    \"ProviderGivenCode\": \"no\",\n                    \"Text\": \"No\",\n                    \"ImageUrl\": null,\n                    \"Sequence\": 2\n                }\n            ],\n            \"ProviderGivenCode\": \"q2\"\n        }\n    },\n    \"Client\": {\n        \"ClientName\": \"REAN Foundation - Internal API client\",\n        \"ClientCode\": \"REANINTR\",\n        \"IsPrivileged\": false\n    },\n    \"User\": {\n        \"UserId\": \"a8d76b26-b278-44dc-b89f-93c7f02063c9\",\n        \"DisplayName\": \"unknown\",\n        \"Phone\": \"+91-5741553366\",\n        \"Email\": null,\n        \"UserName\": \"rdrrcw2978\",\n        \"CurrentRoleId\": 2,\n        \"iat\": 1651164264,\n        \"exp\": 1653756264\n    },\n    \"Context\": \"Assessment.GetNextQuestion\",\n    \"ClientIps\": [\n        \"::1\"\n    ],\n    \"APIVersion\": \"0.1.000\"\n}"
										}
									]
								},
								{
									"name": "Get question by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment is returned\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Question');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer next question - Biometrics",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Biometrics\",\r\n    \"Answer\": [\r\n        {\r\n            \"BiometricsType\": \"Blood Glucose\",\r\n            \"Value\": {\r\n                \"BloodGlucose\": 98,\r\n                \"Unit\": \"mg|dL\",\r\n                \"RecordDate\": \"2021-09-02\"\r\n            }\r\n        },\r\n                {\r\n            \"BiometricsType\": \"Blood Oxygen Saturation\",\r\n            \"Value\": {\r\n                \"BloodOxygenSaturation\": 98,\r\n                \"Unit\": \"%\",\r\n                \"RecordDate\": \"2021-09-02\"\r\n            }\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer next question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": \"Done\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer next question - Single choice selection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);\r",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer next question - message acknowledgement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);\r",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Ok\",\r\n    \"Answer\": \"Ok\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer question list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Answers\": [\r\n        {\r\n            \"QuestionId\": \"9b598968-c14e-4a34-9c28-0de645ffe53f\",\r\n            \"ResponseType\": \"Text\",\r\n            \"Answer\": \"Done\"\r\n        },\r\n        {\r\n            \"QuestionId\": \"9b598968-c14e-4a34-9c28-0de645ffe53f\",\r\n            \"ResponseType\": \"Single Choice Selection\",\r\n            \"Answer\": 1\r\n        },\r\n        {\r\n            \"QuestionId\": \"9b598968-c14e-4a34-9c28-0de645ffe53f\",\r\n            \"ResponseType\": \"Biometrics\",\r\n            \"Answer\": [\r\n                {\r\n                    \"BiometricsType\": \"Blood Glucose\",\r\n                    \"Value\": {\r\n                        \"BloodGlucose\": 98,\r\n                        \"Unit\": \"mg|dL\",\r\n                        \"RecordDate\": \"2021-09-02\"\r\n                    }\r\n                },\r\n                {\r\n                    \"BiometricsType\": \"Blood Oxygen Saturation\",\r\n                    \"Value\": {\r\n                        \"BloodOxygenSaturation\": 98,\r\n                        \"Unit\": \"%\",\r\n                        \"RecordDate\": \"2021-09-02\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{CAREPLAN_ASSESSMENT_ID}}/question-lists/{{ASSESSMENT_LIST_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{CAREPLAN_ASSESSMENT_ID}}",
												"question-lists",
												"{{ASSESSMENT_LIST_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Care plans tasks as user tasks",
							"item": [
								{
									"name": "Fetch careplan tasks",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/care-plans/{{CAREPLAN_ID}}/fetch-tasks",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"care-plans",
												"{{CAREPLAN_ID}}",
												"fetch-tasks"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Health-priorities / Goals / Action plans",
							"item": [
								{
									"name": "Priority",
									"item": [
										{
											"name": "Get Priority Types",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    var types = jsonRes.Data.PriorityTypes;\r",
															"    for(var i = 0; i < types.length; i++) {\r",
															"        var t = types[i].Type;\r",
															"        var str = \"HEALTH_PRIORITY_TYPE_\" + i.toString();\r",
															"        pm.environment.set(str, t);\r",
															"    }\r",
															"    pm.environment.set(\"HEALTH_PRIORITY_TYPE\", types[1].Type)\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"List of health priority types is returned\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('PriorityTypes');\r",
															"    pm.expect(jsonRes.Data.PriorityTypes.length).greaterThan(0);\r",
															"\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/types/priorities",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"types",
														"priorities"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create priority",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"HEALTH_PRIORITY_ID\", jsonRes.Data.HealthPriority.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"New Health pririty record is created\", function () {\r",
															"       \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('HealthPriority');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('PatientUserId');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('Source');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('ProviderEnrollmentId');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('Provider');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('ProviderCareplanName');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('ProviderCareplanCode');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('HealthPriorityType');\r",
															"    pm.expect(jsonRes.Data.HealthPriority).to.have.property('IsPrimary');\r",
															"\r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Provider\": \"{{CAREPLAN_PROVIDER}}\",\n    \"Source\": \"Careplan\",\n    \"ProviderEnrollmentId\": \"{{CAREPLAN_ENROLLMENT_ID}}\",\n    \"ProviderCareplanCode\": \"{{CAREPLAN_CODE}}\",\n    \"ProviderCareplanName\": \"{{CAREPLAN_CODE}}\",\n    \"HealthPriorityType\": \"{{HEALTH_PRIORITY_TYPE}}\",\n    \"IsPrimary\": true\n\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/patient-health-priorities",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-health-priorities"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get priorities for patient",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"List of health priorities for patient is returned\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Priorities');\r",
															"    pm.expect(jsonRes.Data.Priorities.length).greaterThan(0);\r",
															"\r",
															"});\r",
															"\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/patient-health-priorities/for-patient/{{PATIENT_USER_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-health-priorities",
														"for-patient",
														"{{PATIENT_USER_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search health priority records",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"List of health priority records is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('HealthPriorityRecords');",
															"    pm.expect(jsonRes.Data.HealthPriorityRecords.Items.length).greaterThan(0);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/patient-health-priorities/search?order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-health-priorities",
														"search"
													],
													"query": [
														{
															"key": "providerEnrollmentId",
															"value": "521",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"disabled": true
														},
														{
															"key": "providerCareplanName",
															"value": "",
															"disabled": true
														},
														{
															"key": "orderBy",
															"value": "patientUserId",
															"disabled": true
														},
														{
															"key": "order",
															"value": "ascending"
														},
														{
															"key": "pageIndex",
															"value": "0"
														},
														{
															"key": "itemsPerPage",
															"value": "25"
														},
														{
															"key": "providerCareplanCode",
															"value": "",
															"disabled": true
														},
														{
															"key": "patientUserId",
															"value": "{{PATIENT_USER_ID}}"
														},
														{
															"key": "healthPriorityType",
															"value": "Blood Pressure",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete health priority record by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Health priority record is deleted\", function () {",
															"",
															"    var expectedValue = true;",
															"    ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
															"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
															"",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/patient-health-priorities/{{HEALTH_PRIORITY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-health-priorities",
														"{{HEALTH_PRIORITY_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Goal",
									"item": [
										{
											"name": "Create goal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"PATIENT_GOAL_ID\", jsonRes.Data.Goal.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New Goal record is created\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Goal');",
															"    pm.expect(jsonRes.Data.Goal).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('id');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('PatientUserId');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('Provider');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('ProviderCareplanName');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('ProviderCareplanCode');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('HealthPriorityId');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAchieved');",
															"    pm.expect(jsonRes.Data.Goal).to.have.property('GoalAbandoned');",
															"",
															"});",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
															"pm.environment.set(\"GOAL_PATIENTUSERID\", userId);\r",
															"pm.environment.set(\"GOAL_CAREPLANID\", 1);\r",
															"pm.environment.set(\"GOAL_TYPECODE\", 1);\r",
															"pm.environment.set(\"GOAL_TYPENAME\", \"Name\");\r",
															"pm.environment.set(\"GOAL_GOALACHIEVED\", true);\r",
															"pm.environment.set(\"GOAL_GOALABANDONED\",false);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"ProviderEnrollmentId\": \"{{CAREPLAN_ENROLLMENT_ID}}\",\n    \"Provider\": \"{{CAREPLAN_PROVIDER}}\",\n    \"ProviderCareplanName\": \"{{CAREPLAN_NAME}}\",\n    \"ProviderCareplanCode\": \"{{CAREPLAN_CODE}}\",\n    \"Title\": \"Able to do more activities\",\n    \"Sequence\": 0,\n    \"HealthPriorityId\": \"{{HEALTH_PRIORITY_ID}}\",\n    \"GoalAchieved\": false,\n    \"GoalAbandoned\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/patient-goals",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-goals"
													]
												},
												"description": "Create new Goal record"
											},
											"response": []
										},
										{
											"name": "Get goals by priority",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"List of goals for prirority is returned\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Goals');\r",
															"    pm.expect(jsonRes.Data.Goals.length).greaterThan(0);\r",
															"\r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/patient-goals/by-priority/{{HEALTH_PRIORITY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-goals",
														"by-priority",
														"{{HEALTH_PRIORITY_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get goals for patient",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"List of goals for patient is returned\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('Goals');\r",
															"    pm.expect(jsonRes.Data.Goals.length).greaterThan(0);\r",
															"\r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/patient-goals/for-patient/{{PATIENT_USER_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-goals",
														"for-patient",
														"{{PATIENT_USER_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Action Plan",
									"item": [
										{
											"name": "Create action plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ACTION_PLAN_ID\", jsonRes.Data.ActionPlan.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"New Goal record is created\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('ActionPlan');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('PatientUserId');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('ProviderEnrollmentId');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('Provider');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('ProviderCareplanName');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('ProviderCareplanCode');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('GoalId');\r",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('ScheduledEndDate');\r",
															"});\r",
															"\r",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var year = (new Date()).getFullYear();\r",
															"year = year + 1;\r",
															"var today = new Date();\r",
															"today.setFullYear(year);\r",
															"var dt = today.toISOString().split('T')[0];\r",
															"pm.environment.set(\"ACTION_PAN_SCHEDULED_END_DATE\", dt);\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Source\": \"Self\",\n    \"ProviderEnrollmentId\": \"{{CAREPLAN_ENROLLMENT_ID}}\",\n    \"Provider\": \"{{CAREPLAN_PROVIDER}}\",\n    \"ProviderCareplanName\": \"{{CAREPLAN_NAME}}\",\n    \"ProviderCareplanCode\": \"{{CAREPLAN_CODE}}\",\n    \"GoalId\": \"{{PATIENT_GOAL_ID}}\",\n    \"Title\": \"Join a gym\",\n    \"ScheduledEndDate\": \"{{ACTION_PAN_SCHEDULED_END_DATE}}\"\n}\n"
												},
												"url": {
													"raw": "{{BASE_URL}}/action-plans",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"action-plans"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get action plans by goal id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"List of action plan for goal is returned\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('ActionPlans');\r",
															"    pm.expect(jsonRes.Data.ActionPlans.length).greaterThan(0);\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/patient-goals/by-priority/{{HEALTH_PRIORITY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"patient-goals",
														"by-priority",
														"{{HEALTH_PRIORITY_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get selected action plans by patient",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"List of action plans for patient is returned\", function () {\r",
															"\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('ActionPlans');\r",
															"    pm.expect(jsonRes.Data.ActionPlans.length).greaterThan(0);\r",
															"\r",
															"});\r",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/action-plans/for-patient/{{PATIENT_USER_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"action-plans",
														"for-patient",
														"{{PATIENT_USER_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search action plan records",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"List of action plan records is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('ActionPlanRecords');",
															"    pm.expect(jsonRes.Data.ActionPlanRecords.Items.length).greaterThan(0);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/action-plans/search?order=ascending&pageIndex=0&itemsPerPage=25&patientUserId={{PATIENT_USER_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"action-plans",
														"search"
													],
													"query": [
														{
															"key": "startedAt",
															"value": "2021-09-22",
															"disabled": true
														},
														{
															"key": "scheduledEndDate",
															"value": "2021-10-22",
															"disabled": true
														},
														{
															"key": "orderBy",
															"value": "",
															"disabled": true
														},
														{
															"key": "order",
															"value": "ascending"
														},
														{
															"key": "pageIndex",
															"value": "0"
														},
														{
															"key": "itemsPerPage",
															"value": "25"
														},
														{
															"key": "patientUserId",
															"value": "{{PATIENT_USER_ID}}"
														},
														{
															"key": "title",
															"value": "Participate in cardiac rehab",
															"disabled": true
														},
														{
															"key": "goalId",
															"value": "{{GOAL_ID}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update action plan record by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Updated action plan record is returned\", function () {",
															"",
															"    var expectedProviderEnrollmentId = 251;",
															"    var expectedTitle = \"Participate in cardiac rehab\";",
															"    var expectedScheduledEndDate = \"2022-04-08\";",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('ActionPlan');",
															"    pm.expect(jsonRes.Data.ActionPlan).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('ProviderEnrollmentId');",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.ActionPlan).to.have.property('ScheduledEndDate');",
															"",
															"    pm.expect(jsonRes.Data.ActionPlan.Title).equals(expectedTitle);",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Provider\": \"AHA\",\n    \"ProviderEnrollmentId\": \"251\",\n    \"Title\": \"Participate in cardiac rehab\",\n    \"CompletedAt\": \"2022-04-13\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/action-plans/{{ACTION_PLAN_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"action-plans",
														"{{ACTION_PLAN_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete action plan record by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Action plan record is deleted\", function () {",
															"",
															"    var expectedValue = true;",
															"    ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
															"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
															"",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/action-plans/{{ACTION_PLAN_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"action-plans",
														"{{ACTION_PLAN_ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "assessment",
					"item": [
						{
							"name": "Import new template",
							"item": [
								{
									"name": "Import template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment template is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"",
													"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ADMIN_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "Name",
													"type": "file",
													"src": "Heart-Failure (HF) Patient Survey.json"
												},
												{
													"key": "IsPublicResource",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessment-templates/import-file",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessment-templates",
												"import-file"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Run assessment from imported template",
							"item": [
								{
									"name": "Schedule a assessment from imported template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_ID\", jsonRes.Data.Assessment.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New assessment is created\", function () {",
													"   ",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Assessment');",
													"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Title');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('PatientUserId');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('AssessmentTemplateId');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Type');",
													"    ",
													"    pm.expect(jsonRes.Data.Assessment.Title).equals(\"A new assessment\");",
													"    pm.expect(jsonRes.Data.Assessment.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(jsonRes.Data.Assessment.AssessmentTemplateId).equals(expectedTemplateId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var today = (new Date()).toISOString().split('T')[0];\r",
													"pm.environment.set(\"TODAY\", today);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Title\": \"A new assessment\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"ScheduledDate\": \"{{TODAY}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment is started\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.Next).to.have.property('id');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/start",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the first question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"1- assessment questionis answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": \"180\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the second question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"2- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": \"120\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the third question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"3- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the fourth question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"4- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the fifth question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"5- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 0\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the sixth question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"6- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the seventh question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"7- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the eighth question - single choice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"8- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the ninth question - single choice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"9- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the tenth question - single choice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"10- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 2\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the eleventh question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"11- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 300\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the twelth question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 120\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the thirteenth question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"13- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 90\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the fourteenth question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"14- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 120\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the fifteenth question - Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"15- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 220\r\n}\r\n"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the sixteenth question - single choice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"    pm.expect(jsonRes.Message).to.eql('Assessment has completed successfully!');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 3\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer next question - Biometrics",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Biometrics\",\r\n    \"Answer\": [\r\n        {\r\n            \"BiometricsType\": \"Blood Glucose\",\r\n            \"Value\": {\r\n                \"BloodGlucose\": 98,\r\n                \"Unit\": \"mg|dL\",\r\n                \"RecordDate\": \"2021-09-02\"\r\n            }\r\n        },\r\n                {\r\n            \"BiometricsType\": \"Blood Oxygen Saturation\",\r\n            \"Value\": {\r\n                \"BloodOxygenSaturation\": 98,\r\n                \"Unit\": \"%\",\r\n                \"RecordDate\": \"2021-09-02\"\r\n            }\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assessment with scoring",
							"item": [
								{
									"name": "Create KCCQ Assessment Template",
									"item": [
										{
											"name": "Create KCCQ assessment template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"Quality of Life Questionnaire\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Quality of Life Questionnaire\",\n    \"Description\": \"Effect of heart failure on the life of a patient\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add list node - Q1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_03_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_LIST_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment list node is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 1/8. Effects of heart failure on daily activities.\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Node list\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Node list\",\r\n    \"Title\": \"Q 1/8. Effects of heart failure on daily activities.\",\r\n    \"ServeListNodeChildrenAtOnce\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 1.1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"   \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q1_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"1.1 How frequently do you take showering or bathing?\",\r\n    \"Description\": \"Unscheduled daily checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"extremely limited\",\r\n            \"Text\": \"Extremely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"quite a bit limited\",\r\n            \"Text\": \"Quite a bit limited\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"not at all limited\",\r\n            \"Text\": \"Not at all limited\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited for other reasons or did not do the activity\",\r\n            \"Text\": \"Limited for other reasons or did not do the activity\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 1.2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q1_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"1.2 How frequently do you walk 1 block on level ground?\",\r\n    \"Description\": \"Unscheduled daily checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"extremely limited\",\r\n            \"Text\": \"Extremely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"quite a bit limited\",\r\n            \"Text\": \"Quite a bit limited\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"not at all limited\",\r\n            \"Text\": \"Not at all limited\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited for other reasons or did not do the activity\",\r\n            \"Text\": \"Limited for other reasons or did not do the activity\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 1.3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_3_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q1_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"1.3 How frequently are you hurrying or jogging (as if to catch a bus)?\",\r\n    \"Description\": \"Unscheduled daily checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"extremely limited\",\r\n            \"Text\": \"Extremely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"quite a bit limited\",\r\n            \"Text\": \"Quite a bit limited\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"not at all limited\",\r\n            \"Text\": \"Not at all limited\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited for other reasons or did not do the activity\",\r\n            \"Text\": \"Limited for other reasons or did not do the activity\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 2/8. Over the past 2 weeks, how many times did you have swelling in your feet, ankles or legs when you woke up in the morning?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2/8. Over the past 2 weeks, how many times did you have swelling in your feet, ankles or legs when you woke up in the morning?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"every morning\",\r\n            \"Text\": \"Every morning\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template-  Q 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q3_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 3/8. Over the past 2 weeks, on average, how many times has fatigue limited your ability to do what you wanted?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3/8. Over the past 2 weeks, on average, how many times has fatigue limited your ability to do what you wanted?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"all of the time\",\r\n            \"Text\": \"All of the time\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"several times per day\",\r\n            \"Text\": \"Several times per day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"at least once a day\",\r\n            \"Text\": \"At least once a day\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 6\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 7\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q4_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 4/8. Over the past 2 weeks, on average, how many times has shortness of breath limited your ability to do what you wanted?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"all of the time\",\r\n            \"Text\": \"All of the time\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"several times per day\",\r\n            \"Text\": \"Several times per day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"at least once a day\",\r\n            \"Text\": \"At least once a day\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 6\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 7\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q5_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 5/8. Over the past 2 weeks, on average, how many times have you been forced to sleep sitting up in a chair or with at least 3 pillows to prop you up because of shortness of breath?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"every night\",\r\n            \"Text\": \"Every night\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q6_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 6/8. Over the past 2 weeks, how much has your heart failure limited your enjoyment of life?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n                    \"ProviderGivenCode\": \"it has extremely limited my enjoyment of life\",\r\n                    \"Text\": \"It has extremely limited my enjoyment of life\",\r\n                    \"Sequence\": 1\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"it has limited my enjoyment of life quite a bit\",\r\n                    \"Text\": \"It has limited my enjoyment of life quite a bit\",\r\n                    \"Sequence\": 2\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"it has moderately limited my enjoyment of life\",\r\n                    \"Text\": \"It has moderately limited my enjoyment of life\",\r\n                    \"Sequence\": 3\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"It has slightly limited my enjoyment of life\",\r\n                    \"Text\": \"It has slightly limited my enjoyment of life\",\r\n                    \"Sequence\": 4\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"it has not limited my enjoyment of life at all\",\r\n                    \"Text\": \"It has not limited my enjoyment of life at all\",\r\n                    \"Sequence\": 5\r\n                }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q7_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 7/8. If you had to spend the rest of your life with your heart failure the way it is right now, how would you feel about this?\",\r\n    \"Description\": \"Some random checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"not at all satisfied\",\r\n            \"Text\": \"Not at all satisfied\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"mostly dissatisfied\",\r\n            \"Text\": \"Mostly dissatisfied\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"DisplayCode\": \"QNode#6hyxsapbrvipn6az4giz1qbp:Option#3\",\r\n            \"ProviderGivenCode\": \"somewhat satisfied\",\r\n            \"Text\": \"Somewhat satisfied\",\r\n            \"ImageUrl\": null,\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"mostly satisfied\",\r\n            \"Text\": \"Mostly satisfied\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"completely satisfied\",\r\n            \"Text\": \"Completely satisfied\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add list node - Q 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_LIST_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment list node is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Node list\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Node list\",\r\n    \"Title\": \"Q 8/8. How much does your heart failure affect your lifestyle? Please indicate how your heart failure may have limited your participation in the following activities over the past 2 weeks.\",\r\n    \"ServeListNodeChildrenAtOnce\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 8.1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q8_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"8.1 How much does your heart failure affect your hobbies, recreational activities?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"severely limited\",\r\n            \"Text\": \"Severely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited quite a bit\",\r\n            \"Text\": \"Limited quite a bit\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"did not limit at all\",\r\n            \"Text\": \"Did not limit at all\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"does not apply or did not do for othereasons\",\r\n            \"Text\": \"Does not apply or did not do for other reasons\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 8.2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q8_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"8.2 How much does your heart failure affect your working or doing household chores?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"severely limited\",\r\n            \"Text\": \"Severely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited quite a bit\",\r\n            \"Text\": \"Limited quite a bit\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"did not limit at all\",\r\n            \"Text\": \"Did not limit at all\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"does not apply or did not do for othereasons\",\r\n            \"Text\": \"Does not apply or did not do for other reasons\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 8.3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_3_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q8_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"8.3 How much does your heart failure affect your visiting family or friends out of your home?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"severely limited\",\r\n            \"Text\": \"Severely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited quite a bit\",\r\n            \"Text\": \"Limited quite a bit\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"did not limit at all\",\r\n            \"Text\": \"Did not limit at all\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"does not apply or did not do for othereasons\",\r\n            \"Text\": \"Does not apply or did not do for other reasons\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get assessment template by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment template is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"KCCQ assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Careplan\");",
															"",
															"});",
															"",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add scoring to the assessment",
									"item": [
										{
											"name": "Add condition - Q 1.1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_03_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_LIST_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment list node is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Daily check list\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Node list\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"NodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q1_1_ID}}\",\r\n    \"ParentConditionId\": null,\r\n    \"ResolutionScore\": \"Node list\",\r\n    \"IsCompositeCondition\": false,\r\n    \"OperatorType\": \"Equal to\",\r\n    \"FirstOperand\": {\r\n        \"DataType\": \"Integer\",\r\n        \"Name\": \"Q 1.1 Received Index Value\",\r\n        \"Value\": null\r\n    },\r\n        \"SecondOperand\": {\r\n        \"DataType\": \"Integer\",\r\n        \"Name\": \"Q 1.1 Expcted Index Value\",\r\n        \"Value\": 1\r\n    }\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/scoring-conditions",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"scoring-conditions"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Ready-to-use assessments",
							"item": [
								{
									"name": "Cholesterol Demographic Assessment template Copy",
									"item": [
										{
											"name": "Create Cholesterol Demographic Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"Cholesterol Demographic assessment template\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Cholesterol Demographic assessment template\",\n    \"Description\": \"Taking location data of the patient.\",\n    \"DisplayCode\": \"AssessmtTmpl#choldemo\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 1/4. What is your race?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1/4. What is your race?\",\r\n    \"Description\": \"Taking idea about race\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"white\",\r\n            \"Text\": \"White\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"black\",\r\n            \"Text\": \"Black\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"american Indian or Alaska Native\",\r\n            \"Text\": \"American Indian or Alaska Native\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"asian Indian\",\r\n            \"Text\": \"Asian Indian\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"chinese\",\r\n            \"Text\": \"Chinese\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"filipino\",\r\n            \"Text\": \"Filipino\",\r\n            \"Sequence\": 6\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"japanese\",\r\n            \"Text\": \"Japanese\",\r\n            \"Sequence\": 7\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"korean\",\r\n            \"Text\": \"Korean\",\r\n            \"Sequence\": 8\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"vietnamese\",\r\n            \"Text\": \"Vietnamese\",\r\n            \"Sequence\": 9\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"other Asian\",\r\n            \"Text\": \"Other Asian\",\r\n            \"Sequence\": 10\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"hawaiian\",\r\n            \"Text\": \"Hawaiian\",\r\n            \"Sequence\": 11\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"guamanian\",\r\n            \"Text\": \"Guamanian\",\r\n            \"Sequence\": 12\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"samoan\",\r\n            \"Text\": \"Samoan\",\r\n            \"Sequence\": 13\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"other Pacific Islander\",\r\n            \"Text\": \"Other Pacific Islander\",\r\n            \"Sequence\": 14\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 2/4. What is your ethnicity?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2/4. What is your ethnicity?\",\r\n    \"Description\": \"Taking data about social group of patient.\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"hispanic\",\r\n            \"Text\": \"Hispanic\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"latino\",\r\n            \"Text\": \"Latino\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"non Hispanic\",\r\n            \"Text\": \"Non Hispanic\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"hispanic and Latino\",\r\n            \"Text\": \"Hispanic and Latino\",\r\n            \"Sequence\": 4\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 3/4. What gender do you most identify with?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3/4. What gender do you most identify with?\",\r\n    \"Description\": \"Self realisation of gender\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"male\",\r\n            \"Text\": \"Male\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"female\",\r\n            \"Text\": \"Female\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"non-binary\",\r\n            \"Text\": \"Non-binary\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"prefer to self-describe\",\r\n            \"Text\": \"Prefer to self-describe\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"prefer to not answer\",\r\n            \"Text\": \"Prefer to not answer\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node -4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_04_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 4/4. What is your zip code?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Text\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 4/4. What is your zip code?\",\r\n    \"Description\": \"Postal code\",\r\n    \"QueryResponseType\": \"Text\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Cholesterol Nutrition assessment template",
									"item": [
										{
											"name": "Create Cholesterol Nutrition assessmen",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"Nutrition assessment template\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Nutrition assessment template\",\n    \"Description\": \"Food checklist for better nutrition\",\n    \"DisplayCode\": \"AssessmtTmpl#cholNutri\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 1/5. Did you eat vegetables today?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1/5. Did you eat vegetables today?\",\r\n    \"Description\": \"Taking idea about the nutrition of the patient.\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 2/5. Did you eat fruit today?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2/5. Did you eat fruit today?\",\r\n    \"Description\": \"Taking idea about nutrition\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 3/5. Did you choose whole grains today?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3/5. Did you choose whole grains today?\",\r\n    \"Description\": \"Taking idea about nutrition\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 4/5. Did you choose water in place of sugary drinks today?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 4/5. Did you choose water in place of sugary drinks today?\",\r\n    \"Description\": \"Taking idea about nutrition\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n       {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node -5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_04_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 5/5. Did you select healthy sources of protein today? (legumes and nuts; fish and seafood; low-fat or non-fat dairy; unprocessed and lean poultry or meat)\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Text\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 5/5. Did you select healthy sources of protein today? (legumes and nuts; fish and seafood; low-fat or non-fat dairy; unprocessed and lean poultry or meat)\",\r\n    \"Description\": \"Taking idea about nutrition\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n       {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create KCCQ Assessment Template",
									"item": [
										{
											"name": "Create KCCQ assessment template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"Quality of Life Questionnaire\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Quality of Life Questionnaire\",\n    \"Description\": \"Effect of heart failure on the life of a patient\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add list node - Q1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_03_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_LIST_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment list node is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 1/8. Effects of heart failure on daily activities.\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Node list\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Node list\",\r\n    \"Title\": \"Q 1/8. Effects of heart failure on daily activities.\",\r\n    \"ServeListNodeChildrenAtOnce\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 1.1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"   \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q1_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"1.1 How frequently do you take showering or bathing?\",\r\n    \"Description\": \"Unscheduled daily checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"extremely limited\",\r\n            \"Text\": \"Extremely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"quite a bit limited\",\r\n            \"Text\": \"Quite a bit limited\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"not at all limited\",\r\n            \"Text\": \"Not at all limited\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited for other reasons or did not do the activity\",\r\n            \"Text\": \"Limited for other reasons or did not do the activity\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 1.2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q1_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"1.2 How frequently do you walk 1 block on level ground?\",\r\n    \"Description\": \"Unscheduled daily checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"extremely limited\",\r\n            \"Text\": \"Extremely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"quite a bit limited\",\r\n            \"Text\": \"Quite a bit limited\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"not at all limited\",\r\n            \"Text\": \"Not at all limited\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited for other reasons or did not do the activity\",\r\n            \"Text\": \"Limited for other reasons or did not do the activity\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 1.3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q1_3_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q1_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"1.3 How frequently are you hurrying or jogging (as if to catch a bus)?\",\r\n    \"Description\": \"Unscheduled daily checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"extremely limited\",\r\n            \"Text\": \"Extremely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"quite a bit limited\",\r\n            \"Text\": \"Quite a bit limited\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"not at all limited\",\r\n            \"Text\": \"Not at all limited\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited for other reasons or did not do the activity\",\r\n            \"Text\": \"Limited for other reasons or did not do the activity\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 2/8. Over the past 2 weeks, how many times did you have swelling in your feet, ankles or legs when you woke up in the morning?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2/8. Over the past 2 weeks, how many times did you have swelling in your feet, ankles or legs when you woke up in the morning?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"every morning\",\r\n            \"Text\": \"Every morning\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template-  Q 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q3_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Q 3/8. Over the past 2 weeks, on average, how many times has fatigue limited your ability to do what you wanted?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3/8. Over the past 2 weeks, on average, how many times has fatigue limited your ability to do what you wanted?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"all of the time\",\r\n            \"Text\": \"All of the time\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"several times per day\",\r\n            \"Text\": \"Several times per day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"at least once a day\",\r\n            \"Text\": \"At least once a day\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 6\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 7\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q4_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 4/8. Over the past 2 weeks, on average, how many times has shortness of breath limited your ability to do what you wanted?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"all of the time\",\r\n            \"Text\": \"All of the time\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"several times per day\",\r\n            \"Text\": \"Several times per day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"at least once a day\",\r\n            \"Text\": \"At least once a day\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 6\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 7\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q5_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 5/8. Over the past 2 weeks, on average, how many times have you been forced to sleep sitting up in a chair or with at least 3 pillows to prop you up because of shortness of breath?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"every night\",\r\n            \"Text\": \"Every night\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"3 or more times per week but not every day\",\r\n            \"Text\": \"3 or more times per week but not every day\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"1-2 times per week\",\r\n            \"Text\": \"1-2 times per week\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"less than once a week\",\r\n            \"Text\": \"Less than once a week\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"never over the past 2 weeks\",\r\n            \"Text\": \"Never over the past 2 weeks\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q6_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 6/8. Over the past 2 weeks, how much has your heart failure limited your enjoyment of life?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n                    \"ProviderGivenCode\": \"it has extremely limited my enjoyment of life\",\r\n                    \"Text\": \"It has extremely limited my enjoyment of life\",\r\n                    \"Sequence\": 1\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"it has limited my enjoyment of life quite a bit\",\r\n                    \"Text\": \"It has limited my enjoyment of life quite a bit\",\r\n                    \"Sequence\": 2\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"it has moderately limited my enjoyment of life\",\r\n                    \"Text\": \"It has moderately limited my enjoyment of life\",\r\n                    \"Sequence\": 3\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"It has slightly limited my enjoyment of life\",\r\n                    \"Text\": \"It has slightly limited my enjoyment of life\",\r\n                    \"Sequence\": 4\r\n                },\r\n                {\r\n                    \"ProviderGivenCode\": \"it has not limited my enjoyment of life at all\",\r\n                    \"Text\": \"It has not limited my enjoyment of life at all\",\r\n                    \"Sequence\": 5\r\n                }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to template- Q 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q7_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 7/8. If you had to spend the rest of your life with your heart failure the way it is right now, how would you feel about this?\",\r\n    \"Description\": \"Some random checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"not at all satisfied\",\r\n            \"Text\": \"Not at all satisfied\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"mostly dissatisfied\",\r\n            \"Text\": \"Mostly dissatisfied\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"DisplayCode\": \"QNode#6hyxsapbrvipn6az4giz1qbp:Option#3\",\r\n            \"ProviderGivenCode\": \"somewhat satisfied\",\r\n            \"Text\": \"Somewhat satisfied\",\r\n            \"ImageUrl\": null,\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"mostly satisfied\",\r\n            \"Text\": \"Mostly satisfied\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"completely satisfied\",\r\n            \"Text\": \"Completely satisfied\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add list node - Q 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_LIST_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment list node is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Node list\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Node list\",\r\n    \"Title\": \"Q 8/8. How much does your heart failure affect your lifestyle? Please indicate how your heart failure may have limited your participation in the following activities over the past 2 weeks.\",\r\n    \"ServeListNodeChildrenAtOnce\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 8.1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_1_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q8_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"8.1 How much does your heart failure affect your hobbies, recreational activities?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"severely limited\",\r\n            \"Text\": \"Severely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited quite a bit\",\r\n            \"Text\": \"Limited quite a bit\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"did not limit at all\",\r\n            \"Text\": \"Did not limit at all\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"does not apply or did not do for othereasons\",\r\n            \"Text\": \"Does not apply or did not do for other reasons\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 8.2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_2_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q8_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"8.2 How much does your heart failure affect your working or doing household chores?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"severely limited\",\r\n            \"Text\": \"Severely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited quite a bit\",\r\n            \"Text\": \"Limited quite a bit\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"did not limit at all\",\r\n            \"Text\": \"Did not limit at all\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"does not apply or did not do for othereasons\",\r\n            \"Text\": \"Does not apply or did not do for other reasons\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node to list- Q 8.3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"KCCQ_ASSESSMENT_NODE_Q8_3_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{KCCQ_ASSESSMENT_NODE_Q8_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"8.3 How much does your heart failure affect your visiting family or friends out of your home?\",\r\n    \"Description\": \"Checks over past 2 weeks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"severely limited\",\r\n            \"Text\": \"Severely limited\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"limited quite a bit\",\r\n            \"Text\": \"Limited quite a bit\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"moderately limited\",\r\n            \"Text\": \"Moderately limited\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"slightly limited\",\r\n            \"Text\": \"Slightly limited\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"did not limit at all\",\r\n            \"Text\": \"Did not limit at all\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"does not apply or did not do for othereasons\",\r\n            \"Text\": \"Does not apply or did not do for other reasons\",\r\n            \"Sequence\": 6\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get assessment template by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment template is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"KCCQ assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Effect of heart failure on the life of a patient\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Careplan\");",
															"",
															"});",
															"",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Stroke Demographic Assessment template",
									"item": [
										{
											"name": "Create Stroke Demographic Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"Stroke Demographic assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Taking location data of the patient.\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Stroke Demographic assessment template\",\n    \"Description\": \"Taking location data of the patient.\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1/10. What is your race?\",\r\n    \"Description\": \"Taking idea about race\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"white\",\r\n            \"Text\": \"White\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"black\",\r\n            \"Text\": \"Black\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"american Indian or Alaska Native\",\r\n            \"Text\": \"American Indian or Alaska Native\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"asian Indian\",\r\n            \"Text\": \"Asian Indian\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"chinese\",\r\n            \"Text\": \"Chinese\",\r\n            \"Sequence\": 5\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"filipino\",\r\n            \"Text\": \"Filipino\",\r\n            \"Sequence\": 6\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"japanese\",\r\n            \"Text\": \"Japanese\",\r\n            \"Sequence\": 7\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"korean\",\r\n            \"Text\": \"Korean\",\r\n            \"Sequence\": 8\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"vietnamese\",\r\n            \"Text\": \"Vietnamese\",\r\n            \"Sequence\": 9\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"other Asian\",\r\n            \"Text\": \"Other Asian\",\r\n            \"Sequence\": 10\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"hawaiian\",\r\n            \"Text\": \"Hawaiian\",\r\n            \"Sequence\": 11\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"guamanian\",\r\n            \"Text\": \"Guamanian\",\r\n            \"Sequence\": 12\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"samoan\",\r\n            \"Text\": \"Samoan\",\r\n            \"Sequence\": 13\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"other Pacific Islander\",\r\n            \"Text\": \"Other Pacific Islander\",\r\n            \"Sequence\": 14\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2/10. What is your ethnicity?\",\r\n    \"Description\": \"Taking data about social group of patient.\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"hispanic\",\r\n            \"Text\": \"Hispanic\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"latino\",\r\n            \"Text\": \"Latino\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"non Hispanic\",\r\n            \"Text\": \"Non Hispanic\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"hispanic and Latino\",\r\n            \"Text\": \"Hispanic and Latino\",\r\n            \"Sequence\": 4\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3/10. What gender do you most identify with?\",\r\n    \"Description\": \"Self realisation of gender\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"male\",\r\n            \"Text\": \"Male\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"female\",\r\n            \"Text\": \"Female\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"non-binary\",\r\n            \"Text\": \"Non-binary\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"prefer to self-describe\",\r\n            \"Text\": \"Prefer to self-describe\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"prefer to not answer\",\r\n            \"Text\": \"Prefer to not answer\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_04_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Text\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 4/10. What is your zip code?\",\r\n    \"Description\": \"Postal code\",\r\n    \"QueryResponseType\": \"Text\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 5/10. Are you a stroke survivor or caregiver?\",\r\n    \"Description\": \"survivor or caregiver\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"survivor\",\r\n            \"Text\": \"Survivor\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"caregiver\",\r\n            \"Text\": \"Caregiver\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 6/10. What is your marital status?\",\r\n    \"Description\": \"Patient's marital status\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"single\",\r\n            \"Text\": \"Single\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"married\",\r\n            \"Text\": \"Married\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"divorced\",\r\n            \"Text\": \"Divorced\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"widowed\",\r\n            \"Text\": \"Widowed\",\r\n            \"Sequence\": 4\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 7/10. Do you live alone?\",\r\n    \"Description\": \"Information about social life\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 8/10. Did you work prior to your stroke?\",\r\n    \"Description\": \"Taking idea about previous life of patient\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 9/10. Do you currently smoke, or have you smoked cigarettes, vaped, or used tobacco products over the past year?\",\r\n    \"Description\": \"Information about consumption of tobacco\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 10/10. Do you drink more than 1 alcoholic drink a day?\",\r\n    \"Description\": \"Information about consumption of alcohol\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Stroke medical assessment",
									"item": [
										{
											"name": "Create Medical details Assessment Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"Medical details\");",
															"",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Medical details\",\n    \"Description\": \"Collecting medication info of the patient\",\n    \"DisplayCode\": \"AssessmtTmpl#strokeMed\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1/3. What type of stroke did you have?\",\r\n    \"Description\": \"Checklist for past health related problems\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Ischemic\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Hemorrhagic\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Transient Ischemic Attack\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Unknown\",\r\n            \"Sequence\": 4\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2/3. Have you ever been told by your healthcare professional that you have any of the following (check all that apply)?\",\r\n    \"Description\": \"Checklist for past health related problems\",\r\n    \"QueryResponseType\": \"Multi Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"High blood pressure\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"High cholesterol\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Diabetes\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Atrial fibrillation\",\r\n            \"Sequence\": 4\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_04_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Text\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 3/3. Prior to this stroke, have you ever been told by a doctor that you have had a stroke, a transient ischemic attack (sometimes called a TIA or mini-stroke), or a heart attack?\",\r\n    \"Description\": \"Taking idea about nutrition\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n       {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Cholesterol medical details assessment",
									"item": [
										{
											"name": "Create Medical details Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"Cholesterol medical details assessment template\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"Cholesterol medical details assessment template\",\n    \"Description\": \"Collecting medication info of the patient\",\n    \"DisplayCode\": \"AssessmtTmpl#cholMed\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node- 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 1/2. Have you ever been told by your healthcare provider you have or had any of the following conditions or events?\",\r\n    \"Description\": \"Checklist for past health related problems\",\r\n    \"QueryResponseType\": \"Multi Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"High blood pressure\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"High cholesterol\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Diabetes\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Atrial fibrillation\",\r\n            \"Sequence\": 4\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node - text 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_04_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Text\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Q 2/2. What medications are you currently taking?\",\r\n    \"Description\": \"Please type your medications and select from the drop down list.\",\r\n    \"QueryResponseType\": \"Text\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "KoboToolbox integration",
							"item": [
								{
									"name": "Connect to kobo-toolbox api",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"KOBO_TOOLBOX_BASE_URL\", \"https://kc.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_SECONDARY_URL\", \"https://kf.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_TOKEN\", \"058f77bc58acfc6874b3bca738b438f0f45d9c31\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"BaseUrl\":\"{{KOBO_TOOLBOX_BASE_URL}}\",\r\n    \"SecondaryUrl\":\"{{KOBO_TOOLBOX_SECONDARY_URL}}\",\r\n    \"Token\":\"{{KOBO_TOOLBOX_TOKEN}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/forms/provider/KoboToolbox/connect",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"forms",
												"provider",
												"KoboToolbox",
												"connect"
											]
										},
										"description": "Add an emergency event."
									},
									"response": []
								},
								{
									"name": "Get forms list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"KOBO_TOOLBOX_BASE_URL\", \"https://kc.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_SECONDARY_URL\", \"https://kf.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_TOKEN\", \"058f77bc58acfc6874b3bca738b438f0f45d9c31\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"EMERGENCY_EVENT_ID\", jsonRes.Data.EmergencyEvent.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Kobo forms list is retrieved\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('Forms');\r",
													"    pm.expect(jsonRes.Data.Forms).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.Forms.length).to.be.greaterThan(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"BaseUrl\":\"{{KOBO_TOOLBOX_BASE_URL}}\",\r\n    \"SecondaryUrl\":\"{{KOBO_TOOLBOX_SECONDARY_URL}}\",\r\n    \"Token\":\"{{KOBO_TOOLBOX_TOKEN}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/forms/provider/KoboToolbox/forms",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"forms",
												"provider",
												"KoboToolbox",
												"forms"
											]
										},
										"description": "Add an emergency event."
									},
									"response": []
								},
								{
									"name": "import form as assessment template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"KOBO_TOOLBOX_BASE_URL\", \"https://kc.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_SECONDARY_URL\", \"https://kf.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_TOKEN\", \"058f77bc58acfc6874b3bca738b438f0f45d9c31\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"Import kobo-toolbox form\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('DisplayCode');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Provider');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('ProviderAssessmentCode');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('RootNodeId');\r",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('FileResourceId');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"BaseUrl\":\"{{KOBO_TOOLBOX_BASE_URL}}\",\r\n    \"SecondaryUrl\":\"{{KOBO_TOOLBOX_SECONDARY_URL}}\",\r\n    \"Token\":\"{{KOBO_TOOLBOX_TOKEN}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/forms/provider/KoboToolbox/import-form/1023823",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"forms",
												"provider",
												"KoboToolbox",
												"import-form",
												"1023823"
											]
										},
										"description": "Add an emergency event."
									},
									"response": []
								},
								{
									"name": "import submitted form data as assessment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"KOBO_TOOLBOX_BASE_URL\", \"https://kc.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_SECONDARY_URL\", \"https://kf.kobotoolbox.org/api/\");\r",
													"pm.environment.set(\"KOBO_TOOLBOX_TOKEN\", \"058f77bc58acfc6874b3bca738b438f0f45d9c31\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"description": "API key for client authentication",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"BaseUrl\":\"{{KOBO_TOOLBOX_BASE_URL}}\",\r\n    \"SecondaryUrl\":\"{{KOBO_TOOLBOX_SECONDARY_URL}}\",\r\n    \"Token\":\"{{KOBO_TOOLBOX_TOKEN}}\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/forms/provider/KoboToolbox/import-form-submissions/1023823",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"forms",
												"provider",
												"KoboToolbox",
												"import-form-submissions",
												"1023823"
											]
										},
										"description": "Add an emergency event."
									},
									"response": []
								},
								{
									"name": "Schedule assessment with generated template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_ID\", jsonRes.Data.Assessment.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New assessment is scheduled\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Assessment');",
													"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Type');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('DisplayCode');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Title');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('PatientUserId');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('AssessmentTemplateId');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Provider');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('ProviderAssessmentCode');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Status');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('ScheduledAt');  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"try {\r",
													"    var dt = new Date();\r",
													"    var today = dt.toISOString().split('T')[0];\r",
													"    pm.environment.set(\"TODAY\", today);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"ScheduledDate\": \"{{TODAY}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Run Kobo Form assessment",
							"item": [
								{
									"name": "Start assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment is started\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.Next).to.have.property('id');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/start",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer first question - Text value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": \"Rohit\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer second question - Text value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": \"Kharade\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer third question - Date value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Date\",\r\n    \"Answer\": \"1975-01-06\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer fiourth question - single choice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": \"1\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer fifth question - Text value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": \"+91-1234567890\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer sixth question - Text value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": \"India\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer seventh question - Float Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Float\",\r\n    \"Answer\": \"10000\"\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer eighth question - Multiple choice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Multi Choice Selection\",\r\n    \"Answer\": [\r\n        1,\r\n        3\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer ninth question - Integer Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"12- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Integer\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload file as an answer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jasonRes = pm.response.json();\r",
													"    var resources = jasonRes.Data.FileResources;\r",
													"    var resource = resources[0];\r",
													"    var resourceId = resource.id;\r",
													"\r",
													"    pm.environment.set(\"UPLOADED_RESOURCE_ID\", resourceId);\r",
													"    pm.environment.set(\"RESOURCE_ID\", resourceId);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"File is uploaded\", function () {\r",
													"\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('FileResources');\r",
													"    pm.expect(jsonRes.Data.FileResources.length).greaterThan(0);\r",
													"\r",
													"    var resource = jsonRes.Data.FileResources[0];\r",
													"\r",
													"    pm.expect(resource).to.have.property('id');\r",
													"    pm.expect(resource).to.have.property('FileName');\r",
													"    pm.expect(resource).to.have.property('Url');\r",
													"    pm.expect(resource).to.have.property('UploadedByUserId');\r",
													"    pm.expect(resource).to.have.property('MimeType');\r",
													"    pm.expect(resource).to.have.property('Versions');\r",
													"    pm.expect(resource).to.have.property('Tags');\r",
													"    pm.expect(resource).to.have.property('References');\r",
													"    pm.expect(resource).to.have.property('DefaultVersion');\r",
													"\r",
													"    pm.expect(resource.Versions.length).greaterThan(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "enc",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "Name",
													"type": "file",
													"src": "profile.images/female/1.jpg"
												},
												{
													"key": "IsPublicResource",
													"value": "true",
													"type": "text"
												},
												{
													"key": "IsMultiResolutionImage",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/file-resources/upload",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"file-resources",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer tenth question - File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"    pm.expect(jsonRes.Message).to.eql('Assessment has completed successfully!');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"File\",\r\n    \"Answer\": {\r\n        \"ResourceId\": \"{{RESOURCE_ID}}\",\r\n        \"FileName\": \"2.jpg\",\r\n        \"Url\": \"http://localhost:7272/api/v1/file-resources/09d85c49-862f-4e43-a855-a31bcbd3e0b1/download\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_NEXT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Custom assessments",
							"item": [
								{
									"name": "Add nodes",
									"item": [
										{
											"name": "Create an assessment template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
															"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ROOT_NODE_ID\", jsonRes.Data.AssessmentTemplate.RootNodeId);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment template is created\", function () {",
															"   ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"A new assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Description of template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Careplan\");",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"A new assessment template\",\n    \"Description\": \"Description of template\",\n    \"Type\": \"Careplan\",\n    \"Provider\": \"REAN\",\n    \"ProviderAssessmentCode\": \"1\",\n    \"ServeListNodeChildrenAtOnce\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node - single choice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_01_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Seen your physician for an unscheduled visit?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Single Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"        \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);   \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Seen your physician for an unscheduled visit?\",\r\n    \"Description\": \"Unscheduled visit for some emergency checks\",\r\n    \"QueryResponseType\": \"Single Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"ProviderGivenCode\": \"yes\",\r\n            \"Text\": \"Yes\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"ProviderGivenCode\": \"no\",\r\n            \"Text\": \"No\",\r\n            \"Sequence\": 2\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node - multi-choice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_02_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - multi choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"What are your preferred activity selections?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Multi Choice Selection\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"What are your preferred activity selections?\",\r\n    \"QueryResponseType\": \"Multi Choice Selection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"Walking\",\r\n            \"Sequence\": 1\r\n        },\r\n        {\r\n            \"Text\": \"Sports\",\r\n            \"Sequence\": 2\r\n        },\r\n        {\r\n            \"Text\": \"Hiking\",\r\n            \"Sequence\": 3\r\n        },\r\n        {\r\n            \"Text\": \"Cycling\",\r\n            \"Sequence\": 4\r\n        },\r\n        {\r\n            \"Text\": \"Yoga\",\r\n            \"Sequence\": 5\r\n        }\r\n    ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add list node",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_03_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_LIST_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment list node is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Daily check list\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Node list\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Node list\",\r\n    \"Title\": \"Daily check list\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node - text",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_04_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Title).equals(\"Time per week spent in moderate physical activity?\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Text\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_LIST_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Time per week spent in moderate physical activity?\",\r\n    \"Description\": \"Minutes\",\r\n    \"QueryResponseType\": \"Text\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node - date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_05_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Date\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_LIST_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Your birth date\",\r\n    \"QueryResponseType\": \"Date\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add question node - boolean",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_06_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Assessment question node - single choice selection is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('QueryResponseType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.QueryResponseType).equals(\"Boolean\");\r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Question\");\r",
															"            \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_LIST_NODE_ID}}\",\r\n    \"NodeType\": \"Question\",\r\n    \"Title\": \"Are you smoker?\",\r\n    \"QueryResponseType\": \"Boolean\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add message node",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();\r",
															"\r",
															"try {\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_07_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"    pm.environment.set(\"ASSESSMENT_NODE_ID\", jsonRes.Data.AssessmentNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Message node is created\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.NodeType).equals(\"Message\");\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{ASSESSMENT_TEMPLATE_ROOT_NODE_ID}}\",\r\n    \"NodeType\": \"Message\",\r\n    \"Title\": \"Visit to doctor recommended\",\r\n    \"Message\": \"Please see your doctor this weekend.\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get updated assessment template by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment template is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"A new assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Description of template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Careplan\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get updated assessment template by id Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment template is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"A new assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Description of template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Careplan\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/573f823e-e5dc-4614-ba69-9d9c7a716efa",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"573f823e-e5dc-4614-ba69-9d9c7a716efa"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get node by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Get assessment node\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes/{{ASSESSMENT_NODE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes",
														"{{ASSESSMENT_NODE_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Assessment - schedule/create, update, search",
									"item": [
										{
											"name": "Schedule a new assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_ID\", jsonRes.Data.Assessment.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(201);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"New assessment is created\", function () {",
															"   ",
															"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
															"    var expectedTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Assessment');",
															"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('id');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('PatientUserId');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('AssessmentTemplateId');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.Assessment.Title).equals(\"A new assessment\");",
															"    pm.expect(jsonRes.Data.Assessment.PatientUserId).equals(expectedPatientUserId);",
															"    pm.expect(jsonRes.Data.Assessment.AssessmentTemplateId).equals(expectedTemplateId);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var today = (new Date()).toISOString().split('T')[0];\r",
															"pm.environment.set(\"TODAY\", today);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Title\": \"A new assessment\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"ScheduledDate\": \"{{TODAY}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get assessment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment is successfully started\", function () {",
															"",
															"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
															"    var expectedTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Assessment');",
															"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('id');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('PatientUserId');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('AssessmentTemplateId');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.Assessment.Title).equals(\"A new assessment\");",
															"    pm.expect(jsonRes.Data.Assessment.PatientUserId).equals(expectedPatientUserId);",
															"    pm.expect(jsonRes.Data.Assessment.AssessmentTemplateId).equals(expectedTemplateId);",
															"",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update assessment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Updated assessment is returned\", function () {",
															"",
															"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
															"    var expectedTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Assessment');",
															"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('id');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('PatientUserId');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('AssessmentTemplateId');",
															"    pm.expect(jsonRes.Data.Assessment).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.Assessment.Title).equals(\"An updated assessment\");",
															"    pm.expect(jsonRes.Data.Assessment.PatientUserId).equals(expectedPatientUserId);",
															"    pm.expect(jsonRes.Data.Assessment.AssessmentTemplateId).equals(expectedTemplateId);",
															"    ",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var day = new Date();\r",
															"day.setDate(28);\r",
															"var str = day.toISOString().split('T')[0];\r",
															"pm.environment.set(\"UPDATED_DATE\", str);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"An updated assessment\",\n    \"ScheduledDate\": \"{{UPDATED_DATE}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search assessments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"List of assessments is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentRecords');",
															"    pm.expect(jsonRes.Data.AssessmentRecords.Items.length).greaterThan(0);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/search?pageIndex=0&itemsPerPage=25&minValue=0&maxValue=100",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"search"
													],
													"query": [
														{
															"key": "orderBy",
															"value": "CreatedAt",
															"disabled": true
														},
														{
															"key": "order",
															"value": "ascending",
															"disabled": true
														},
														{
															"key": "pageIndex",
															"value": "0"
														},
														{
															"key": "itemsPerPage",
															"value": "25"
														},
														{
															"key": "minValue",
															"value": "0"
														},
														{
															"key": "maxValue",
															"value": "100"
														},
														{
															"key": "patientUserId",
															"value": "{{PATIENT_USER_ID}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Start assessment",
									"item": [
										{
											"name": "Start assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment is started\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.Next).to.have.property('id');",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/start",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"start"
													]
												}
											},
											"response": []
										},
										{
											"name": "Try to start assessment again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is unsuccessfull\", function () {",
															"    pm.response.to.have.status(400);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('failure');",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/start",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"start"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get next assessment question",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment question is returned\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.Next).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.Next).to.have.property('id');",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/next",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"next"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get assessment question by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment question is returned\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Question');",
															"    pm.expect(jsonRes.Data.Question).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.Question).to.have.property('id');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"{{ASSESSMENT_QUESTION_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get next question",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonRes = pm.response.json();",
															"",
															"try {",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment is returned\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.Next).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.Next).to.have.property('id');",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/next",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"next"
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer first question - single choice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"First assessment question is answered\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 1\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"{{ASSESSMENT_QUESTION_ID}}",
														"answer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer second question - multi choice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Second assessment question (multi choice) is answered\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ResponseType\": \"Multi Choice Selection\",\r\n    \"Answer\": [\r\n        1,\r\n        3,\r\n        4\r\n    ]\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"{{ASSESSMENT_NEXT_QUESTION_ID}}",
														"answer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer third question - Text value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Third assessment question (text value) is answered\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ResponseType\": \"Text\",\r\n    \"Answer\": 35\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"{{ASSESSMENT_NEXT_QUESTION_ID}}",
														"answer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer fourth question - Date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Fourth assessment question (date answer) is answered\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ResponseType\": \"Date\",\r\n    \"Answer\": \"1975-01-26\"\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"{{ASSESSMENT_NEXT_QUESTION_ID}}",
														"answer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer fifth question - Boolean",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Fourth assessment question (date answer) is answered\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
															"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
															"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ResponseType\": \"Boolean\",\r\n    \"Answer\": false\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"{{ASSESSMENT_NEXT_QUESTION_ID}}",
														"answer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer last question - Message",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    var jsonRes = pm.response.json();",
															"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
															"}",
															"catch (error) {",
															"    console.log(error.message);",
															"}",
															"",
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"    pm.expect(jsonRes.Message).to.eql('Assessment has completed successfully!');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ResponseType\": \"Ok\",\r\n    \"Answer\": \"Ok\"\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_NEXT_QUESTION_ID}}/answer",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}",
														"questions",
														"{{ASSESSMENT_NEXT_QUESTION_ID}}",
														"answer"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Export template",
									"item": [
										{
											"name": "Export template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ADMIN_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/export",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"export"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Get assessment template by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment template is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"A new assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Description of template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Careplan\");",
															"",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update assessment template by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Updated assessment template is returned\", function () {",
															"",
															"    var jsonRes = pm.response.json();",
															"",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
															"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
															"    ",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Title).equals(\"An updated assessment template\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Description).equals(\"Updated description\");",
															"    pm.expect(jsonRes.Data.AssessmentTemplate.Type).equals(\"Protocol\");",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Title\": \"An updated assessment template\",\n    \"Description\": \"Updated description\",\n    \"Type\": \"Protocol\",\n    \"Provider\": \"NICE\",\n    \"ProviderAssessmentCode\": \"2000\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search assessment templates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"List of assessment tempaltes is returned\", function () {",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplateRecords');",
															"    pm.expect(jsonRes.Data.AssessmentTemplateRecords.Items.length).greaterThan(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/search",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"search"
													],
													"query": [
														{
															"key": "orderBy",
															"value": "CreatedAt",
															"disabled": true
														},
														{
															"key": "order",
															"value": "ascending",
															"disabled": true
														},
														{
															"key": "pageIndex",
															"value": "0",
															"disabled": true
														},
														{
															"key": "itemsPerPage",
															"value": "25",
															"disabled": true
														},
														{
															"key": "minValue",
															"value": "0",
															"disabled": true
														},
														{
															"key": "maxValue",
															"value": "100",
															"disabled": true
														},
														{
															"key": "title",
															"value": "genera",
															"disabled": true
														},
														{
															"key": "type",
															"value": "Careplan",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update node",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Get assessment node\", function () {\r",
															"   \r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('AssessmentNode');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.not.be.empty;\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('ParentNodeId');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('NodeType');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Title');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data.AssessmentNode).to.have.property('TemplateId');\r",
															"    \r",
															"    pm.expect(jsonRes.Data.AssessmentNode.Sequence).greaterThan(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Title\": \"Please visit your doctor\",\r\n    \"Sequence\": 15,\r\n    \"Description\": \"Please make time to consult your doctor.\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes/{{ASSESSMENT_NODE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes",
														"{{ASSESSMENT_NODE_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove node by id",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}/nodes/{{ASSESSMENT_NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}",
														"nodes",
														"{{ASSESSMENT_NODE_01_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment is deleted\", function () {",
															"",
															"    var expectedValue = true;",
															"    ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
															"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{PATIENT_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessments",
														"{{ASSESSMENT_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete assessment template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Status).to.eql('success');",
															"});",
															"",
															"pm.test(\"Assessment template is deleted\", function () {",
															"",
															"    var expectedValue = true;",
															"    ",
															"    var jsonRes = pm.response.json();",
															"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
															"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{DOCTOR_USER_JWT}}",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_CLIENT_INTERNAL_KEY}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/clinical/assessment-templates/{{ASSESSMENT_TEMPLATE_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"clinical",
														"assessment-templates",
														"{{ASSESSMENT_TEMPLATE_ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "KCCQ assessment",
							"item": [
								{
									"name": "Import template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_TEMPLATE_ID\", jsonRes.Data.AssessmentTemplate.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment template is returned\", function () {",
													"",
													"    var jsonRes = pm.response.json();",
													"",
													"    pm.expect(jsonRes.Data).to.have.property('AssessmentTemplate');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('id');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Title');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Description');",
													"    pm.expect(jsonRes.Data.AssessmentTemplate).to.have.property('Type');",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ADMIN_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "Name",
													"type": "file",
													"src": "new_KCCQ12.json"
												},
												{
													"key": "IsPublicResource",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessment-templates/import-file",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessment-templates",
												"import-file"
											]
										}
									},
									"response": []
								},
								{
									"name": "Schedule a assessment from imported template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();",
													"",
													"try {",
													"    pm.environment.set(\"ASSESSMENT_ID\", jsonRes.Data.Assessment.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(201);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"New assessment is created\", function () {",
													"   ",
													"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");",
													"    var expectedTemplateId = pm.environment.get(\"ASSESSMENT_TEMPLATE_ID\");",
													"",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Assessment');",
													"    pm.expect(jsonRes.Data.Assessment).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('id');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Title');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('PatientUserId');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('AssessmentTemplateId');",
													"    pm.expect(jsonRes.Data.Assessment).to.have.property('Type');",
													"    ",
													"    pm.expect(jsonRes.Data.Assessment.Title).equals(\"A new assessment\");",
													"    pm.expect(jsonRes.Data.Assessment.PatientUserId).equals(expectedPatientUserId);",
													"    pm.expect(jsonRes.Data.Assessment.AssessmentTemplateId).equals(expectedTemplateId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var today = (new Date()).toISOString().split('T')[0];\r",
													"pm.environment.set(\"TODAY\", today);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\n    \"Title\": \"A new assessment\",\n    \"AssessmentTemplateId\": \"{{ASSESSMENT_TEMPLATE_ID}}\",\n    \"ScheduledDate\": \"{{TODAY}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start assessment list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"try {",
													"    var jsonRes = pm.response.json();",
													"    var next = jsonRes.Data.Next;",
													"    if (next.NodeType == \"Node list\") {",
													"        const listNodeId = next.id;",
													"        pm.environment.set(\"ASSESSMENT_LIST_NODE_ID\", listNodeId);",
													"    }",
													"    else {",
													"        pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);",
													"    }",
													"",
													"    for (i = 0; i<jsonRes.Data.Next.ChildrenNodeIds.length;i++ ) {",
													"        pm.environment.set(\"ASSESSMENT_LIST_QUESTION_ID_\"+i, jsonRes.Data.Next.ChildrenNodeIds[i]);",
													"    }",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment is started\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.Next).to.have.property('ChildrenNodeIds');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/start",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer first all the children in a list node",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonRes = pm.response.json();\r",
													"\r",
													"try {\r",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.Next.id);\r",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.Next.id);\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"ListNode- assessment questionis answered\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('AssessmentId');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('Parent');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('Answer');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('Next');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0].Next).to.have.property('id');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Answers\": [\r\n        {\r\n            \"QuestionId\": \"{{ASSESSMENT_LIST_QUESTION_ID_0}}\",\r\n            \"ResponseType\": \"Single Choice Selection\",\r\n            \"Answer\": 3\r\n        },\r\n        {\r\n            \"QuestionId\": \"{{ASSESSMENT_LIST_QUESTION_ID_1}}\",\r\n            \"ResponseType\": \"Single Choice Selection\",\r\n            \"Answer\": 1\r\n        },\r\n        {\r\n            \"QuestionId\": \"{{ASSESSMENT_LIST_QUESTION_ID_2}}\",\r\n            \"ResponseType\": \"Single Choice Selection\",\r\n            \"Answer\": 2\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/question-lists/{{ASSESSMENT_LIST_NODE_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"question-lists",
												"{{ASSESSMENT_LIST_NODE_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the second question",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"2- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 4\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the third question - SCS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"3- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the fourth question",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"4- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the fifth question SCQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"5- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 2\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the sixth question - SCQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    pm.environment.set(\"ASSESSMENT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"    pm.environment.set(\"ASSESSMENT_NEXT_QUESTION_ID\", jsonRes.Data.AnswerResponse.Next.id);",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"6- assessment question is answered\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('AssessmentId');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Parent');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 4\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the seventh question SCQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonRes = pm.response.json();",
													"    for (i = 0; i<jsonRes.Data.AnswerResponse.Next.ChildrenNodeIds.length; i++) {",
													"        pm.environment.set(\"ASSESSMENT_LIST_QUESTION_ID_\"+i, jsonRes.Data.AnswerResponse.Next.ChildrenNodeIds[i]);",
													"    }",
													"}",
													"catch (error) {",
													"    console.log(error.message);",
													"}",
													"",
													"pm.test(\"Request is successfull\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Status).to.eql('success');",
													"});",
													"",
													"pm.test(\"Assessment is started\", function () {",
													"    var jsonRes = pm.response.json();",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Next');",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.have.property('Answer');",
													"    pm.expect(jsonRes.Data.AnswerResponse.Next).to.have.property('ChildrenNodeIds');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ResponseType\": \"Single Choice Selection\",\r\n    \"Answer\": 1\r\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/questions/{{ASSESSMENT_QUESTION_ID}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"questions",
												"{{ASSESSMENT_QUESTION_ID}}",
												"answer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer the eighth all the children in a list node",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    var jsonRes = pm.response.json();\r",
													"}\r",
													"catch (error) {\r",
													"    console.log(error.message);\r",
													"}\r",
													"\r",
													"pm.test(\"Request is successfull\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Status).to.eql('success');\r",
													"});\r",
													"\r",
													"pm.test(\"ListNode- assessment questionis answered\", function () {\r",
													"    var jsonRes = pm.response.json();\r",
													"    pm.expect(jsonRes.Data).to.have.property('AnswerResponse');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse).to.not.be.empty;\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('AssessmentId');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('Parent');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('Answer');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0]).to.have.property('Next');\r",
													"    pm.expect(jsonRes.Data.AnswerResponse[0].Next).to.have.property('id');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{PATIENT_USER_JWT}}",
												"type": "text"
											},
											{
												"key": "x-api-key",
												"value": "{{API_CLIENT_INTERNAL_KEY}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Answers\": [\r\n        {\r\n            \"QuestionId\": \"{{ASSESSMENT_LIST_QUESTION_ID_0}}\",\r\n            \"ResponseType\": \"Single Choice Selection\",\r\n            \"Answer\": 2\r\n        },\r\n        {\r\n            \"QuestionId\": \"{{ASSESSMENT_LIST_QUESTION_ID_1}}\",\r\n            \"ResponseType\": \"Single Choice Selection\",\r\n            \"Answer\": 4\r\n        },\r\n        {\r\n            \"QuestionId\": \"{{ASSESSMENT_LIST_QUESTION_ID_2}}\",\r\n            \"ResponseType\": \"Single Choice Selection\",\r\n            \"Answer\": 6\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/clinical/assessments/{{ASSESSMENT_ID}}/question-lists/{{ASSESSMENT_LIST_QUESTION_ID_0}},{{ASSESSMENT_LIST_QUESTION_ID_1}},{{ASSESSMENT_LIST_QUESTION_ID_2}}/answer",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"clinical",
												"assessments",
												"{{ASSESSMENT_ID}}",
												"question-lists",
												"{{ASSESSMENT_LIST_QUESTION_ID_0}},{{ASSESSMENT_LIST_QUESTION_ID_1}},{{ASSESSMENT_LIST_QUESTION_ID_2}}",
												"answer"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Wearable Device Details",
			"item": [
				{
					"name": "Add wearable device details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"WEARABLE_DEVICE_DETAILS_ID\", jsonRes.Data.WearableDeviceDetail.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New wearable device details is created\", function () {\r",
									"\r",
									"    var expectedValue = \"FITBIT\";\r",
									"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('WearableDeviceDetail');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('TerraUserId');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('PatientUserId');\r",
									"    \r",
									"\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail.Provider).equals(expectedValue);\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail.PatientUserId).equals(expectedPatientUserId);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var userId = pm.environment.get(\"PATIENT_USER_ID\");\r",
									"pm.environment.set(\"RECORDED_BY_USER_ID\", userId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"TerraUserId\": \"520ca5ff-d032-4ae0-8bca-a61a91d270e9\",\r\n    \"Provider\": \"FITBIT\",\r\n    \"Scopes\": \"user.metrics,user.activity\",\r\n    \"AuthenticatedAt\": \"2021-09-02\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/wearable-device-details",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"wearable-device-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get wearable device details by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Wearable device details record is returned\", function () {\r",
									"\r",
									"    var expectedValue = \"FITBIT\";\r",
									"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('WearableDeviceDetail');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('TerraUserId');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('PatientUserId');\r",
									"    \r",
									"\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail.Provider).equals(expectedValue);\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail.PatientUserId).equals(expectedPatientUserId);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/wearable-device-details/{{WEARABLE_DEVICE_DETAILS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"wearable-device-details",
								"{{WEARABLE_DEVICE_DETAILS_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all health app status for patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/wearable-device-details/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"wearable-device-details",
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update wearable device details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Updated wearable device details is returned\", function () {\r",
									"\r",
									"    var expectedValue = \"APPLE\";\r",
									"    var expectedPatientUserId = pm.environment.get(\"PATIENT_USER_ID\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('WearableDeviceDetail');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('TerraUserId');\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail).to.have.property('PatientUserId');\r",
									"    \r",
									"\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail.Provider).equals(expectedValue);\r",
									"    pm.expect(jsonRes.Data.WearableDeviceDetail.PatientUserId).equals(expectedPatientUserId);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PatientUserId\": \"{{PATIENT_USER_ID}}\",\r\n    \"TerraUserId\": \"470ca5ff-d032-4ae0-8bca-a61a91d270e9\",\r\n    \"Provider\": \"APPLE\",\r\n    \"Scopes\": \"user.metrics,user.activity\",\r\n    \"AuthenticatedAt\": \"2021-09-02\",\r\n    \"DeauthenticatedAt\": \"2021-09-02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/wearable-device-details/{{WEARABLE_DEVICE_DETAILS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"wearable-device-details",
								"{{WEARABLE_DEVICE_DETAILS_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search wearable device details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Record of blood glucose is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('BloodGlucoseRecords');\r",
									"    pm.expect(jsonRes.Data.BloodGlucoseRecords.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/wearable-device-details/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"wearable-device-details",
								"search"
							],
							"query": [
								{
									"key": "createdDateFrom",
									"value": "2021-09-01",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-10-14",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "Provider",
									"disabled": true
								},
								{
									"key": "order",
									"value": "ascending",
									"disabled": true
								},
								{
									"key": "pageIndex",
									"value": "0",
									"disabled": true
								},
								{
									"key": "itemsPerPage",
									"value": "25",
									"disabled": true
								},
								{
									"key": "patientUserId",
									"value": "{{PATIENT_USER_ID}}",
									"disabled": true
								},
								{
									"key": "terraUserId",
									"value": "{{TERRA_USER_ID}}",
									"disabled": true
								},
								{
									"key": "provider",
									"value": "FITBIT",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete wearable device details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Wearable device detail record is deleted\", function () {\r",
									"\r",
									"    var expectedValue = true;\r",
									"    var jsonRes = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonRes.Data).to.have.property('Deleted');\r",
									"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/wearable-device-details/{{WEARABLE_DEVICE_DETAILS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"wearable-device-details",
								"{{WEARABLE_DEVICE_DETAILS_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete patient account",
			"item": [
				{
					"name": "Delete patient",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/patients/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"patients",
								"{{PATIENT_USER_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "General",
			"item": [
				{
					"name": "Notice",
					"item": [
						{
							"name": "Add notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ID\", jsonRes.Data.Notice.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"New notice is created\", function () {\r",
											"\r",
											"    var expectedTitle =  \"Job posting\";\r",
											"    var expectedDaysActive = 7;\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');\r",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');\r",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);\r",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Job posting\",\r\n    \"Description\": \"abcs\",\r\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"PostDate\": \"2022-08-03\",\r\n    \"DaysActive\": 7,\r\n    \"Tags\": [\r\n        \"Popular\",\r\n        \"HotNews\"\r\n    ],\r\n    \"IsActive\": false,\r\n    \"ImageUrl\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\r\n    \"Action\": \"Applied\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get notice by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Notice record is returned\", function () {",
											"",
											"    var expectedTitle =  \"Job posting\";",
											"    var expectedDaysActive = 7;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');",
											"    ",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/general/notices/{{NOTICE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"{{NOTICE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update notice by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Updated notice record is returned\", function () {",
											"",
											"    var expectedTitle =  \"Job Apply\";",
											"    var expectedDaysActive = 7;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Notice');",
											"    pm.expect(jsonRes.Data.Notice).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('Title');",
											"    pm.expect(jsonRes.Data.Notice).to.have.property('DaysActive');",
											"    ",
											"    pm.expect(jsonRes.Data.Notice.Title).equals(expectedTitle);",
											"    pm.expect(jsonRes.Data.Notice.DaysActive).equals(expectedDaysActive);",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Title\": \"Job Apply\",\n    \"Description\": \"abcs\",\n    \"Link\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\n    \"PostDate\": \"2022-08-03\",\n    \"DaysActive\": 7,\n    \"Tags\": [\"Popular\", \"Hot\"],\n    \"IsActive\": false,\n    \"ImageUrl\": \"https://github.com/REAN-Foundation/reancare-service/pull/290\",\n    \"Action\": \"Applied\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/{{NOTICE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"{{NOTICE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search notices",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"List of notice records is returned\", function () {",
											"",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('NoticeRecords');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/general/notices/search?orderBy=&pageIndex=0&itemsPerPage=500&tags=HotNews",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"search"
									],
									"query": [
										{
											"key": "orderBy",
											"value": ""
										},
										{
											"key": "order",
											"value": "ascending",
											"disabled": true
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "itemsPerPage",
											"value": "500"
										},
										{
											"key": "patientUserId",
											"value": "{{PATIENT_USER_ID}}",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Job posting",
											"disabled": true
										},
										{
											"key": "link",
											"value": "",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "HotNews",
											"description": "\""
										},
										{
											"key": "postDate",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Notice record is deleted\", function () {",
											"",
											"    var expectedValue = true;",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('Deleted');",
											"    pm.expect(jsonRes.Data.Deleted).equals(expectedValue);",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/general/notices/{{NOTICE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"{{NOTICE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notice Action",
					"item": [
						{
							"name": "Create notice action record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonRes = pm.response.json();\r",
											"\r",
											"try {\r",
											"    pm.environment.set(\"NOTICE_ACTION_ID\", jsonRes.Data.NoticeAction.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Notice action performed successfully!\", function () {\r",
											"\r",
											"    var expectedAction =  \"Applied\";\r",
											"    var expectedActionTakenAt = \"2022-08-04\";\r",
											"    \r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('NoticeAction');\r",
											"    pm.expect(jsonRes.Data.NoticeAction).to.not.be.empty;\r",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('Action');\r",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('ActionTakenAt');\r",
											"    \r",
											"    pm.expect(jsonRes.Data.NoticeAction.Action).equals(expectedAction);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ActionContent\": \"Attached files\",\r\n    \"ActionTakenAt\": \"2022-08-04\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/general/notices/{{NOTICE_ID}}/actions/Applied",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"{{NOTICE_ID}}",
										"actions",
										"Applied"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get notice action record by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request is successfull\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('success');",
											"});",
											"",
											"pm.test(\"Notice action record is returned\", function () {",
											"",
											"    var expectedAction =  \"Applied\";",
											"    var expectedActionTakenAt = \"2022-08-04\";",
											"    ",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('NoticeAction');",
											"    pm.expect(jsonRes.Data.NoticeAction).to.not.be.empty;",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('Action');",
											"    pm.expect(jsonRes.Data.NoticeAction).to.have.property('ActionTakenAt');",
											"    ",
											"    pm.expect(jsonRes.Data.NoticeAction.Action).equals(expectedAction);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_USER_JWT}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_CLIENT_INTERNAL_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/general/notices/{{NOTICE_ACTION_ID}}/actions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"general",
										"notices",
										"{{NOTICE_ACTION_ID}}",
										"actions"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}