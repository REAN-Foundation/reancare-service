meta {
  name: Get Sleep record by id
  type: http
  seq: 2
}

get {
  url: {{BASE_URL}}/wellness/daily-records/sleep/{{SLEEP_RECORD_ID}}
  body: none
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Sleep record is returned", function () {
  
      var expectedPatientUserId = bru.getEnvVar("PATIENT_USER_ID");
      var expectedSleepDuration = bru.getEnvVar("SLEEP_DURATION");
      var expectedUnit = bru.getEnvVar("SLEEP_UNIT");
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('SleepRecord');
      expect(jsonRes.Data.SleepRecord).to.not.be.empty;
      expect(jsonRes.Data.SleepRecord).to.have.property('id');
      expect(jsonRes.Data.SleepRecord).to.have.property('SleepDuration');
      expect(jsonRes.Data.SleepRecord).to.have.property('Unit');
      expect(jsonRes.Data.SleepRecord).to.have.property('RecordDate');
  
      expect(jsonRes.Data.SleepRecord.PatientUserId).equals(expectedPatientUserId);
      expect(Number(jsonRes.Data.SleepRecord.SleepDuration)).equals(expectedSleepDuration);
      expect(jsonRes.Data.SleepRecord.Unit).equals(expectedUnit);
  
  });
  
  
}
