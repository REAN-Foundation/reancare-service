meta {
  name: Create second address
  type: http
  seq: 6
}

post {
  url: {{BASE_URL}}/addresses
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "Type": "Official",
      "AddressLine": "120, XYZ Lane",
      "City": "Pune",
      "District": "Pune",
      "State": "Maharashtra",
      "Country": "India",
      "PostalCode": "411001",
      "Longitude": 23.43243,
      "Lattitude": 80.24354
  }
}

tests {
  var jsonRes = res.getBody();
  
  try {
      bru.setEnvVar("ADDRESS_ID", jsonRes.Data.Address.id);
      bru.setEnvVar("ADDRESS_ID_2", jsonRes.Data.Address.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("A new address is returned", function () {
  
      var expectedType = "Official";
      var expectedAddressLine = "120, XYZ Lane";
      var expectedCity = "Pune";
      var expectedDistrict = "Pune";
      var expectedState = "Maharashtra";
      var expectedCountry = "India";
      var expectedPostalCode = "411001";
      var expectedLongitude = 23.43243;
      var expectedLattitude = 80.24354;
  
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('Address');
      expect(jsonRes.Data.Address).to.not.be.empty;
      expect(jsonRes.Data.Address).to.have.property('id');
      expect(jsonRes.Data.Address).to.have.property('Type');
      expect(jsonRes.Data.Address).to.have.property('AddressLine');
      expect(jsonRes.Data.Address).to.have.property('City');
      expect(jsonRes.Data.Address).to.have.property('District');
      expect(jsonRes.Data.Address).to.have.property('State');
      expect(jsonRes.Data.Address).to.have.property('Country');
      expect(jsonRes.Data.Address).to.have.property('PostalCode');
      expect(jsonRes.Data.Address).to.have.property('Longitude');
      expect(jsonRes.Data.Address).to.have.property('Lattitude');
  
      expect(jsonRes.Data.Address.Type).equals(expectedType);
      expect(jsonRes.Data.Address.AddressLine).equals(expectedAddressLine);
      expect(jsonRes.Data.Address.City).equals(expectedCity);
      expect(jsonRes.Data.Address.District).equals(expectedDistrict);
      expect(jsonRes.Data.Address.State).equals(expectedState);
      expect(jsonRes.Data.Address.Country).equals(expectedCountry);
      expect(jsonRes.Data.Address.PostalCode).equals(expectedPostalCode);
  
      var diffLong = Math.abs(expectedLongitude - jsonRes.Data.Address.Longitude) * 100.0 / Math.abs(expectedLongitude);
      expect(diffLong).to.be.lessThan(1.0); //difference less than 1%
  
      var diffLatt = Math.abs(expectedLattitude - jsonRes.Data.Address.Lattitude) * 100.0 / Math.abs(expectedLattitude);
      expect(diffLong).to.be.lessThan(1.0); //difference less than 1%
  
  });
  
}

docs {
  Add an address.
}
