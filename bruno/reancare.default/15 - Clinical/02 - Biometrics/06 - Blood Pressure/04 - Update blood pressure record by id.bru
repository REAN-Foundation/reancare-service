meta {
  name: Update blood pressure record by id
  type: http
  seq: 3
}

put {
  url: {{BASE_URL}}/clinical/biometrics/blood-pressures/{{BIOMETRICS_BLOOD_PRESSURE_ID}}
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{PATIENT_USER_JWT}}
  x-api-key: {{API_CLIENT_INTERNAL_KEY}}
  Content-Type: application/json
}

body:json {
  {
      "PatientUserId": "{{PATIENT_USER_ID}}",
      "Systolic": 100,
      "Diastolic": 80,
      "Unit": "mm Hg",
      "RecordDate": "2021-09-22",
      "RecordedByUserId": "{{RECORDED_BY_USER_ID}}"
  }
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Updated blood pressure record is returned", function () {
  
      var expectedSystolic = 100;
      var expectedDiastolic = 80;
      var expectedRecordDate = "2021-09-22T00:00:00.000Z";
      var expectedRecordedByUserId = bru.getEnvVar("RECORDED_BY_USER_ID");
      
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('BloodPressure');
      expect(jsonRes.Data.BloodPressure).to.not.be.empty;
      expect(jsonRes.Data.BloodPressure).to.have.property('Systolic');
      expect(jsonRes.Data.BloodPressure).to.have.property('Diastolic');
      expect(jsonRes.Data.BloodPressure).to.have.property('RecordDate');
      expect(jsonRes.Data.BloodPressure).to.have.property('RecordedByUserId');
  
      expect(jsonRes.Data.BloodPressure.Systolic).equals(expectedSystolic);
      expect(jsonRes.Data.BloodPressure.Diastolic).equals(expectedDiastolic);
      expect(jsonRes.Data.BloodPressure.RecordDate).equals(expectedRecordDate);
      expect(jsonRes.Data.BloodPressure.RecordedByUserId).equals(expectedRecordedByUserId);
      
  });
  
  
}
